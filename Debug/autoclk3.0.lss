
autoclk3.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000387c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b4  00800060  0000387c  00003910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800314  00800314  00003bc4  2**0
                  ALLOC
  3 .stab         00006450  00000000  00000000  00003bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000197f  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b993  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 32       	cpi	r26, 0x20	; 32
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ee 09 	call	0x13dc	; 0x13dc <main>
      8a:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_data_write>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	6d 97       	sbiw	r28, 0x1d	; 29
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8d 8f       	std	Y+29, r24	; 0x1d
      a8:	88 e3       	ldi	r24, 0x38	; 56
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	25 e0       	ldi	r18, 0x05	; 5
      ae:	fc 01       	movw	r30, r24
      b0:	20 83       	st	Z, r18
      b2:	82 e3       	ldi	r24, 0x32	; 50
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	2d 8d       	ldd	r18, Y+29	; 0x1d
      b8:	fc 01       	movw	r30, r24
      ba:	20 83       	st	Z, r18
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	a0 e8       	ldi	r26, 0x80	; 128
      c2:	bf e3       	ldi	r27, 0x3F	; 63
      c4:	89 83       	std	Y+1, r24	; 0x01
      c6:	9a 83       	std	Y+2, r25	; 0x02
      c8:	ab 83       	std	Y+3, r26	; 0x03
      ca:	bc 83       	std	Y+4, r27	; 0x04
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	4a e7       	ldi	r20, 0x7A	; 122
      d2:	55 e4       	ldi	r21, 0x45	; 69
      d4:	69 81       	ldd	r22, Y+1	; 0x01
      d6:	7a 81       	ldd	r23, Y+2	; 0x02
      d8:	8b 81       	ldd	r24, Y+3	; 0x03
      da:	9c 81       	ldd	r25, Y+4	; 0x04
      dc:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
      e0:	dc 01       	movw	r26, r24
      e2:	cb 01       	movw	r24, r22
      e4:	8d 83       	std	Y+5, r24	; 0x05
      e6:	9e 83       	std	Y+6, r25	; 0x06
      e8:	af 83       	std	Y+7, r26	; 0x07
      ea:	b8 87       	std	Y+8, r27	; 0x08
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	40 e8       	ldi	r20, 0x80	; 128
      f2:	5f e3       	ldi	r21, 0x3F	; 63
      f4:	6d 81       	ldd	r22, Y+5	; 0x05
      f6:	7e 81       	ldd	r23, Y+6	; 0x06
      f8:	8f 81       	ldd	r24, Y+7	; 0x07
      fa:	98 85       	ldd	r25, Y+8	; 0x08
      fc:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
     100:	88 23       	and	r24, r24
     102:	2c f4       	brge	.+10     	; 0x10e <lcd_data_write+0x7c>
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	9a 87       	std	Y+10, r25	; 0x0a
     10a:	89 87       	std	Y+9, r24	; 0x09
     10c:	3f c0       	rjmp	.+126    	; 0x18c <lcd_data_write+0xfa>
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	3f ef       	ldi	r19, 0xFF	; 255
     112:	4f e7       	ldi	r20, 0x7F	; 127
     114:	57 e4       	ldi	r21, 0x47	; 71
     116:	6d 81       	ldd	r22, Y+5	; 0x05
     118:	7e 81       	ldd	r23, Y+6	; 0x06
     11a:	8f 81       	ldd	r24, Y+7	; 0x07
     11c:	98 85       	ldd	r25, Y+8	; 0x08
     11e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
     122:	18 16       	cp	r1, r24
     124:	4c f5       	brge	.+82     	; 0x178 <lcd_data_write+0xe6>
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	40 e2       	ldi	r20, 0x20	; 32
     12c:	51 e4       	ldi	r21, 0x41	; 65
     12e:	69 81       	ldd	r22, Y+1	; 0x01
     130:	7a 81       	ldd	r23, Y+2	; 0x02
     132:	8b 81       	ldd	r24, Y+3	; 0x03
     134:	9c 81       	ldd	r25, Y+4	; 0x04
     136:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
     13a:	dc 01       	movw	r26, r24
     13c:	cb 01       	movw	r24, r22
     13e:	bc 01       	movw	r22, r24
     140:	cd 01       	movw	r24, r26
     142:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     146:	dc 01       	movw	r26, r24
     148:	cb 01       	movw	r24, r22
     14a:	9a 87       	std	Y+10, r25	; 0x0a
     14c:	89 87       	std	Y+9, r24	; 0x09
     14e:	0f c0       	rjmp	.+30     	; 0x16e <lcd_data_write+0xdc>
     150:	80 e9       	ldi	r24, 0x90	; 144
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	9c 87       	std	Y+12, r25	; 0x0c
     156:	8b 87       	std	Y+11, r24	; 0x0b
     158:	8b 85       	ldd	r24, Y+11	; 0x0b
     15a:	9c 85       	ldd	r25, Y+12	; 0x0c
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_data_write+0xca>
     160:	9c 87       	std	Y+12, r25	; 0x0c
     162:	8b 87       	std	Y+11, r24	; 0x0b
     164:	89 85       	ldd	r24, Y+9	; 0x09
     166:	9a 85       	ldd	r25, Y+10	; 0x0a
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	9a 87       	std	Y+10, r25	; 0x0a
     16c:	89 87       	std	Y+9, r24	; 0x09
     16e:	89 85       	ldd	r24, Y+9	; 0x09
     170:	9a 85       	ldd	r25, Y+10	; 0x0a
     172:	00 97       	sbiw	r24, 0x00	; 0
     174:	69 f7       	brne	.-38     	; 0x150 <lcd_data_write+0xbe>
     176:	14 c0       	rjmp	.+40     	; 0x1a0 <lcd_data_write+0x10e>
     178:	6d 81       	ldd	r22, Y+5	; 0x05
     17a:	7e 81       	ldd	r23, Y+6	; 0x06
     17c:	8f 81       	ldd	r24, Y+7	; 0x07
     17e:	98 85       	ldd	r25, Y+8	; 0x08
     180:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     184:	dc 01       	movw	r26, r24
     186:	cb 01       	movw	r24, r22
     188:	9a 87       	std	Y+10, r25	; 0x0a
     18a:	89 87       	std	Y+9, r24	; 0x09
     18c:	89 85       	ldd	r24, Y+9	; 0x09
     18e:	9a 85       	ldd	r25, Y+10	; 0x0a
     190:	9e 87       	std	Y+14, r25	; 0x0e
     192:	8d 87       	std	Y+13, r24	; 0x0d
     194:	8d 85       	ldd	r24, Y+13	; 0x0d
     196:	9e 85       	ldd	r25, Y+14	; 0x0e
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_data_write+0x106>
     19c:	9e 87       	std	Y+14, r25	; 0x0e
     19e:	8d 87       	std	Y+13, r24	; 0x0d
     1a0:	88 e3       	ldi	r24, 0x38	; 56
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	21 e0       	ldi	r18, 0x01	; 1
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	a0 e8       	ldi	r26, 0x80	; 128
     1b0:	bf e3       	ldi	r27, 0x3F	; 63
     1b2:	8f 87       	std	Y+15, r24	; 0x0f
     1b4:	98 8b       	std	Y+16, r25	; 0x10
     1b6:	a9 8b       	std	Y+17, r26	; 0x11
     1b8:	ba 8b       	std	Y+18, r27	; 0x12
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	4a e7       	ldi	r20, 0x7A	; 122
     1c0:	55 e4       	ldi	r21, 0x45	; 69
     1c2:	6f 85       	ldd	r22, Y+15	; 0x0f
     1c4:	78 89       	ldd	r23, Y+16	; 0x10
     1c6:	89 89       	ldd	r24, Y+17	; 0x11
     1c8:	9a 89       	ldd	r25, Y+18	; 0x12
     1ca:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
     1ce:	dc 01       	movw	r26, r24
     1d0:	cb 01       	movw	r24, r22
     1d2:	8b 8b       	std	Y+19, r24	; 0x13
     1d4:	9c 8b       	std	Y+20, r25	; 0x14
     1d6:	ad 8b       	std	Y+21, r26	; 0x15
     1d8:	be 8b       	std	Y+22, r27	; 0x16
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 e8       	ldi	r20, 0x80	; 128
     1e0:	5f e3       	ldi	r21, 0x3F	; 63
     1e2:	6b 89       	ldd	r22, Y+19	; 0x13
     1e4:	7c 89       	ldd	r23, Y+20	; 0x14
     1e6:	8d 89       	ldd	r24, Y+21	; 0x15
     1e8:	9e 89       	ldd	r25, Y+22	; 0x16
     1ea:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
     1ee:	88 23       	and	r24, r24
     1f0:	2c f4       	brge	.+10     	; 0x1fc <lcd_data_write+0x16a>
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	98 8f       	std	Y+24, r25	; 0x18
     1f8:	8f 8b       	std	Y+23, r24	; 0x17
     1fa:	3f c0       	rjmp	.+126    	; 0x27a <lcd_data_write+0x1e8>
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	3f ef       	ldi	r19, 0xFF	; 255
     200:	4f e7       	ldi	r20, 0x7F	; 127
     202:	57 e4       	ldi	r21, 0x47	; 71
     204:	6b 89       	ldd	r22, Y+19	; 0x13
     206:	7c 89       	ldd	r23, Y+20	; 0x14
     208:	8d 89       	ldd	r24, Y+21	; 0x15
     20a:	9e 89       	ldd	r25, Y+22	; 0x16
     20c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
     210:	18 16       	cp	r1, r24
     212:	4c f5       	brge	.+82     	; 0x266 <lcd_data_write+0x1d4>
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e2       	ldi	r20, 0x20	; 32
     21a:	51 e4       	ldi	r21, 0x41	; 65
     21c:	6f 85       	ldd	r22, Y+15	; 0x0f
     21e:	78 89       	ldd	r23, Y+16	; 0x10
     220:	89 89       	ldd	r24, Y+17	; 0x11
     222:	9a 89       	ldd	r25, Y+18	; 0x12
     224:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	bc 01       	movw	r22, r24
     22e:	cd 01       	movw	r24, r26
     230:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	98 8f       	std	Y+24, r25	; 0x18
     23a:	8f 8b       	std	Y+23, r24	; 0x17
     23c:	0f c0       	rjmp	.+30     	; 0x25c <lcd_data_write+0x1ca>
     23e:	80 e9       	ldi	r24, 0x90	; 144
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	9a 8f       	std	Y+26, r25	; 0x1a
     244:	89 8f       	std	Y+25, r24	; 0x19
     246:	89 8d       	ldd	r24, Y+25	; 0x19
     248:	9a 8d       	ldd	r25, Y+26	; 0x1a
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_data_write+0x1b8>
     24e:	9a 8f       	std	Y+26, r25	; 0x1a
     250:	89 8f       	std	Y+25, r24	; 0x19
     252:	8f 89       	ldd	r24, Y+23	; 0x17
     254:	98 8d       	ldd	r25, Y+24	; 0x18
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	98 8f       	std	Y+24, r25	; 0x18
     25a:	8f 8b       	std	Y+23, r24	; 0x17
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	69 f7       	brne	.-38     	; 0x23e <lcd_data_write+0x1ac>
     264:	14 c0       	rjmp	.+40     	; 0x28e <lcd_data_write+0x1fc>
     266:	6b 89       	ldd	r22, Y+19	; 0x13
     268:	7c 89       	ldd	r23, Y+20	; 0x14
     26a:	8d 89       	ldd	r24, Y+21	; 0x15
     26c:	9e 89       	ldd	r25, Y+22	; 0x16
     26e:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     272:	dc 01       	movw	r26, r24
     274:	cb 01       	movw	r24, r22
     276:	98 8f       	std	Y+24, r25	; 0x18
     278:	8f 8b       	std	Y+23, r24	; 0x17
     27a:	8f 89       	ldd	r24, Y+23	; 0x17
     27c:	98 8d       	ldd	r25, Y+24	; 0x18
     27e:	9c 8f       	std	Y+28, r25	; 0x1c
     280:	8b 8f       	std	Y+27, r24	; 0x1b
     282:	8b 8d       	ldd	r24, Y+27	; 0x1b
     284:	9c 8d       	ldd	r25, Y+28	; 0x1c
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <lcd_data_write+0x1f4>
     28a:	9c 8f       	std	Y+28, r25	; 0x1c
     28c:	8b 8f       	std	Y+27, r24	; 0x1b
     28e:	6d 96       	adiw	r28, 0x1d	; 29
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <lcd_command_write>:
	LCD_CONT_PORT=_BV(LCD_RS);
	_delay_ms(1);
}


void lcd_command_write(unsigned char command){
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	6d 97       	sbiw	r28, 0x1d	; 29
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	de bf       	out	0x3e, r29	; 62
     2b0:	0f be       	out	0x3f, r0	; 63
     2b2:	cd bf       	out	0x3d, r28	; 61
     2b4:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_CONT_PORT=_BV(LCD_EN);
     2b6:	88 e3       	ldi	r24, 0x38	; 56
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	24 e0       	ldi	r18, 0x04	; 4
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
	LCD_DATA_PORT=command;
     2c0:	82 e3       	ldi	r24, 0x32	; 50
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	2d 8d       	ldd	r18, Y+29	; 0x1d
     2c6:	fc 01       	movw	r30, r24
     2c8:	20 83       	st	Z, r18
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	a0 e8       	ldi	r26, 0x80	; 128
     2d0:	bf e3       	ldi	r27, 0x3F	; 63
     2d2:	89 83       	std	Y+1, r24	; 0x01
     2d4:	9a 83       	std	Y+2, r25	; 0x02
     2d6:	ab 83       	std	Y+3, r26	; 0x03
     2d8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	4a e7       	ldi	r20, 0x7A	; 122
     2e0:	55 e4       	ldi	r21, 0x45	; 69
     2e2:	69 81       	ldd	r22, Y+1	; 0x01
     2e4:	7a 81       	ldd	r23, Y+2	; 0x02
     2e6:	8b 81       	ldd	r24, Y+3	; 0x03
     2e8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ea:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
     2ee:	dc 01       	movw	r26, r24
     2f0:	cb 01       	movw	r24, r22
     2f2:	8d 83       	std	Y+5, r24	; 0x05
     2f4:	9e 83       	std	Y+6, r25	; 0x06
     2f6:	af 83       	std	Y+7, r26	; 0x07
     2f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	40 e8       	ldi	r20, 0x80	; 128
     300:	5f e3       	ldi	r21, 0x3F	; 63
     302:	6d 81       	ldd	r22, Y+5	; 0x05
     304:	7e 81       	ldd	r23, Y+6	; 0x06
     306:	8f 81       	ldd	r24, Y+7	; 0x07
     308:	98 85       	ldd	r25, Y+8	; 0x08
     30a:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
     30e:	88 23       	and	r24, r24
     310:	2c f4       	brge	.+10     	; 0x31c <lcd_command_write+0x7c>
		__ticks = 1;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9a 87       	std	Y+10, r25	; 0x0a
     318:	89 87       	std	Y+9, r24	; 0x09
     31a:	3f c0       	rjmp	.+126    	; 0x39a <lcd_command_write+0xfa>
	else if (__tmp > 65535)
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	3f ef       	ldi	r19, 0xFF	; 255
     320:	4f e7       	ldi	r20, 0x7F	; 127
     322:	57 e4       	ldi	r21, 0x47	; 71
     324:	6d 81       	ldd	r22, Y+5	; 0x05
     326:	7e 81       	ldd	r23, Y+6	; 0x06
     328:	8f 81       	ldd	r24, Y+7	; 0x07
     32a:	98 85       	ldd	r25, Y+8	; 0x08
     32c:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
     330:	18 16       	cp	r1, r24
     332:	4c f5       	brge	.+82     	; 0x386 <lcd_command_write+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	40 e2       	ldi	r20, 0x20	; 32
     33a:	51 e4       	ldi	r21, 0x41	; 65
     33c:	69 81       	ldd	r22, Y+1	; 0x01
     33e:	7a 81       	ldd	r23, Y+2	; 0x02
     340:	8b 81       	ldd	r24, Y+3	; 0x03
     342:	9c 81       	ldd	r25, Y+4	; 0x04
     344:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
     348:	dc 01       	movw	r26, r24
     34a:	cb 01       	movw	r24, r22
     34c:	bc 01       	movw	r22, r24
     34e:	cd 01       	movw	r24, r26
     350:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	9a 87       	std	Y+10, r25	; 0x0a
     35a:	89 87       	std	Y+9, r24	; 0x09
     35c:	0f c0       	rjmp	.+30     	; 0x37c <lcd_command_write+0xdc>
     35e:	80 e9       	ldi	r24, 0x90	; 144
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	9c 87       	std	Y+12, r25	; 0x0c
     364:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     366:	8b 85       	ldd	r24, Y+11	; 0x0b
     368:	9c 85       	ldd	r25, Y+12	; 0x0c
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <lcd_command_write+0xca>
     36e:	9c 87       	std	Y+12, r25	; 0x0c
     370:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     372:	89 85       	ldd	r24, Y+9	; 0x09
     374:	9a 85       	ldd	r25, Y+10	; 0x0a
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	9a 87       	std	Y+10, r25	; 0x0a
     37a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     37c:	89 85       	ldd	r24, Y+9	; 0x09
     37e:	9a 85       	ldd	r25, Y+10	; 0x0a
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	69 f7       	brne	.-38     	; 0x35e <lcd_command_write+0xbe>
     384:	14 c0       	rjmp	.+40     	; 0x3ae <lcd_command_write+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     386:	6d 81       	ldd	r22, Y+5	; 0x05
     388:	7e 81       	ldd	r23, Y+6	; 0x06
     38a:	8f 81       	ldd	r24, Y+7	; 0x07
     38c:	98 85       	ldd	r25, Y+8	; 0x08
     38e:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     392:	dc 01       	movw	r26, r24
     394:	cb 01       	movw	r24, r22
     396:	9a 87       	std	Y+10, r25	; 0x0a
     398:	89 87       	std	Y+9, r24	; 0x09
     39a:	89 85       	ldd	r24, Y+9	; 0x09
     39c:	9a 85       	ldd	r25, Y+10	; 0x0a
     39e:	9e 87       	std	Y+14, r25	; 0x0e
     3a0:	8d 87       	std	Y+13, r24	; 0x0d
     3a2:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a4:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	f1 f7       	brne	.-4      	; 0x3a6 <lcd_command_write+0x106>
     3aa:	9e 87       	std	Y+14, r25	; 0x0e
     3ac:	8d 87       	std	Y+13, r24	; 0x0d
	_delay_ms(1);
	LCD_CONT_PORT=0x00;
     3ae:	88 e3       	ldi	r24, 0x38	; 56
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	10 82       	st	Z, r1
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	a0 e8       	ldi	r26, 0x80	; 128
     3bc:	bf e3       	ldi	r27, 0x3F	; 63
     3be:	8f 87       	std	Y+15, r24	; 0x0f
     3c0:	98 8b       	std	Y+16, r25	; 0x10
     3c2:	a9 8b       	std	Y+17, r26	; 0x11
     3c4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     3c6:	20 e0       	ldi	r18, 0x00	; 0
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	4a e7       	ldi	r20, 0x7A	; 122
     3cc:	55 e4       	ldi	r21, 0x45	; 69
     3ce:	6f 85       	ldd	r22, Y+15	; 0x0f
     3d0:	78 89       	ldd	r23, Y+16	; 0x10
     3d2:	89 89       	ldd	r24, Y+17	; 0x11
     3d4:	9a 89       	ldd	r25, Y+18	; 0x12
     3d6:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
     3da:	dc 01       	movw	r26, r24
     3dc:	cb 01       	movw	r24, r22
     3de:	8b 8b       	std	Y+19, r24	; 0x13
     3e0:	9c 8b       	std	Y+20, r25	; 0x14
     3e2:	ad 8b       	std	Y+21, r26	; 0x15
     3e4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e8       	ldi	r20, 0x80	; 128
     3ec:	5f e3       	ldi	r21, 0x3F	; 63
     3ee:	6b 89       	ldd	r22, Y+19	; 0x13
     3f0:	7c 89       	ldd	r23, Y+20	; 0x14
     3f2:	8d 89       	ldd	r24, Y+21	; 0x15
     3f4:	9e 89       	ldd	r25, Y+22	; 0x16
     3f6:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
     3fa:	88 23       	and	r24, r24
     3fc:	2c f4       	brge	.+10     	; 0x408 <lcd_command_write+0x168>
		__ticks = 1;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	98 8f       	std	Y+24, r25	; 0x18
     404:	8f 8b       	std	Y+23, r24	; 0x17
     406:	3f c0       	rjmp	.+126    	; 0x486 <lcd_command_write+0x1e6>
	else if (__tmp > 65535)
     408:	20 e0       	ldi	r18, 0x00	; 0
     40a:	3f ef       	ldi	r19, 0xFF	; 255
     40c:	4f e7       	ldi	r20, 0x7F	; 127
     40e:	57 e4       	ldi	r21, 0x47	; 71
     410:	6b 89       	ldd	r22, Y+19	; 0x13
     412:	7c 89       	ldd	r23, Y+20	; 0x14
     414:	8d 89       	ldd	r24, Y+21	; 0x15
     416:	9e 89       	ldd	r25, Y+22	; 0x16
     418:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
     41c:	18 16       	cp	r1, r24
     41e:	4c f5       	brge	.+82     	; 0x472 <lcd_command_write+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	40 e2       	ldi	r20, 0x20	; 32
     426:	51 e4       	ldi	r21, 0x41	; 65
     428:	6f 85       	ldd	r22, Y+15	; 0x0f
     42a:	78 89       	ldd	r23, Y+16	; 0x10
     42c:	89 89       	ldd	r24, Y+17	; 0x11
     42e:	9a 89       	ldd	r25, Y+18	; 0x12
     430:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
     434:	dc 01       	movw	r26, r24
     436:	cb 01       	movw	r24, r22
     438:	bc 01       	movw	r22, r24
     43a:	cd 01       	movw	r24, r26
     43c:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     440:	dc 01       	movw	r26, r24
     442:	cb 01       	movw	r24, r22
     444:	98 8f       	std	Y+24, r25	; 0x18
     446:	8f 8b       	std	Y+23, r24	; 0x17
     448:	0f c0       	rjmp	.+30     	; 0x468 <lcd_command_write+0x1c8>
     44a:	80 e9       	ldi	r24, 0x90	; 144
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	9a 8f       	std	Y+26, r25	; 0x1a
     450:	89 8f       	std	Y+25, r24	; 0x19
     452:	89 8d       	ldd	r24, Y+25	; 0x19
     454:	9a 8d       	ldd	r25, Y+26	; 0x1a
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <lcd_command_write+0x1b6>
     45a:	9a 8f       	std	Y+26, r25	; 0x1a
     45c:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     45e:	8f 89       	ldd	r24, Y+23	; 0x17
     460:	98 8d       	ldd	r25, Y+24	; 0x18
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	98 8f       	std	Y+24, r25	; 0x18
     466:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     468:	8f 89       	ldd	r24, Y+23	; 0x17
     46a:	98 8d       	ldd	r25, Y+24	; 0x18
     46c:	00 97       	sbiw	r24, 0x00	; 0
     46e:	69 f7       	brne	.-38     	; 0x44a <lcd_command_write+0x1aa>
     470:	14 c0       	rjmp	.+40     	; 0x49a <lcd_command_write+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     472:	6b 89       	ldd	r22, Y+19	; 0x13
     474:	7c 89       	ldd	r23, Y+20	; 0x14
     476:	8d 89       	ldd	r24, Y+21	; 0x15
     478:	9e 89       	ldd	r25, Y+22	; 0x16
     47a:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     47e:	dc 01       	movw	r26, r24
     480:	cb 01       	movw	r24, r22
     482:	98 8f       	std	Y+24, r25	; 0x18
     484:	8f 8b       	std	Y+23, r24	; 0x17
     486:	8f 89       	ldd	r24, Y+23	; 0x17
     488:	98 8d       	ldd	r25, Y+24	; 0x18
     48a:	9c 8f       	std	Y+28, r25	; 0x1c
     48c:	8b 8f       	std	Y+27, r24	; 0x1b
     48e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     490:	9c 8d       	ldd	r25, Y+28	; 0x1c
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <lcd_command_write+0x1f2>
     496:	9c 8f       	std	Y+28, r25	; 0x1c
     498:	8b 8f       	std	Y+27, r24	; 0x1b
	_delay_ms(1);
}
     49a:	6d 96       	adiw	r28, 0x1d	; 29
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <lcd_init>:

void lcd_init() {
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	lcd_command_write(0x38);
     4b4:	88 e3       	ldi	r24, 0x38	; 56
     4b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	lcd_command_write(0x01);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	lcd_command_write(0x06);
     4c0:	86 e0       	ldi	r24, 0x06	; 6
     4c2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	lcd_command_write(0x0e);
     4c6:	8e e0       	ldi	r24, 0x0E	; 14
     4c8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	
}
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <lcd_string_write>:

void lcd_string_write(char *string) {
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <lcd_string_write+0x6>
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	9a 83       	std	Y+2, r25	; 0x02
     4de:	89 83       	std	Y+1, r24	; 0x01
	while (*string)
     4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <lcd_string_write+0x26>
	lcd_data_write(*string++);
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	9c 01       	movw	r18, r24
     4e8:	2f 5f       	subi	r18, 0xFF	; 255
     4ea:	3f 4f       	sbci	r19, 0xFF	; 255
     4ec:	3a 83       	std	Y+2, r19	; 0x02
     4ee:	29 83       	std	Y+1, r18	; 0x01
     4f0:	fc 01       	movw	r30, r24
     4f2:	80 81       	ld	r24, Z
     4f4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_data_write>
	lcd_command_write(0x0e);
	
}

void lcd_string_write(char *string) {
	while (*string)
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	fc 01       	movw	r30, r24
     4fe:	80 81       	ld	r24, Z
     500:	88 23       	and	r24, r24
     502:	79 f7       	brne	.-34     	; 0x4e2 <lcd_string_write+0x10>
	lcd_data_write(*string++);
}
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <lcd_number_write>:

void lcd_number_write(int number,unsigned char radix) {
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	00 d0       	rcall	.+0      	; 0x514 <lcd_number_write+0x6>
     514:	00 d0       	rcall	.+0      	; 0x516 <lcd_number_write+0x8>
     516:	1f 92       	push	r1
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	8b 83       	std	Y+3, r24	; 0x03
     520:	6d 83       	std	Y+5, r22	; 0x05
	char *number_string="00000";
     522:	88 e6       	ldi	r24, 0x68	; 104
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	89 83       	std	Y+1, r24	; 0x01
	itoa(number,number_string,radix);
     52a:	8d 81       	ldd	r24, Y+5	; 0x05
     52c:	48 2f       	mov	r20, r24
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	29 81       	ldd	r18, Y+1	; 0x01
     532:	3a 81       	ldd	r19, Y+2	; 0x02
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	b9 01       	movw	r22, r18
     53a:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <itoa>
	while (*number_string)
     53e:	0b c0       	rjmp	.+22     	; 0x556 <lcd_number_write+0x48>
	lcd_data_write(*number_string++);
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	9c 01       	movw	r18, r24
     546:	2f 5f       	subi	r18, 0xFF	; 255
     548:	3f 4f       	sbci	r19, 0xFF	; 255
     54a:	3a 83       	std	Y+2, r19	; 0x02
     54c:	29 83       	std	Y+1, r18	; 0x01
     54e:	fc 01       	movw	r30, r24
     550:	80 81       	ld	r24, Z
     552:	0e 94 49 00 	call	0x92	; 0x92 <lcd_data_write>
}

void lcd_number_write(int number,unsigned char radix) {
	char *number_string="00000";
	itoa(number,number_string,radix);
	while (*number_string)
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	fc 01       	movw	r30, r24
     55c:	80 81       	ld	r24, Z
     55e:	88 23       	and	r24, r24
     560:	79 f7       	brne	.-34     	; 0x540 <lcd_number_write+0x32>
	lcd_data_write(*number_string++);
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <lcd_cursor>:

void lcd_cursor (char row, char column) {
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <lcd_cursor+0x6>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	89 83       	std	Y+1, r24	; 0x01
     57e:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	82 30       	cpi	r24, 0x02	; 2
     588:	91 05       	cpc	r25, r1
     58a:	99 f0       	breq	.+38     	; 0x5b2 <lcd_cursor+0x40>
     58c:	83 30       	cpi	r24, 0x03	; 3
     58e:	91 05       	cpc	r25, r1
     590:	24 f4       	brge	.+8      	; 0x59a <lcd_cursor+0x28>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	91 05       	cpc	r25, r1
     596:	41 f0       	breq	.+16     	; 0x5a8 <lcd_cursor+0x36>
		case 1: lcd_command_write (0x80 + column - 1); break;
		case 2: lcd_command_write (0xc0 + column - 1); break;
		case 3: lcd_command_write (0x94 + column - 1); break;
		case 4: lcd_command_write (0xd4 + column - 1); break;
		default: break;
     598:	1b c0       	rjmp	.+54     	; 0x5d0 <lcd_cursor+0x5e>
	while (*number_string)
	lcd_data_write(*number_string++);
}

void lcd_cursor (char row, char column) {
	switch (row) {
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	91 05       	cpc	r25, r1
     59e:	71 f0       	breq	.+28     	; 0x5bc <lcd_cursor+0x4a>
     5a0:	84 30       	cpi	r24, 0x04	; 4
     5a2:	91 05       	cpc	r25, r1
     5a4:	81 f0       	breq	.+32     	; 0x5c6 <lcd_cursor+0x54>
		case 1: lcd_command_write (0x80 + column - 1); break;
		case 2: lcd_command_write (0xc0 + column - 1); break;
		case 3: lcd_command_write (0x94 + column - 1); break;
		case 4: lcd_command_write (0xd4 + column - 1); break;
		default: break;
     5a6:	14 c0       	rjmp	.+40     	; 0x5d0 <lcd_cursor+0x5e>
	lcd_data_write(*number_string++);
}

void lcd_cursor (char row, char column) {
	switch (row) {
		case 1: lcd_command_write (0x80 + column - 1); break;
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	81 58       	subi	r24, 0x81	; 129
     5ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
     5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <lcd_cursor+0x5e>
		case 2: lcd_command_write (0xc0 + column - 1); break;
     5b2:	8a 81       	ldd	r24, Y+2	; 0x02
     5b4:	81 54       	subi	r24, 0x41	; 65
     5b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
     5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <lcd_cursor+0x5e>
		case 3: lcd_command_write (0x94 + column - 1); break;
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	8d 56       	subi	r24, 0x6D	; 109
     5c0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <lcd_cursor+0x5e>
		case 4: lcd_command_write (0xd4 + column - 1); break;
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	8d 52       	subi	r24, 0x2D	; 45
     5ca:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
     5ce:	00 00       	nop
		default: break;
	}
}
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <twi_init>:


/*Function definations*/

void twi_init()
{
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
TWSR=0x00;
     5e2:	81 e2       	ldi	r24, 0x21	; 33
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	fc 01       	movw	r30, r24
     5e8:	10 82       	st	Z, r1
TWBR=0x02;
     5ea:	80 e2       	ldi	r24, 0x20	; 32
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	22 e0       	ldi	r18, 0x02	; 2
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18
}
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <twi_send_start>:

unsigned char twi_send_start()
{
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	
     602:	86 e5       	ldi	r24, 0x56	; 86
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	24 ea       	ldi	r18, 0xA4	; 164
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT)))
     60c:	00 00       	nop
     60e:	86 e5       	ldi	r24, 0x56	; 86
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	fc 01       	movw	r30, r24
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	d4 f7       	brge	.-12     	; 0x60e <twi_send_start+0x14>
	;
return (TWSR & 0xf8);
     61a:	81 e2       	ldi	r24, 0x21	; 33
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	fc 01       	movw	r30, r24
     620:	80 81       	ld	r24, Z
     622:	88 7f       	andi	r24, 0xF8	; 248
while((TWSR & 0xf8) != 0x08)
	;
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <twi_send_repeated_start>:

unsigned char twi_send_repeated_start(void)
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		
     632:	86 e5       	ldi	r24, 0x56	; 86
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	24 ea       	ldi	r18, 0xA4	; 164
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT)))
     63c:	00 00       	nop
     63e:	86 e5       	ldi	r24, 0x56	; 86
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	fc 01       	movw	r30, r24
     644:	80 81       	ld	r24, Z
     646:	88 23       	and	r24, r24
     648:	d4 f7       	brge	.-12     	; 0x63e <twi_send_repeated_start+0x14>
	;   		
return (TWSR & 0xf8);
     64a:	81 e2       	ldi	r24, 0x21	; 33
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	fc 01       	movw	r30, r24
     650:	80 81       	ld	r24, Z
     652:	88 7f       	andi	r24, 0xF8	; 248
while((TWSR & 0xf8) != 0x10)
	;   		  								
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <twi_send_address_rw>:

unsigned char twi_send_address_rw(unsigned char address_rw)
{
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	89 83       	std	Y+1, r24	; 0x01
TWDR = address_rw; 
     666:	83 e2       	ldi	r24, 0x23	; 35
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	29 81       	ldd	r18, Y+1	; 0x01
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
TWCR = (1<<TWINT)|(1<<TWEN);	   
     670:	86 e5       	ldi	r24, 0x56	; 86
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	24 e8       	ldi	r18, 0x84	; 132
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT)))
     67a:	00 00       	nop
     67c:	86 e5       	ldi	r24, 0x56	; 86
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	88 23       	and	r24, r24
     686:	d4 f7       	brge	.-12     	; 0x67c <twi_send_address_rw+0x22>
	;
return (TWSR & 0xf8);
     688:	81 e2       	ldi	r24, 0x21	; 33
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	88 7f       	andi	r24, 0xF8	; 248
while(((TWSR & 0xf8) != 0x18) || ((TWSR & 0xf8) != 0x40))
	;		   
}
     692:	0f 90       	pop	r0
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <twi_master_send_data>:

unsigned char twi_master_send_data(unsigned char data)
{
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	1f 92       	push	r1
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	89 83       	std	Y+1, r24	; 0x01
TWDR = data; 
     6a6:	83 e2       	ldi	r24, 0x23	; 35
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	29 81       	ldd	r18, Y+1	; 0x01
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
TWCR = (1<<TWINT) |(1<<TWEN);	   
     6b0:	86 e5       	ldi	r24, 0x56	; 86
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	24 e8       	ldi	r18, 0x84	; 132
     6b6:	fc 01       	movw	r30, r24
     6b8:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT)))
     6ba:	00 00       	nop
     6bc:	86 e5       	ldi	r24, 0x56	; 86
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	fc 01       	movw	r30, r24
     6c2:	80 81       	ld	r24, Z
     6c4:	88 23       	and	r24, r24
     6c6:	d4 f7       	brge	.-12     	; 0x6bc <twi_master_send_data+0x22>
;	   
return (TWSR & 0xf8);
     6c8:	81 e2       	ldi	r24, 0x21	; 33
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	88 7f       	andi	r24, 0xF8	; 248
while((TWSR & 0xf8) != 0x28)
	;   		 		   					   
}
     6d2:	0f 90       	pop	r0
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <twi_master_send_string>:

unsigned char twi_master_send_string(unsigned char *string)
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <twi_master_send_string+0x6>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	9a 83       	std	Y+2, r25	; 0x02
     6e6:	89 83       	std	Y+1, r24	; 0x01
while (*string)
     6e8:	25 c0       	rjmp	.+74     	; 0x734 <twi_master_send_string+0x5a>
{
	TWDR = *string++; 
     6ea:	23 e2       	ldi	r18, 0x23	; 35
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	9a 81       	ldd	r25, Y+2	; 0x02
     6f2:	ac 01       	movw	r20, r24
     6f4:	4f 5f       	subi	r20, 0xFF	; 255
     6f6:	5f 4f       	sbci	r21, 0xFF	; 255
     6f8:	5a 83       	std	Y+2, r21	; 0x02
     6fa:	49 83       	std	Y+1, r20	; 0x01
     6fc:	fc 01       	movw	r30, r24
     6fe:	80 81       	ld	r24, Z
     700:	f9 01       	movw	r30, r18
     702:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) |(1<<TWEN);	   
     704:	86 e5       	ldi	r24, 0x56	; 86
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	24 e8       	ldi	r18, 0x84	; 132
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)))
     70e:	00 00       	nop
     710:	86 e5       	ldi	r24, 0x56	; 86
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	fc 01       	movw	r30, r24
     716:	80 81       	ld	r24, Z
     718:	88 23       	and	r24, r24
     71a:	d4 f7       	brge	.-12     	; 0x710 <twi_master_send_string+0x36>
	;	   
	while((TWSR & 0xf8) != 0x28)
     71c:	00 00       	nop
     71e:	81 e2       	ldi	r24, 0x21	; 33
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	88 7f       	andi	r24, 0xF8	; 248
     72c:	99 27       	eor	r25, r25
     72e:	88 32       	cpi	r24, 0x28	; 40
     730:	91 05       	cpc	r25, r1
     732:	a9 f7       	brne	.-22     	; 0x71e <twi_master_send_string+0x44>
	;   		 		   					   
}

unsigned char twi_master_send_string(unsigned char *string)
{
while (*string)
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	9a 81       	ldd	r25, Y+2	; 0x02
     738:	fc 01       	movw	r30, r24
     73a:	80 81       	ld	r24, Z
     73c:	88 23       	and	r24, r24
     73e:	a9 f6       	brne	.-86     	; 0x6ea <twi_master_send_string+0x10>
	while (!(TWCR & (1<<TWINT)))
	;	   
	while((TWSR & 0xf8) != 0x28)
		;   		 		   					   
}
return (TWSR & 0xf8);
     740:	81 e2       	ldi	r24, 0x21	; 33
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	fc 01       	movw	r30, r24
     746:	80 81       	ld	r24, Z
     748:	88 7f       	andi	r24, 0xF8	; 248
}
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <twi_master_receive_data>:

unsigned char twi_master_receive_data()
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
TWCR =(1<<TWEA)|(1<<TWINT)|(1<<TWEN);
     75c:	86 e5       	ldi	r24, 0x56	; 86
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	24 ec       	ldi	r18, 0xC4	; 196
     762:	fc 01       	movw	r30, r24
     764:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT)))
     766:	00 00       	nop
     768:	86 e5       	ldi	r24, 0x56	; 86
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fc 01       	movw	r30, r24
     76e:	80 81       	ld	r24, Z
     770:	88 23       	and	r24, r24
     772:	d4 f7       	brge	.-12     	; 0x768 <twi_master_receive_data+0x14>
	;	   	   
return(TWDR);
     774:	83 e2       	ldi	r24, 0x23	; 35
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	fc 01       	movw	r30, r24
     77a:	80 81       	ld	r24, Z
while((TWSR & 0xf8) != 0x50)
	; 
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <twi_master_receive_string>:

unsigned char *twi_master_receive_string(unsigned char number_of_bytes,unsigned char *string)
{
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	00 d0       	rcall	.+0      	; 0x78c <twi_master_receive_string+0xa>
     78c:	00 d0       	rcall	.+0      	; 0x78e <twi_master_receive_string+0xc>
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	8a 83       	std	Y+2, r24	; 0x02
     794:	7c 83       	std	Y+4, r23	; 0x04
     796:	6b 83       	std	Y+3, r22	; 0x03
for(unsigned char i=0;i<number_of_bytes;i++)
     798:	19 82       	std	Y+1, r1	; 0x01
     79a:	28 c0       	rjmp	.+80     	; 0x7ec <twi_master_receive_string+0x6a>
{
	TWCR =(1<<TWEA)|(1<<TWINT)|(1<<TWEN);
     79c:	86 e5       	ldi	r24, 0x56	; 86
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	24 ec       	ldi	r18, 0xC4	; 196
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT)))
     7a6:	00 00       	nop
     7a8:	86 e5       	ldi	r24, 0x56	; 86
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	fc 01       	movw	r30, r24
     7ae:	80 81       	ld	r24, Z
     7b0:	88 23       	and	r24, r24
     7b2:	d4 f7       	brge	.-12     	; 0x7a8 <twi_master_receive_string+0x26>
		;	   	   
	*(string+i)=TWDR;
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	88 2f       	mov	r24, r24
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b 81       	ldd	r18, Y+3	; 0x03
     7bc:	3c 81       	ldd	r19, Y+4	; 0x04
     7be:	82 0f       	add	r24, r18
     7c0:	93 1f       	adc	r25, r19
     7c2:	23 e2       	ldi	r18, 0x23	; 35
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
	while((TWSR & 0xf8) != 0x50)
     7ce:	00 00       	nop
     7d0:	81 e2       	ldi	r24, 0x21	; 33
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	88 2f       	mov	r24, r24
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	88 7f       	andi	r24, 0xF8	; 248
     7de:	99 27       	eor	r25, r25
     7e0:	80 35       	cpi	r24, 0x50	; 80
     7e2:	91 05       	cpc	r25, r1
     7e4:	a9 f7       	brne	.-22     	; 0x7d0 <twi_master_receive_string+0x4e>
	; 
}

unsigned char *twi_master_receive_string(unsigned char number_of_bytes,unsigned char *string)
{
for(unsigned char i=0;i<number_of_bytes;i++)
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	99 81       	ldd	r25, Y+1	; 0x01
     7ee:	8a 81       	ldd	r24, Y+2	; 0x02
     7f0:	98 17       	cp	r25, r24
     7f2:	a0 f2       	brcs	.-88     	; 0x79c <twi_master_receive_string+0x1a>
		;	   	   
	*(string+i)=TWDR;
	while((TWSR & 0xf8) != 0x50)
		; 
}
*(string+number_of_bytes)=twi_master_receive_last_data();
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	88 2f       	mov	r24, r24
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	2b 81       	ldd	r18, Y+3	; 0x03
     7fc:	3c 81       	ldd	r19, Y+4	; 0x04
     7fe:	89 01       	movw	r16, r18
     800:	08 0f       	add	r16, r24
     802:	19 1f       	adc	r17, r25
     804:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     808:	f8 01       	movw	r30, r16
     80a:	80 83       	st	Z, r24
*(string+number_of_bytes)=0;
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	88 2f       	mov	r24, r24
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	2b 81       	ldd	r18, Y+3	; 0x03
     814:	3c 81       	ldd	r19, Y+4	; 0x04
     816:	82 0f       	add	r24, r18
     818:	93 1f       	adc	r25, r19
     81a:	fc 01       	movw	r30, r24
     81c:	10 82       	st	Z, r1
}
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <twi_master_receive_last_data>:

unsigned char twi_master_receive_last_data()
{
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
TWCR =(1<<TWINT)|(1<<TWEN);
     838:	86 e5       	ldi	r24, 0x56	; 86
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	24 e8       	ldi	r18, 0x84	; 132
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
while (!(TWCR & (1<<TWINT)))
     842:	00 00       	nop
     844:	86 e5       	ldi	r24, 0x56	; 86
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	88 23       	and	r24, r24
     84e:	d4 f7       	brge	.-12     	; 0x844 <twi_master_receive_last_data+0x14>
	;	   	   
return(TWDR);
     850:	83 e2       	ldi	r24, 0x23	; 35
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
while((TWSR & 0xf8) != 0x58)
	; 
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <twi_send_stop>:

void twi_send_stop()
{
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     866:	86 e5       	ldi	r24, 0x56	; 86
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	24 e9       	ldi	r18, 0x94	; 148
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
while ((TWCR & (1<<TWSTO)))
     870:	00 00       	nop
     872:	86 e5       	ldi	r24, 0x56	; 86
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	fc 01       	movw	r30, r24
     878:	80 81       	ld	r24, Z
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	80 71       	andi	r24, 0x10	; 16
     880:	99 27       	eor	r25, r25
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	b1 f7       	brne	.-20     	; 0x872 <__stack+0x13>
	;  	 
} 					                        
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	08 95       	ret

0000088c <ds1307_second_write>:



/*Function definations*/
void ds1307_second_write(unsigned char second)
{
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	00 d0       	rcall	.+0      	; 0x892 <ds1307_second_write+0x6>
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	8a 83       	std	Y+2, r24	; 0x02
unsigned char twi_status;
twi_send_start();
     898:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     89c:	80 ed       	ldi	r24, 0xD0	; 208
     89e:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     8a2:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x00);
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     8aa:	89 83       	std	Y+1, r24	; 0x01
second=convert_decimal_to_bcd(second);
     8ac:	8a 81       	ldd	r24, Y+2	; 0x02
     8ae:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     8b2:	8a 83       	std	Y+2, r24	; 0x02
twi_status=twi_master_send_data(second);
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     8ba:	89 83       	std	Y+1, r24	; 0x01
twi_send_stop();
     8bc:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_send_stop>
}
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <ds1307_minute_write>:

void ds1307_minute_write(unsigned char minute)
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <ds1307_minute_write+0x6>
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	8a 83       	std	Y+2, r24	; 0x02
unsigned char twi_status;
twi_send_start();
     8d6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     8da:	80 ed       	ldi	r24, 0xD0	; 208
     8dc:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     8e0:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x01);
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     8e8:	89 83       	std	Y+1, r24	; 0x01
minute=convert_decimal_to_bcd(minute);
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     8f0:	8a 83       	std	Y+2, r24	; 0x02
twi_status=twi_master_send_data(minute);
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     8f8:	89 83       	std	Y+1, r24	; 0x01
twi_send_stop();
     8fa:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_send_stop>
}
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <ds1307_hour_write>:

void ds1307_hour_write(unsigned char hour,unsigned char hour_format, unsigned char am_pm)
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	00 d0       	rcall	.+0      	; 0x90e <ds1307_hour_write+0x6>
     90e:	00 d0       	rcall	.+0      	; 0x910 <ds1307_hour_write+0x8>
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
     914:	8a 83       	std	Y+2, r24	; 0x02
     916:	6b 83       	std	Y+3, r22	; 0x03
     918:	4c 83       	std	Y+4, r20	; 0x04
unsigned char twi_status;
twi_send_start();
     91a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     91e:	80 ed       	ldi	r24, 0xD0	; 208
     920:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     924:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x02);
     926:	82 e0       	ldi	r24, 0x02	; 2
     928:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     92c:	89 83       	std	Y+1, r24	; 0x01
if(hour_format==1)
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	81 30       	cpi	r24, 0x01	; 1
     932:	c9 f4       	brne	.+50     	; 0x966 <ds1307_hour_write+0x5e>
{
	hour=convert_decimal_to_bcd(hour);
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     93a:	8a 83       	std	Y+2, r24	; 0x02
	hour=hour | (1<<6) | (am_pm<<5);
     93c:	8c 81       	ldd	r24, Y+4	; 0x04
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	82 95       	swap	r24
     948:	92 95       	swap	r25
     94a:	90 7f       	andi	r25, 0xF0	; 240
     94c:	98 27       	eor	r25, r24
     94e:	80 7f       	andi	r24, 0xF0	; 240
     950:	98 27       	eor	r25, r24
     952:	98 2f       	mov	r25, r24
     954:	8a 81       	ldd	r24, Y+2	; 0x02
     956:	89 2b       	or	r24, r25
     958:	80 64       	ori	r24, 0x40	; 64
     95a:	8a 83       	std	Y+2, r24	; 0x02
	twi_status=twi_master_send_data(hour);
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     962:	89 83       	std	Y+1, r24	; 0x01
     964:	08 c0       	rjmp	.+16     	; 0x976 <ds1307_hour_write+0x6e>
}
else
{
	hour=convert_decimal_to_bcd(hour);
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     96c:	8a 83       	std	Y+2, r24	; 0x02
	twi_status=twi_master_send_data(hour);
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     974:	89 83       	std	Y+1, r24	; 0x01
}
twi_send_stop();
     976:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_send_stop>
}
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <ds1307_day_write>:

void ds1307_day_write(unsigned char day)
{
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	00 d0       	rcall	.+0      	; 0x98e <ds1307_day_write+0x6>
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	8a 83       	std	Y+2, r24	; 0x02
unsigned char twi_status;
twi_send_start();
     994:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     998:	80 ed       	ldi	r24, 0xD0	; 208
     99a:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     99e:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x03);
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     9a6:	89 83       	std	Y+1, r24	; 0x01
day=convert_decimal_to_bcd(day);
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     9ae:	8a 83       	std	Y+2, r24	; 0x02
twi_status=twi_master_send_data(day);
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     9b6:	89 83       	std	Y+1, r24	; 0x01
twi_send_stop();
     9b8:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_send_stop>
}
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <ds1307_date_write>:

void ds1307_date_write(unsigned char date)
{
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <ds1307_date_write+0x6>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	8a 83       	std	Y+2, r24	; 0x02
unsigned char twi_status;
twi_send_start();
     9d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     9d6:	80 ed       	ldi	r24, 0xD0	; 208
     9d8:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     9dc:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x04);
     9de:	84 e0       	ldi	r24, 0x04	; 4
     9e0:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     9e4:	89 83       	std	Y+1, r24	; 0x01
date=convert_decimal_to_bcd(date);
     9e6:	8a 81       	ldd	r24, Y+2	; 0x02
     9e8:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     9ec:	8a 83       	std	Y+2, r24	; 0x02
twi_status=twi_master_send_data(date);
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     9f4:	89 83       	std	Y+1, r24	; 0x01
twi_send_stop();
     9f6:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_send_stop>
}
     9fa:	0f 90       	pop	r0
     9fc:	0f 90       	pop	r0
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <ds1307_month_write>:

void ds1307_month_write(unsigned char month)
{
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	00 d0       	rcall	.+0      	; 0xa0a <ds1307_month_write+0x6>
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
     a0e:	8a 83       	std	Y+2, r24	; 0x02
unsigned char twi_status;
twi_send_start();
     a10:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     a14:	80 ed       	ldi	r24, 0xD0	; 208
     a16:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     a1a:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x05);
     a1c:	85 e0       	ldi	r24, 0x05	; 5
     a1e:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     a22:	89 83       	std	Y+1, r24	; 0x01
month=convert_decimal_to_bcd(month);
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     a2a:	8a 83       	std	Y+2, r24	; 0x02
twi_status=twi_master_send_data(month);
     a2c:	8a 81       	ldd	r24, Y+2	; 0x02
     a2e:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     a32:	89 83       	std	Y+1, r24	; 0x01
twi_send_stop();
     a34:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_send_stop>
}
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <ds1307_year_write>:

void ds1307_year_write(unsigned char year)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	00 d0       	rcall	.+0      	; 0xa48 <ds1307_year_write+0x6>
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	8a 83       	std	Y+2, r24	; 0x02
unsigned char twi_status;
twi_send_start();
     a4e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     a52:	80 ed       	ldi	r24, 0xD0	; 208
     a54:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     a58:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x06);
     a5a:	86 e0       	ldi	r24, 0x06	; 6
     a5c:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     a60:	89 83       	std	Y+1, r24	; 0x01
year=convert_decimal_to_bcd(year);
     a62:	8a 81       	ldd	r24, Y+2	; 0x02
     a64:	0e 94 0b 06 	call	0xc16	; 0xc16 <convert_decimal_to_bcd>
     a68:	8a 83       	std	Y+2, r24	; 0x02
twi_status=twi_master_send_data(year);
     a6a:	8a 81       	ldd	r24, Y+2	; 0x02
     a6c:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     a70:	89 83       	std	Y+1, r24	; 0x01
twi_send_stop();
     a72:	0e 94 2f 04 	call	0x85e	; 0x85e <twi_send_stop>
}
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <ds1307_read_second>:

unsigned char ds1307_read_second()
{
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	1f 92       	push	r1
     a86:	cd b7       	in	r28, 0x3d	; 61
     a88:	de b7       	in	r29, 0x3e	; 62
unsigned char twi_status;
twi_send_start();
     a8a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     a8e:	80 ed       	ldi	r24, 0xD0	; 208
     a90:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     a94:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x00);
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     a9c:	89 83       	std	Y+1, r24	; 0x01
twi_send_repeated_start();
     a9e:	0e 94 15 03 	call	0x62a	; 0x62a <twi_send_repeated_start>
twi_status=twi_send_address_rw(0xd1);
     aa2:	81 ed       	ldi	r24, 0xD1	; 209
     aa4:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     aa8:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_receive_last_data();
     aaa:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     aae:	89 83       	std	Y+1, r24	; 0x01
return twi_status;
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
twi_send_stop();
}
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <ds1307_read_minute>:

unsigned char ds1307_read_minute()
{
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	1f 92       	push	r1
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
unsigned char twi_status;
twi_send_start();
     ac4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     ac8:	80 ed       	ldi	r24, 0xD0	; 208
     aca:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     ace:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x01);
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     ad6:	89 83       	std	Y+1, r24	; 0x01
twi_send_repeated_start();
     ad8:	0e 94 15 03 	call	0x62a	; 0x62a <twi_send_repeated_start>
twi_status=twi_send_address_rw(0xd1);
     adc:	81 ed       	ldi	r24, 0xD1	; 209
     ade:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     ae2:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_receive_last_data();
     ae4:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     ae8:	89 83       	std	Y+1, r24	; 0x01
return twi_status;
     aea:	89 81       	ldd	r24, Y+1	; 0x01
twi_send_stop();
}
     aec:	0f 90       	pop	r0
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <ds1307_read_hour>:

unsigned char ds1307_read_hour()
{
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	1f 92       	push	r1
     afa:	cd b7       	in	r28, 0x3d	; 61
     afc:	de b7       	in	r29, 0x3e	; 62
unsigned char twi_status;
twi_send_start();
     afe:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     b02:	80 ed       	ldi	r24, 0xD0	; 208
     b04:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     b08:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x02);
     b0a:	82 e0       	ldi	r24, 0x02	; 2
     b0c:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     b10:	89 83       	std	Y+1, r24	; 0x01
twi_send_repeated_start();
     b12:	0e 94 15 03 	call	0x62a	; 0x62a <twi_send_repeated_start>
twi_status=twi_send_address_rw(0xd1);
     b16:	81 ed       	ldi	r24, 0xD1	; 209
     b18:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     b1c:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_receive_last_data();
     b1e:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     b22:	89 83       	std	Y+1, r24	; 0x01
return twi_status;
     b24:	89 81       	ldd	r24, Y+1	; 0x01
twi_send_stop();
}
     b26:	0f 90       	pop	r0
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	08 95       	ret

00000b2e <ds1307_read_day>:

unsigned char ds1307_read_day()
{
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	1f 92       	push	r1
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
unsigned char twi_status;
twi_send_start();
     b38:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     b3c:	80 ed       	ldi	r24, 0xD0	; 208
     b3e:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     b42:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x03);
     b44:	83 e0       	ldi	r24, 0x03	; 3
     b46:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     b4a:	89 83       	std	Y+1, r24	; 0x01
twi_send_repeated_start();
     b4c:	0e 94 15 03 	call	0x62a	; 0x62a <twi_send_repeated_start>
twi_status=twi_send_address_rw(0xd1);
     b50:	81 ed       	ldi	r24, 0xD1	; 209
     b52:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     b56:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_receive_last_data();
     b58:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     b5c:	89 83       	std	Y+1, r24	; 0x01
return twi_status;
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
twi_send_stop();
}
     b60:	0f 90       	pop	r0
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <ds1307_read_date>:

unsigned char ds1307_read_date()
{
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	1f 92       	push	r1
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
unsigned char twi_status;
twi_send_start();
     b72:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     b76:	80 ed       	ldi	r24, 0xD0	; 208
     b78:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     b7c:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x04);
     b7e:	84 e0       	ldi	r24, 0x04	; 4
     b80:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     b84:	89 83       	std	Y+1, r24	; 0x01
twi_send_repeated_start();
     b86:	0e 94 15 03 	call	0x62a	; 0x62a <twi_send_repeated_start>
twi_status=twi_send_address_rw(0xd1);
     b8a:	81 ed       	ldi	r24, 0xD1	; 209
     b8c:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     b90:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_receive_last_data();
     b92:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     b96:	89 83       	std	Y+1, r24	; 0x01
return twi_status;
     b98:	89 81       	ldd	r24, Y+1	; 0x01
twi_send_stop();
}
     b9a:	0f 90       	pop	r0
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	08 95       	ret

00000ba2 <ds1307_read_month>:

unsigned char ds1307_read_month()
{
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
unsigned char twi_status;
twi_send_start();
     bac:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     bb0:	80 ed       	ldi	r24, 0xD0	; 208
     bb2:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     bb6:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x05);
     bb8:	85 e0       	ldi	r24, 0x05	; 5
     bba:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     bbe:	89 83       	std	Y+1, r24	; 0x01
twi_send_repeated_start();
     bc0:	0e 94 15 03 	call	0x62a	; 0x62a <twi_send_repeated_start>
twi_status=twi_send_address_rw(0xd1);
     bc4:	81 ed       	ldi	r24, 0xD1	; 209
     bc6:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     bca:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_receive_last_data();
     bcc:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     bd0:	89 83       	std	Y+1, r24	; 0x01
return twi_status;
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
twi_send_stop();
}
     bd4:	0f 90       	pop	r0
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <ds1307_read_year>:

unsigned char ds1307_read_year()
{
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	1f 92       	push	r1
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
unsigned char twi_status;
twi_send_start();
     be6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <twi_send_start>
twi_status=twi_send_address_rw(0xd0);
     bea:	80 ed       	ldi	r24, 0xD0	; 208
     bec:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     bf0:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_send_data(0x06);
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	0e 94 4d 03 	call	0x69a	; 0x69a <twi_master_send_data>
     bf8:	89 83       	std	Y+1, r24	; 0x01
twi_send_repeated_start();
     bfa:	0e 94 15 03 	call	0x62a	; 0x62a <twi_send_repeated_start>
twi_status=twi_send_address_rw(0xd1);
     bfe:	81 ed       	ldi	r24, 0xD1	; 209
     c00:	0e 94 2d 03 	call	0x65a	; 0x65a <twi_send_address_rw>
     c04:	89 83       	std	Y+1, r24	; 0x01
twi_status=twi_master_receive_last_data();
     c06:	0e 94 18 04 	call	0x830	; 0x830 <twi_master_receive_last_data>
     c0a:	89 83       	std	Y+1, r24	; 0x01
return twi_status;
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
twi_send_stop();
}
     c0e:	0f 90       	pop	r0
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <convert_decimal_to_bcd>:

unsigned char convert_decimal_to_bcd(unsigned char decimal_number)
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	1f 92       	push	r1
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	89 83       	std	Y+1, r24	; 0x01
decimal_number=((decimal_number/10)*16)+(decimal_number%10);
     c22:	99 81       	ldd	r25, Y+1	; 0x01
     c24:	8d ec       	ldi	r24, 0xCD	; 205
     c26:	98 9f       	mul	r25, r24
     c28:	81 2d       	mov	r24, r1
     c2a:	11 24       	eor	r1, r1
     c2c:	86 95       	lsr	r24
     c2e:	86 95       	lsr	r24
     c30:	86 95       	lsr	r24
     c32:	28 2f       	mov	r18, r24
     c34:	22 95       	swap	r18
     c36:	20 7f       	andi	r18, 0xF0	; 240
     c38:	99 81       	ldd	r25, Y+1	; 0x01
     c3a:	8d ec       	ldi	r24, 0xCD	; 205
     c3c:	98 9f       	mul	r25, r24
     c3e:	81 2d       	mov	r24, r1
     c40:	11 24       	eor	r1, r1
     c42:	86 95       	lsr	r24
     c44:	86 95       	lsr	r24
     c46:	86 95       	lsr	r24
     c48:	88 0f       	add	r24, r24
     c4a:	38 2f       	mov	r19, r24
     c4c:	33 0f       	add	r19, r19
     c4e:	33 0f       	add	r19, r19
     c50:	83 0f       	add	r24, r19
     c52:	39 2f       	mov	r19, r25
     c54:	38 1b       	sub	r19, r24
     c56:	83 2f       	mov	r24, r19
     c58:	82 0f       	add	r24, r18
     c5a:	89 83       	std	Y+1, r24	; 0x01
return decimal_number;
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c5e:	0f 90       	pop	r0
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <convert_bcd_to_decimal>:

unsigned char convert_bcd_to_decimal(unsigned char bcd_number)
{
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	1f 92       	push	r1
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	89 83       	std	Y+1, r24	; 0x01
bcd_number=((bcd_number>>4)*10)+(bcd_number & 0x0f);
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	82 95       	swap	r24
     c76:	8f 70       	andi	r24, 0x0F	; 15
     c78:	88 0f       	add	r24, r24
     c7a:	98 2f       	mov	r25, r24
     c7c:	99 0f       	add	r25, r25
     c7e:	99 0f       	add	r25, r25
     c80:	98 0f       	add	r25, r24
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	8f 70       	andi	r24, 0x0F	; 15
     c86:	89 0f       	add	r24, r25
     c88:	89 83       	std	Y+1, r24	; 0x01
return bcd_number;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
}  
     c8c:	0f 90       	pop	r0
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <display_time>:
}
*/

//Function to display date and time on the LCD

void display_time(void) {
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	66 97       	sbiw	r28, 0x16	; 22
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	char *weekdays[] = {
     ca8:	8e e0       	ldi	r24, 0x0E	; 14
     caa:	e8 ea       	ldi	r30, 0xA8	; 168
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	de 01       	movw	r26, r28
     cb0:	19 96       	adiw	r26, 0x09	; 9
     cb2:	01 90       	ld	r0, Z+
     cb4:	0d 92       	st	X+, r0
     cb6:	8a 95       	dec	r24
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <display_time+0x1e>
	                    "WED",
						"THU",
	                    "FRI",
	                    "SAT",
	    	       	   };
	unsigned char second_byte = 0,minute_byte = 0,hour_byte = 0;
     cba:	19 82       	std	Y+1, r1	; 0x01
     cbc:	1a 82       	std	Y+2, r1	; 0x02
     cbe:	1b 82       	std	Y+3, r1	; 0x03
	int day1;
	unsigned char day = 0;
     cc0:	1c 82       	std	Y+4, r1	; 0x04

	unsigned char prev_sec = 0,prev_hour_byte = 0;
     cc2:	1d 82       	std	Y+5, r1	; 0x05
     cc4:	1e 82       	std	Y+6, r1	; 0x06

	hour_byte = ds1307_read_hour();            // read hour regiter and store
     cc6:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <ds1307_read_hour>
     cca:	8b 83       	std	Y+3, r24	; 0x03
	//hour_byte = hour_calculation(hour_byte);// call for mode display
	hr=convert_bcd_to_decimal(hour_byte);
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	0e 94 33 06 	call	0xc66	; 0xc66 <convert_bcd_to_decimal>
     cd2:	80 93 1e 03 	sts	0x031E, r24
	minute_byte = ds1307_read_minute();       // read minute regiter and store
     cd6:	0e 94 5d 05 	call	0xaba	; 0xaba <ds1307_read_minute>
     cda:	8a 83       	std	Y+2, r24	; 0x02
	min=convert_bcd_to_decimal(minute_byte);
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	0e 94 33 06 	call	0xc66	; 0xc66 <convert_bcd_to_decimal>
     ce2:	80 93 1c 03 	sts	0x031C, r24
	second_byte = ds1307_read_second();        // read seconds regiter and store
     ce6:	0e 94 40 05 	call	0xa80	; 0xa80 <ds1307_read_second>
     cea:	89 83       	std	Y+1, r24	; 0x01
	sec = convert_bcd_to_decimal(second_byte);
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	0e 94 33 06 	call	0xc66	; 0xc66 <convert_bcd_to_decimal>
     cf2:	80 93 18 03 	sts	0x0318, r24

	day1=convert_bcd_to_decimal(ds1307_read_day());
     cf6:	0e 94 97 05 	call	0xb2e	; 0xb2e <ds1307_read_day>
     cfa:	0e 94 33 06 	call	0xc66	; 0xc66 <convert_bcd_to_decimal>
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	98 87       	std	Y+8, r25	; 0x08
     d04:	8f 83       	std	Y+7, r24	; 0x07
	date=convert_bcd_to_decimal(ds1307_read_date());
     d06:	0e 94 b4 05 	call	0xb68	; 0xb68 <ds1307_read_date>
     d0a:	0e 94 33 06 	call	0xc66	; 0xc66 <convert_bcd_to_decimal>
     d0e:	80 93 1f 03 	sts	0x031F, r24
	month=convert_bcd_to_decimal(ds1307_read_month());
     d12:	0e 94 d1 05 	call	0xba2	; 0xba2 <ds1307_read_month>
     d16:	0e 94 33 06 	call	0xc66	; 0xc66 <convert_bcd_to_decimal>
     d1a:	80 93 19 03 	sts	0x0319, r24
	year=convert_bcd_to_decimal(ds1307_read_year());
     d1e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <ds1307_read_year>
     d22:	0e 94 33 06 	call	0xc66	; 0xc66 <convert_bcd_to_decimal>
     d26:	80 93 1d 03 	sts	0x031D, r24




	//displaying style
	if(date<=9)
     d2a:	80 91 1f 03 	lds	r24, 0x031F
     d2e:	8a 30       	cpi	r24, 0x0A	; 10
     d30:	98 f4       	brcc	.+38     	; 0xd58 <display_time+0xc4>
					{
						lcd_cursor(1,3);
     d32:	63 e0       	ldi	r22, 0x03	; 3
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_string_write("0");
     d3a:	86 e8       	ldi	r24, 0x86	; 134
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						lcd_cursor(1,4);
     d42:	64 e0       	ldi	r22, 0x04	; 4
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(date,10);
     d4a:	80 91 1f 03 	lds	r24, 0x031F
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	6a e0       	ldi	r22, 0x0A	; 10
     d54:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
	if(date>9)
     d58:	80 91 1f 03 	lds	r24, 0x031F
     d5c:	8a 30       	cpi	r24, 0x0A	; 10
     d5e:	58 f0       	brcs	.+22     	; 0xd76 <display_time+0xe2>
					{
						lcd_cursor(1,3);
     d60:	63 e0       	ldi	r22, 0x03	; 3
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(date,10);
     d68:	80 91 1f 03 	lds	r24, 0x031F
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	6a e0       	ldi	r22, 0x0A	; 10
     d72:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
	if(month<=9)
     d76:	80 91 19 03 	lds	r24, 0x0319
     d7a:	8a 30       	cpi	r24, 0x0A	; 10
     d7c:	98 f4       	brcc	.+38     	; 0xda4 <display_time+0x110>
				{
					lcd_cursor(1,6);
     d7e:	66 e0       	ldi	r22, 0x06	; 6
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
					lcd_string_write("0");
     d86:	86 e8       	ldi	r24, 0x86	; 134
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
					lcd_cursor(1,7);
     d8e:	67 e0       	ldi	r22, 0x07	; 7
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
					lcd_number_write(month,10);
     d96:	80 91 19 03 	lds	r24, 0x0319
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	6a e0       	ldi	r22, 0x0A	; 10
     da0:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
				}
	if(month>9)
     da4:	80 91 19 03 	lds	r24, 0x0319
     da8:	8a 30       	cpi	r24, 0x0A	; 10
     daa:	58 f0       	brcs	.+22     	; 0xdc2 <display_time+0x12e>
					{
						lcd_cursor(1,6);
     dac:	66 e0       	ldi	r22, 0x06	; 6
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(month,10);
     db4:	80 91 19 03 	lds	r24, 0x0319
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	6a e0       	ldi	r22, 0x0A	; 10
     dbe:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
	if(year<=9)
     dc2:	80 91 1d 03 	lds	r24, 0x031D
     dc6:	8a 30       	cpi	r24, 0x0A	; 10
     dc8:	98 f4       	brcc	.+38     	; 0xdf0 <display_time+0x15c>
					{
						lcd_cursor(1,9);
     dca:	69 e0       	ldi	r22, 0x09	; 9
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_string_write("0");
     dd2:	86 e8       	ldi	r24, 0x86	; 134
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						lcd_cursor(1,10);
     dda:	6a e0       	ldi	r22, 0x0A	; 10
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(year,10);
     de2:	80 91 1d 03 	lds	r24, 0x031D
     de6:	88 2f       	mov	r24, r24
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	6a e0       	ldi	r22, 0x0A	; 10
     dec:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
	if(year>9)
     df0:	80 91 1d 03 	lds	r24, 0x031D
     df4:	8a 30       	cpi	r24, 0x0A	; 10
     df6:	58 f0       	brcs	.+22     	; 0xe0e <display_time+0x17a>
					{
						lcd_cursor(1,9);
     df8:	69 e0       	ldi	r22, 0x09	; 9
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(year,10);
     e00:	80 91 1d 03 	lds	r24, 0x031D
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	6a e0       	ldi	r22, 0x0A	; 10
     e0a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}


	lcd_cursor(1,13);
     e0e:	6d e0       	ldi	r22, 0x0D	; 13
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	day=weekdays[day1-1];
     e16:	8f 81       	ldd	r24, Y+7	; 0x07
     e18:	98 85       	ldd	r25, Y+8	; 0x08
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	9e 01       	movw	r18, r28
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	08 96       	adiw	r24, 0x08	; 8
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	91 81       	ldd	r25, Z+1	; 0x01
     e32:	8c 83       	std	Y+4, r24	; 0x04
	//lcd_number_write(day1,10);
	lcd_string_write(day);
     e34:	8c 81       	ldd	r24, Y+4	; 0x04
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	//lcd_data_write(day);

    // displaying style
	if(hr<=9)
     e3e:	80 91 1e 03 	lds	r24, 0x031E
     e42:	8a 30       	cpi	r24, 0x0A	; 10
     e44:	98 f4       	brcc	.+38     	; 0xe6c <display_time+0x1d8>
					{
						lcd_cursor(2,3);
     e46:	63 e0       	ldi	r22, 0x03	; 3
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_string_write("0");
     e4e:	86 e8       	ldi	r24, 0x86	; 134
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						lcd_cursor(2,4);
     e56:	64 e0       	ldi	r22, 0x04	; 4
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(hr,10);
     e5e:	80 91 1e 03 	lds	r24, 0x031E
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	6a e0       	ldi	r22, 0x0A	; 10
     e68:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
	if(hr>9)
     e6c:	80 91 1e 03 	lds	r24, 0x031E
     e70:	8a 30       	cpi	r24, 0x0A	; 10
     e72:	58 f0       	brcs	.+22     	; 0xe8a <display_time+0x1f6>
					{
						lcd_cursor(2,3);
     e74:	63 e0       	ldi	r22, 0x03	; 3
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(hr,10);
     e7c:	80 91 1e 03 	lds	r24, 0x031E
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	6a e0       	ldi	r22, 0x0A	; 10
     e86:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
	if(min<=9)
     e8a:	80 91 1c 03 	lds	r24, 0x031C
     e8e:	8a 30       	cpi	r24, 0x0A	; 10
     e90:	98 f4       	brcc	.+38     	; 0xeb8 <display_time+0x224>
				{
					lcd_cursor(2,6);
     e92:	66 e0       	ldi	r22, 0x06	; 6
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
					lcd_string_write("0");
     e9a:	86 e8       	ldi	r24, 0x86	; 134
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
					lcd_cursor(2,7);
     ea2:	67 e0       	ldi	r22, 0x07	; 7
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
					lcd_number_write(min,10);
     eaa:	80 91 1c 03 	lds	r24, 0x031C
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	6a e0       	ldi	r22, 0x0A	; 10
     eb4:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
				}
	if(min>9)
     eb8:	80 91 1c 03 	lds	r24, 0x031C
     ebc:	8a 30       	cpi	r24, 0x0A	; 10
     ebe:	58 f0       	brcs	.+22     	; 0xed6 <display_time+0x242>
		{
			lcd_cursor(2,6);
     ec0:	66 e0       	ldi	r22, 0x06	; 6
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
			lcd_number_write(min,10);
     ec8:	80 91 1c 03 	lds	r24, 0x031C
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	6a e0       	ldi	r22, 0x0A	; 10
     ed2:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		}

	if(sec<=9)
     ed6:	80 91 18 03 	lds	r24, 0x0318
     eda:	8a 30       	cpi	r24, 0x0A	; 10
     edc:	98 f4       	brcc	.+38     	; 0xf04 <display_time+0x270>
			{
				lcd_cursor(2,9);
     ede:	69 e0       	ldi	r22, 0x09	; 9
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
				lcd_string_write("0");
     ee6:	86 e8       	ldi	r24, 0x86	; 134
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
				lcd_cursor(2,10);
     eee:	6a e0       	ldi	r22, 0x0A	; 10
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
				lcd_number_write(sec,10);
     ef6:	80 91 18 03 	lds	r24, 0x0318
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	6a e0       	ldi	r22, 0x0A	; 10
     f00:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
			}
	if(sec>9)
     f04:	80 91 18 03 	lds	r24, 0x0318
     f08:	8a 30       	cpi	r24, 0x0A	; 10
     f0a:	58 f0       	brcs	.+22     	; 0xf22 <display_time+0x28e>
		{
			lcd_cursor(2,9);
     f0c:	69 e0       	ldi	r22, 0x09	; 9
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
			lcd_number_write(sec,10);
     f14:	80 91 18 03 	lds	r24, 0x0318
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	6a e0       	ldi	r22, 0x0A	; 10
     f1e:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		}
	lcd_cursor(1,5);
     f22:	65 e0       	ldi	r22, 0x05	; 5
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	lcd_string_write("/");
     f2a:	88 e8       	ldi	r24, 0x88	; 136
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	lcd_cursor(1,8);
     f32:	68 e0       	ldi	r22, 0x08	; 8
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	lcd_string_write("/");
     f3a:	88 e8       	ldi	r24, 0x88	; 136
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	lcd_cursor(2,5);
     f42:	65 e0       	ldi	r22, 0x05	; 5
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	lcd_string_write(":");
     f4a:	8a e8       	ldi	r24, 0x8A	; 138
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	lcd_cursor(2,8);
     f52:	68 e0       	ldi	r22, 0x08	; 8
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	lcd_string_write(":");
     f5a:	8a e8       	ldi	r24, 0x8A	; 138
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

}
     f62:	66 96       	adiw	r28, 0x16	; 22
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <adc_init>:
//adc to set time of the clock
unsigned char ADC_Conversion(unsigned char);
unsigned char ADC_Value;

//Function to Initialize ADC
void adc_init() {
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
     f7c:	86 e2       	ldi	r24, 0x26	; 38
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	fc 01       	movw	r30, r24
     f82:	10 82       	st	Z, r1
	ADMUX = 0x20;	                //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     f84:	87 e2       	ldi	r24, 0x27	; 39
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	20 e2       	ldi	r18, 0x20	; 32
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 83       	st	Z, r18
	ACSR = 0x80;
     f8e:	88 e2       	ldi	r24, 0x28	; 40
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	20 e8       	ldi	r18, 0x80	; 128
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
	ADCSRA = 0x86;		            //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     f98:	86 e2       	ldi	r24, 0x26	; 38
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	26 e8       	ldi	r18, 0x86	; 134
     f9e:	fc 01       	movw	r30, r24
     fa0:	20 83       	st	Z, r18
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <ReadVoltage>:


//This Function returns the corresponding Analog Value

uint8_t ReadVoltage(void)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	ADMUX = _BV(ADLAR) | _BV(REFS1) | _BV(REFS0) | _BV(MUX1);//Left Adjust
     fb0:	87 e2       	ldi	r24, 0x27	; 39
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	22 ee       	ldi	r18, 0xE2	; 226
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
		ADCSRA |= _BV(ADSC); // start conversion
     fba:	86 e2       	ldi	r24, 0x26	; 38
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	26 e2       	ldi	r18, 0x26	; 38
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	f9 01       	movw	r30, r18
     fc4:	20 81       	ld	r18, Z
     fc6:	20 64       	ori	r18, 0x40	; 64
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
		while (ADCSRA & (1 << ADSC));
     fcc:	00 00       	nop
     fce:	86 e2       	ldi	r24, 0x26	; 38
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	fc 01       	movw	r30, r24
     fd4:	80 81       	ld	r24, Z
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	80 74       	andi	r24, 0x40	; 64
     fdc:	99 27       	eor	r25, r25
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	b1 f7       	brne	.-20     	; 0xfce <ReadVoltage+0x26>
		return ADCH;
     fe2:	85 e2       	ldi	r24, 0x25	; 37
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	fc 01       	movw	r30, r24
     fe8:	80 81       	ld	r24, Z

}
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	08 95       	ret

00000ff0 <print_hour>:

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location.
int print_hour(char row, char coloumn,unsigned char channel) {
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <print_hour+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <print_hour+0x8>
     ff8:	1f 92       	push	r1
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	6a 83       	std	Y+2, r22	; 0x02
    1002:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ReadVoltage();
    1004:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    1008:	80 93 1a 03 	sts	0x031A, r24
	ADC_Value = (ADC_Value*24) / 255;
    100c:	80 91 1a 03 	lds	r24, 0x031A
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	c9 01       	movw	r24, r18
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	82 0f       	add	r24, r18
    101c:	93 1f       	adc	r25, r19
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	2f ef       	ldi	r18, 0xFF	; 255
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	b9 01       	movw	r22, r18
    1030:	0e 94 6d 1a 	call	0x34da	; 0x34da <__divmodhi4>
    1034:	cb 01       	movw	r24, r22
    1036:	80 93 1a 03 	sts	0x031A, r24
	//lcd_print(row, coloumn, ADC_Value, 2);

	if(ADC_Value <= 23)
    103a:	80 91 1a 03 	lds	r24, 0x031A
    103e:	88 31       	cpi	r24, 0x18	; 24
    1040:	68 f5       	brcc	.+90     	; 0x109c <print_hour+0xac>
	{
		if(ADC_Value<=9)
    1042:	80 91 1a 03 	lds	r24, 0x031A
    1046:	8a 30       	cpi	r24, 0x0A	; 10
    1048:	a8 f4       	brcc	.+42     	; 0x1074 <print_hour+0x84>
					{
						lcd_cursor(row,coloumn);
    104a:	6a 81       	ldd	r22, Y+2	; 0x02
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_string_write("0");
    1052:	86 e8       	ldi	r24, 0x86	; 134
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						lcd_cursor(row,coloumn+1);
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	68 2f       	mov	r22, r24
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(ADC_Value,10);
    1066:	80 91 1a 03 	lds	r24, 0x031A
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	6a e0       	ldi	r22, 0x0A	; 10
    1070:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
			if(ADC_Value>9)
    1074:	80 91 1a 03 	lds	r24, 0x031A
    1078:	8a 30       	cpi	r24, 0x0A	; 10
    107a:	58 f0       	brcs	.+22     	; 0x1092 <print_hour+0xa2>
				{
					lcd_cursor(row,coloumn);
    107c:	6a 81       	ldd	r22, Y+2	; 0x02
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
					lcd_number_write(ADC_Value,10);
    1084:	80 91 1a 03 	lds	r24, 0x031A
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	6a e0       	ldi	r22, 0x0A	; 10
    108e:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
				}
		return ADC_Value;
    1092:	80 91 1a 03 	lds	r24, 0x031A
    1096:	88 2f       	mov	r24, r24
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <print_hour+0xba>
	}
    if(ADC_Value >23)
    109c:	80 91 1a 03 	lds	r24, 0x031A
    10a0:	88 31       	cpi	r24, 0x18	; 24
    10a2:	18 f0       	brcs	.+6      	; 0x10aa <print_hour+0xba>
	   return 23;
    10a4:	87 e1       	ldi	r24, 0x17	; 23
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <print_hour+0xba>


}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <print_minute>:

int print_minute(char row, char coloumn,unsigned char channel) {
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <print_minute+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <print_minute+0x8>
    10c2:	1f 92       	push	r1
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	6a 83       	std	Y+2, r22	; 0x02
    10cc:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ReadVoltage();
    10ce:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    10d2:	80 93 1a 03 	sts	0x031A, r24
	ADC_Value = (ADC_Value*60) / 255;
    10d6:	80 91 1a 03 	lds	r24, 0x031A
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4c e3       	ldi	r20, 0x3C	; 60
    10e0:	42 9f       	mul	r20, r18
    10e2:	c0 01       	movw	r24, r0
    10e4:	43 9f       	mul	r20, r19
    10e6:	90 0d       	add	r25, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	2f ef       	ldi	r18, 0xFF	; 255
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	b9 01       	movw	r22, r18
    10f0:	0e 94 6d 1a 	call	0x34da	; 0x34da <__divmodhi4>
    10f4:	cb 01       	movw	r24, r22
    10f6:	80 93 1a 03 	sts	0x031A, r24
	//lcd_print(row, coloumn, ADC_Value, 2);
	lcd_cursor(row,coloumn);
    10fa:	6a 81       	ldd	r22, Y+2	; 0x02
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	if(ADC_Value <= 59)
    1102:	80 91 1a 03 	lds	r24, 0x031A
    1106:	8c 33       	cpi	r24, 0x3C	; 60
    1108:	68 f5       	brcc	.+90     	; 0x1164 <print_minute+0xaa>
	{
			if(ADC_Value<=9)
    110a:	80 91 1a 03 	lds	r24, 0x031A
    110e:	8a 30       	cpi	r24, 0x0A	; 10
    1110:	a8 f4       	brcc	.+42     	; 0x113c <print_minute+0x82>
					{
						lcd_cursor(row,coloumn);
    1112:	6a 81       	ldd	r22, Y+2	; 0x02
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_string_write("0");
    111a:	86 e8       	ldi	r24, 0x86	; 134
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						lcd_cursor(row,coloumn+1);
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	8f 5f       	subi	r24, 0xFF	; 255
    1126:	68 2f       	mov	r22, r24
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(ADC_Value,10);
    112e:	80 91 1a 03 	lds	r24, 0x031A
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	6a e0       	ldi	r22, 0x0A	; 10
    1138:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
			if(ADC_Value>9)
    113c:	80 91 1a 03 	lds	r24, 0x031A
    1140:	8a 30       	cpi	r24, 0x0A	; 10
    1142:	58 f0       	brcs	.+22     	; 0x115a <print_minute+0xa0>
				{
					lcd_cursor(row,coloumn);
    1144:	6a 81       	ldd	r22, Y+2	; 0x02
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
					lcd_number_write(ADC_Value,10);
    114c:	80 91 1a 03 	lds	r24, 0x031A
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	6a e0       	ldi	r22, 0x0A	; 10
    1156:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
				}
			return ADC_Value;
    115a:	80 91 1a 03 	lds	r24, 0x031A
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <print_minute+0xb8>
	}
	if(ADC_Value >59)
    1164:	80 91 1a 03 	lds	r24, 0x031A
    1168:	8c 33       	cpi	r24, 0x3C	; 60
    116a:	18 f0       	brcs	.+6      	; 0x1172 <print_minute+0xb8>
	   return 59;
    116c:	8b e3       	ldi	r24, 0x3B	; 59
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <print_minute+0xb8>


}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <print_yr>:

int print_yr(char row, char coloumn,unsigned char channel) {
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	00 d0       	rcall	.+0      	; 0x1188 <print_yr+0x6>
    1188:	00 d0       	rcall	.+0      	; 0x118a <print_yr+0x8>
    118a:	1f 92       	push	r1
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	6a 83       	std	Y+2, r22	; 0x02
    1194:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ReadVoltage();
    1196:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    119a:	80 93 1a 03 	sts	0x031A, r24
	ADC_Value = (ADC_Value*100) / 255;
    119e:	80 91 1a 03 	lds	r24, 0x031A
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	44 e6       	ldi	r20, 0x64	; 100
    11a8:	42 9f       	mul	r20, r18
    11aa:	c0 01       	movw	r24, r0
    11ac:	43 9f       	mul	r20, r19
    11ae:	90 0d       	add	r25, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	2f ef       	ldi	r18, 0xFF	; 255
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	b9 01       	movw	r22, r18
    11b8:	0e 94 6d 1a 	call	0x34da	; 0x34da <__divmodhi4>
    11bc:	cb 01       	movw	r24, r22
    11be:	80 93 1a 03 	sts	0x031A, r24
	if(ADC_Value <= 99)
    11c2:	80 91 1a 03 	lds	r24, 0x031A
    11c6:	84 36       	cpi	r24, 0x64	; 100
    11c8:	68 f5       	brcc	.+90     	; 0x1224 <print_yr+0xa2>
		{
			if(ADC_Value<=9)
    11ca:	80 91 1a 03 	lds	r24, 0x031A
    11ce:	8a 30       	cpi	r24, 0x0A	; 10
    11d0:	a8 f4       	brcc	.+42     	; 0x11fc <print_yr+0x7a>
						{
							lcd_cursor(row,coloumn);
    11d2:	6a 81       	ldd	r22, Y+2	; 0x02
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_string_write("0");
    11da:	86 e8       	ldi	r24, 0x86	; 134
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
							lcd_cursor(row,coloumn+1);
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	8f 5f       	subi	r24, 0xFF	; 255
    11e6:	68 2f       	mov	r22, r24
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_number_write(ADC_Value,10);
    11ee:	80 91 1a 03 	lds	r24, 0x031A
    11f2:	88 2f       	mov	r24, r24
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	6a e0       	ldi	r22, 0x0A	; 10
    11f8:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
						}
				if(ADC_Value>9)
    11fc:	80 91 1a 03 	lds	r24, 0x031A
    1200:	8a 30       	cpi	r24, 0x0A	; 10
    1202:	58 f0       	brcs	.+22     	; 0x121a <print_yr+0x98>
					{
						lcd_cursor(row,coloumn);
    1204:	6a 81       	ldd	r22, Y+2	; 0x02
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(ADC_Value,10);
    120c:	80 91 1a 03 	lds	r24, 0x031A
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	6a e0       	ldi	r22, 0x0A	; 10
    1216:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
				return ADC_Value;
    121a:	80 91 1a 03 	lds	r24, 0x031A
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <print_yr+0xb0>
		}
		if(ADC_Value >99)
    1224:	80 91 1a 03 	lds	r24, 0x031A
    1228:	84 36       	cpi	r24, 0x64	; 100
    122a:	18 f0       	brcs	.+6      	; 0x1232 <print_yr+0xb0>
		   return 99;
    122c:	83 e6       	ldi	r24, 0x63	; 99
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <print_yr+0xb0>
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <print_date>:

int print_date(char row, char coloumn,unsigned char channel) {
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	00 d0       	rcall	.+0      	; 0x1248 <print_date+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <print_date+0x8>
    124a:	1f 92       	push	r1
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	6a 83       	std	Y+2, r22	; 0x02
    1254:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ReadVoltage();
    1256:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    125a:	80 93 1a 03 	sts	0x031A, r24
	ADC_Value = (ADC_Value*31) / 255;
    125e:	80 91 1a 03 	lds	r24, 0x031A
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4f e1       	ldi	r20, 0x1F	; 31
    1268:	42 9f       	mul	r20, r18
    126a:	c0 01       	movw	r24, r0
    126c:	43 9f       	mul	r20, r19
    126e:	90 0d       	add	r25, r0
    1270:	11 24       	eor	r1, r1
    1272:	2f ef       	ldi	r18, 0xFF	; 255
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	b9 01       	movw	r22, r18
    1278:	0e 94 6d 1a 	call	0x34da	; 0x34da <__divmodhi4>
    127c:	cb 01       	movw	r24, r22
    127e:	80 93 1a 03 	sts	0x031A, r24
	if(ADC_Value <= 31)
    1282:	80 91 1a 03 	lds	r24, 0x031A
    1286:	80 32       	cpi	r24, 0x20	; 32
    1288:	a0 f5       	brcc	.+104    	; 0x12f2 <print_date+0xb0>
		{
			if(ADC_Value<=9)
    128a:	80 91 1a 03 	lds	r24, 0x031A
    128e:	8a 30       	cpi	r24, 0x0A	; 10
    1290:	e0 f4       	brcc	.+56     	; 0x12ca <print_date+0x88>
						{
							if(ADC_Value<1)
    1292:	80 91 1a 03 	lds	r24, 0x031A
    1296:	88 23       	and	r24, r24
    1298:	19 f4       	brne	.+6      	; 0x12a0 <print_date+0x5e>
								ADC_Value=1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	80 93 1a 03 	sts	0x031A, r24
							lcd_cursor(row,coloumn);
    12a0:	6a 81       	ldd	r22, Y+2	; 0x02
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_string_write("0");
    12a8:	86 e8       	ldi	r24, 0x86	; 134
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
							lcd_cursor(row,coloumn+1);
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	8f 5f       	subi	r24, 0xFF	; 255
    12b4:	68 2f       	mov	r22, r24
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_number_write(ADC_Value,10);
    12bc:	80 91 1a 03 	lds	r24, 0x031A
    12c0:	88 2f       	mov	r24, r24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	6a e0       	ldi	r22, 0x0A	; 10
    12c6:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
						}
				if(ADC_Value>9)
    12ca:	80 91 1a 03 	lds	r24, 0x031A
    12ce:	8a 30       	cpi	r24, 0x0A	; 10
    12d0:	58 f0       	brcs	.+22     	; 0x12e8 <print_date+0xa6>
					{
						lcd_cursor(row,coloumn);
    12d2:	6a 81       	ldd	r22, Y+2	; 0x02
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(ADC_Value,10);
    12da:	80 91 1a 03 	lds	r24, 0x031A
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	6a e0       	ldi	r22, 0x0A	; 10
    12e4:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
				return ADC_Value;
    12e8:	80 91 1a 03 	lds	r24, 0x031A
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <print_date+0xbe>
		}
		if(ADC_Value >31)
    12f2:	80 91 1a 03 	lds	r24, 0x031A
    12f6:	80 32       	cpi	r24, 0x20	; 32
    12f8:	18 f0       	brcs	.+6      	; 0x1300 <print_date+0xbe>
		   return 31;
    12fa:	8f e1       	ldi	r24, 0x1F	; 31
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	00 c0       	rjmp	.+0      	; 0x1300 <print_date+0xbe>
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <print_month>:

int print_month(char row, char coloumn,unsigned char channel) {
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	00 d0       	rcall	.+0      	; 0x1316 <print_month+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <print_month+0x8>
    1318:	1f 92       	push	r1
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	6a 83       	std	Y+2, r22	; 0x02
    1322:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ReadVoltage();
    1324:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    1328:	80 93 1a 03 	sts	0x031A, r24
	ADC_Value = (ADC_Value*12) / 255;
    132c:	80 91 1a 03 	lds	r24, 0x031A
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	c9 01       	movw	r24, r18
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	b9 01       	movw	r22, r18
    134c:	0e 94 6d 1a 	call	0x34da	; 0x34da <__divmodhi4>
    1350:	cb 01       	movw	r24, r22
    1352:	80 93 1a 03 	sts	0x031A, r24
	if(ADC_Value <= 11)
    1356:	80 91 1a 03 	lds	r24, 0x031A
    135a:	8c 30       	cpi	r24, 0x0C	; 12
    135c:	80 f5       	brcc	.+96     	; 0x13be <print_month+0xae>
		{
			if(ADC_Value<=9)
    135e:	80 91 1a 03 	lds	r24, 0x031A
    1362:	8a 30       	cpi	r24, 0x0A	; 10
    1364:	b0 f4       	brcc	.+44     	; 0x1392 <print_month+0x82>
						{
							lcd_cursor(row,coloumn);
    1366:	6a 81       	ldd	r22, Y+2	; 0x02
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_string_write("0");
    136e:	86 e8       	ldi	r24, 0x86	; 134
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
							lcd_cursor(row,coloumn+1);
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	8f 5f       	subi	r24, 0xFF	; 255
    137a:	68 2f       	mov	r22, r24
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_number_write(ADC_Value+1,10);
    1382:	80 91 1a 03 	lds	r24, 0x031A
    1386:	88 2f       	mov	r24, r24
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	6a e0       	ldi	r22, 0x0A	; 10
    138e:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
						}
				if(ADC_Value>9)
    1392:	80 91 1a 03 	lds	r24, 0x031A
    1396:	8a 30       	cpi	r24, 0x0A	; 10
    1398:	60 f0       	brcs	.+24     	; 0x13b2 <print_month+0xa2>
					{
						lcd_cursor(row,coloumn);
    139a:	6a 81       	ldd	r22, Y+2	; 0x02
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
						lcd_number_write(ADC_Value+1,10);
    13a2:	80 91 1a 03 	lds	r24, 0x031A
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	6a e0       	ldi	r22, 0x0A	; 10
    13ae:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
					}
				return ADC_Value+1;
    13b2:	80 91 1a 03 	lds	r24, 0x031A
    13b6:	88 2f       	mov	r24, r24
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	01 96       	adiw	r24, 0x01	; 1
    13bc:	07 c0       	rjmp	.+14     	; 0x13cc <print_month+0xbc>
		}
		if(ADC_Value >11)
    13be:	80 91 1a 03 	lds	r24, 0x031A
    13c2:	8c 30       	cpi	r24, 0x0C	; 12
    13c4:	18 f0       	brcs	.+6      	; 0x13cc <print_month+0xbc>
		   return 12;
    13c6:	8c e0       	ldi	r24, 0x0C	; 12
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <print_month+0xbc>
}
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	08 95       	ret

000013dc <main>:


void main(void)
{
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
    13e4:	cc 56       	subi	r28, 0x6C	; 108
    13e6:	d1 09       	sbc	r29, r1
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
	// variables used in the code
	int hr, min, min_prev, sec, day, date, month, yr =0;
    13f2:	1c 8a       	std	Y+20, r1	; 0x14
    13f4:	1b 8a       	std	Y+19, r1	; 0x13
		int menu, menu_select, sub_select =0;
    13f6:	1c 82       	std	Y+4, r1	; 0x04
    13f8:	1b 82       	std	Y+3, r1	; 0x03
		int a = 0, r, d;
    13fa:	1e 8a       	std	Y+22, r1	; 0x16
    13fc:	1d 8a       	std	Y+21, r1	; 0x15

		int pause=0;
    13fe:	18 8e       	std	Y+24, r1	; 0x18
    1400:	1f 8a       	std	Y+23, r1	; 0x17
		int sw1, sw2, h;
		//int s;
		int leap[12]={-1,2,3,6,1,4,6,2,5,0,3,5};
    1402:	88 e1       	ldi	r24, 0x18	; 24
    1404:	e1 e6       	ldi	r30, 0x61	; 97
    1406:	f2 e0       	ldi	r31, 0x02	; 2
    1408:	de 01       	movw	r26, r28
    140a:	db 96       	adiw	r26, 0x3b	; 59
    140c:	01 90       	ld	r0, Z+
    140e:	0d 92       	st	X+, r0
    1410:	8a 95       	dec	r24
    1412:	e1 f7       	brne	.-8      	; 0x140c <main+0x30>
		int nonleap[12]={0,3,3,6,1,4,6,2,5,0,3,5};
    1414:	ce 01       	movw	r24, r28
    1416:	8d 5a       	subi	r24, 0xAD	; 173
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	28 e1       	ldi	r18, 0x18	; 24
    141c:	e9 e7       	ldi	r30, 0x79	; 121
    141e:	f2 e0       	ldi	r31, 0x02	; 2
    1420:	dc 01       	movw	r26, r24
    1422:	01 90       	ld	r0, Z+
    1424:	0d 92       	st	X+, r0
    1426:	2a 95       	dec	r18
    1428:	e1 f7       	brne	.-8      	; 0x1422 <main+0x46>


		adc_init();
    142a:	0e 94 ba 07 	call	0xf74	; 0xf74 <adc_init>
	DDRD=0xff;
    142e:	81 e3       	ldi	r24, 0x31	; 49
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	2f ef       	ldi	r18, 0xFF	; 255
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
	/*All the 8 pins of PortD are declared output (data pins of LCD are connected)*/

	DDRB=0x07;
    1438:	87 e3       	ldi	r24, 0x37	; 55
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	27 e0       	ldi	r18, 0x07	; 7
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
	/*PB0, PB1 and PB2 pins of PortB are declared output (control pins of LCD are connected)*/
	DDRC=DDRC | 0xfc;
    1442:	84 e3       	ldi	r24, 0x34	; 52
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	24 e3       	ldi	r18, 0x34	; 52
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	f9 01       	movw	r30, r18
    144c:	20 81       	ld	r18, Z
    144e:	2c 6f       	ori	r18, 0xFC	; 252
    1450:	fc 01       	movw	r30, r24
    1452:	20 83       	st	Z, r18
	//PC2 and PC3 set as output for relay/buzzer

	//switches and inputs
	DDRA = DDRA & 0x00;   //PORTE pin set as input
    1454:	8a e3       	ldi	r24, 0x3A	; 58
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	8a e3       	ldi	r24, 0x3A	; 58
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	fc 01       	movw	r30, r24
    1462:	10 82       	st	Z, r1
	PORTA = PORTA | 0xFF; //PORTE internal pull-up enabled
    1464:	8b e3       	ldi	r24, 0x3B	; 59
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	fc 01       	movw	r30, r24
    146a:	80 81       	ld	r24, Z
    146c:	8b e3       	ldi	r24, 0x3B	; 59
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	2f ef       	ldi	r18, 0xFF	; 255
    1472:	fc 01       	movw	r30, r24
    1474:	20 83       	st	Z, r18
	ADCSRA=0X85; //adc config
    1476:	86 e2       	ldi	r24, 0x26	; 38
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	25 e8       	ldi	r18, 0x85	; 133
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18

	//unsigned char sec=0,min=0;
	/*Variable declaration*/

	twi_init();
    1480:	0e 94 ed 02 	call	0x5da	; 0x5da <twi_init>
	/*TWI initialisaiton*/

	lcd_init();
    1484:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_init>
	/*LCD initialisaiton*/


	/*String display in 1st row of LCD*/
	lcd_cursor(1,1);
    1488:	61 e0       	ldi	r22, 0x01	; 1
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	lcd_string_write("-----EXMPLR-----");
    1490:	86 eb       	ldi	r24, 0xB6	; 182
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	lcd_command_write(0xc0);
    1498:	80 ec       	ldi	r24, 0xC0	; 192
    149a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	/*Cursor moves to 2nd row 1st column of LCD*/

	//Position the LCD cursor at "row", "column"


	lcd_cursor(2,1);
    149e:	61 e0       	ldi	r22, 0x01	; 1
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
	lcd_string_write("  AUTOCLK  3.0  ");
    14a6:	87 ec       	ldi	r24, 0xC7	; 199
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a8 ec       	ldi	r26, 0xC8	; 200
    14b4:	b2 e4       	ldi	r27, 0x42	; 66
    14b6:	8d a7       	std	Y+45, r24	; 0x2d
    14b8:	9e a7       	std	Y+46, r25	; 0x2e
    14ba:	af a7       	std	Y+47, r26	; 0x2f
    14bc:	b8 ab       	std	Y+48, r27	; 0x30
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	4a e7       	ldi	r20, 0x7A	; 122
    14c4:	55 e4       	ldi	r21, 0x45	; 69
    14c6:	6d a5       	ldd	r22, Y+45	; 0x2d
    14c8:	7e a5       	ldd	r23, Y+46	; 0x2e
    14ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    14cc:	98 a9       	ldd	r25, Y+48	; 0x30
    14ce:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	89 ab       	std	Y+49, r24	; 0x31
    14d8:	9a ab       	std	Y+50, r25	; 0x32
    14da:	ab ab       	std	Y+51, r26	; 0x33
    14dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	69 a9       	ldd	r22, Y+49	; 0x31
    14e8:	7a a9       	ldd	r23, Y+50	; 0x32
    14ea:	8b a9       	ldd	r24, Y+51	; 0x33
    14ec:	9c a9       	ldd	r25, Y+52	; 0x34
    14ee:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
    14f2:	88 23       	and	r24, r24
    14f4:	2c f4       	brge	.+10     	; 0x1500 <main+0x124>
		__ticks = 1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9e ab       	std	Y+54, r25	; 0x36
    14fc:	8d ab       	std	Y+53, r24	; 0x35
    14fe:	3f c0       	rjmp	.+126    	; 0x157e <main+0x1a2>
	else if (__tmp > 65535)
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	3f ef       	ldi	r19, 0xFF	; 255
    1504:	4f e7       	ldi	r20, 0x7F	; 127
    1506:	57 e4       	ldi	r21, 0x47	; 71
    1508:	69 a9       	ldd	r22, Y+49	; 0x31
    150a:	7a a9       	ldd	r23, Y+50	; 0x32
    150c:	8b a9       	ldd	r24, Y+51	; 0x33
    150e:	9c a9       	ldd	r25, Y+52	; 0x34
    1510:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
    1514:	18 16       	cp	r1, r24
    1516:	4c f5       	brge	.+82     	; 0x156a <main+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e2       	ldi	r20, 0x20	; 32
    151e:	51 e4       	ldi	r21, 0x41	; 65
    1520:	6d a5       	ldd	r22, Y+45	; 0x2d
    1522:	7e a5       	ldd	r23, Y+46	; 0x2e
    1524:	8f a5       	ldd	r24, Y+47	; 0x2f
    1526:	98 a9       	ldd	r25, Y+48	; 0x30
    1528:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9e ab       	std	Y+54, r25	; 0x36
    153e:	8d ab       	std	Y+53, r24	; 0x35
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <main+0x184>
    1542:	80 e9       	ldi	r24, 0x90	; 144
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	98 af       	std	Y+56, r25	; 0x38
    1548:	8f ab       	std	Y+55, r24	; 0x37
    154a:	8f a9       	ldd	r24, Y+55	; 0x37
    154c:	98 ad       	ldd	r25, Y+56	; 0x38
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	f1 f7       	brne	.-4      	; 0x154e <main+0x172>
    1552:	98 af       	std	Y+56, r25	; 0x38
    1554:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1556:	8d a9       	ldd	r24, Y+53	; 0x35
    1558:	9e a9       	ldd	r25, Y+54	; 0x36
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	9e ab       	std	Y+54, r25	; 0x36
    155e:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1560:	8d a9       	ldd	r24, Y+53	; 0x35
    1562:	9e a9       	ldd	r25, Y+54	; 0x36
    1564:	00 97       	sbiw	r24, 0x00	; 0
    1566:	69 f7       	brne	.-38     	; 0x1542 <main+0x166>
    1568:	14 c0       	rjmp	.+40     	; 0x1592 <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156a:	69 a9       	ldd	r22, Y+49	; 0x31
    156c:	7a a9       	ldd	r23, Y+50	; 0x32
    156e:	8b a9       	ldd	r24, Y+51	; 0x33
    1570:	9c a9       	ldd	r25, Y+52	; 0x34
    1572:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	9e ab       	std	Y+54, r25	; 0x36
    157c:	8d ab       	std	Y+53, r24	; 0x35
    157e:	8d a9       	ldd	r24, Y+53	; 0x35
    1580:	9e a9       	ldd	r25, Y+54	; 0x36
    1582:	9a af       	std	Y+58, r25	; 0x3a
    1584:	89 af       	std	Y+57, r24	; 0x39
    1586:	89 ad       	ldd	r24, Y+57	; 0x39
    1588:	9a ad       	ldd	r25, Y+58	; 0x3a
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <main+0x1ae>
    158e:	9a af       	std	Y+58, r25	; 0x3a
    1590:	89 af       	std	Y+57, r24	; 0x39
	/*String display in 2nd row of LCD*/

	_delay_ms(100);
	/*Display stays for 2 second*/
	lcd_command_write(0x01);
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
		/*Clear screen*/

	while(1)
	{
		main:
		temp1 = PINA;
    1598:	89 e3       	ldi	r24, 0x39	; 57
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	fc 01       	movw	r30, r24
    159e:	80 81       	ld	r24, Z
    15a0:	80 93 1b 03 	sts	0x031B, r24
		}
		*/
	//read the Port L

			//set mode: used to set the time HRS:MIN:SEC of RTC timer
			if((temp1 & 0x08) != 0x00) // MENU button
    15a4:	80 91 1b 03 	lds	r24, 0x031B
    15a8:	88 2f       	mov	r24, r24
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	88 70       	andi	r24, 0x08	; 8
    15ae:	99 27       	eor	r25, r25
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <main+0x1dc>
    15b4:	0c 94 26 14 	jmp	0x284c	; 0x284c <main+0x1470>
			{
				// choose menu
				lcd_command_write(0x01); //clear screen
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>

				//menu
				menu:
				lcd_cursor(1,1);
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
				lcd_string_write("MENU:           ");
    15c6:	88 ed       	ldi	r24, 0xD8	; 216
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

				while(1)
				{
					temp1 = PINA;
    15ce:	89 e3       	ldi	r24, 0x39	; 57
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	fc 01       	movw	r30, r24
    15d4:	80 81       	ld	r24, Z
    15d6:	80 93 1b 03 	sts	0x031B, r24
					menu = ReadVoltage();
    15da:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9a 8f       	std	Y+26, r25	; 0x1a
    15e4:	89 8f       	std	Y+25, r24	; 0x19
					lcd_cursor(2,1);
    15e6:	61 e0       	ldi	r22, 0x01	; 1
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
					if(menu > 0 && menu <= 30)
    15ee:	89 8d       	ldd	r24, Y+25	; 0x19
    15f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15f2:	18 16       	cp	r1, r24
    15f4:	19 06       	cpc	r1, r25
    15f6:	6c f4       	brge	.+26     	; 0x1612 <main+0x236>
    15f8:	89 8d       	ldd	r24, Y+25	; 0x19
    15fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15fc:	8f 31       	cpi	r24, 0x1F	; 31
    15fe:	91 05       	cpc	r25, r1
    1600:	44 f4       	brge	.+16     	; 0x1612 <main+0x236>
					{
						// set master time
						lcd_string_write("| Master Clock >");
    1602:	89 ee       	ldi	r24, 0xE9	; 233
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						menu_select=1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
						//goto master_clock;
					}
					if(menu > 30 && menu <= 60)
    1612:	89 8d       	ldd	r24, Y+25	; 0x19
    1614:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1616:	8f 31       	cpi	r24, 0x1F	; 31
    1618:	91 05       	cpc	r25, r1
    161a:	6c f0       	brlt	.+26     	; 0x1636 <main+0x25a>
    161c:	89 8d       	ldd	r24, Y+25	; 0x19
    161e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1620:	8d 33       	cpi	r24, 0x3D	; 61
    1622:	91 05       	cpc	r25, r1
    1624:	44 f4       	brge	.+16     	; 0x1636 <main+0x25a>
					{
					// set P0 time
						lcd_string_write("<  P0   Clock  >");
    1626:	8a ef       	ldi	r24, 0xFA	; 250
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						menu_select=2;
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
						//goto P0_clock;
					}
					if(menu > 60 && menu <= 90)
    1636:	89 8d       	ldd	r24, Y+25	; 0x19
    1638:	9a 8d       	ldd	r25, Y+26	; 0x1a
    163a:	8d 33       	cpi	r24, 0x3D	; 61
    163c:	91 05       	cpc	r25, r1
    163e:	6c f0       	brlt	.+26     	; 0x165a <main+0x27e>
    1640:	89 8d       	ldd	r24, Y+25	; 0x19
    1642:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1644:	8b 35       	cpi	r24, 0x5B	; 91
    1646:	91 05       	cpc	r25, r1
    1648:	44 f4       	brge	.+16     	; 0x165a <main+0x27e>
					{
					// set P1 time
						lcd_string_write("<  P1   Clock  >");
    164a:	8b e0       	ldi	r24, 0x0B	; 11
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						menu_select=3;
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
					}
					if(menu > 90 && menu <= 255)
    165a:	89 8d       	ldd	r24, Y+25	; 0x19
    165c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    165e:	8b 35       	cpi	r24, 0x5B	; 91
    1660:	91 05       	cpc	r25, r1
    1662:	74 f0       	brlt	.+28     	; 0x1680 <main+0x2a4>
    1664:	89 8d       	ldd	r24, Y+25	; 0x19
    1666:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1668:	8f 3f       	cpi	r24, 0xFF	; 255
    166a:	91 05       	cpc	r25, r1
    166c:	09 f0       	breq	.+2      	; 0x1670 <main+0x294>
    166e:	44 f4       	brge	.+16     	; 0x1680 <main+0x2a4>
					{
					// set P2 time
					    lcd_string_write("<  P2   Clock  |");
    1670:	8c e1       	ldi	r24, 0x1C	; 28
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
						menu_select=4;
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9a 83       	std	Y+2, r25	; 0x02
    167e:	89 83       	std	Y+1, r24	; 0x01
					}
					if((temp1 & 0x02)!=0x00) // EXIT button
    1680:	80 91 1b 03 	lds	r24, 0x031B
    1684:	88 2f       	mov	r24, r24
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	82 70       	andi	r24, 0x02	; 2
    168a:	99 27       	eor	r25, r25
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	31 f0       	breq	.+12     	; 0x169c <main+0x2c0>
					{
						lcd_command_write(0x01); //clear screen
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
						menu_select=0;
    1696:	1a 82       	std	Y+2, r1	; 0x02
    1698:	19 82       	std	Y+1, r1	; 0x01
						goto main;
    169a:	7e cf       	rjmp	.-260    	; 0x1598 <main+0x1bc>
					}

					if((temp1 & 0x01)!=0x00) // OK button
    169c:	80 91 1b 03 	lds	r24, 0x031B
    16a0:	88 2f       	mov	r24, r24
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	81 70       	andi	r24, 0x01	; 1
    16a6:	99 27       	eor	r25, r25
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	11 f4       	brne	.+4      	; 0x16b0 <main+0x2d4>
    16ac:	0c 94 24 14 	jmp	0x2848	; 0x2848 <main+0x146c>
					{
						//function into mode as per menu_select
						lcd_command_write(0x01); //clear screen
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
						lcd_cursor(2,1);
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>

						while(1)
						{
							//set master clock

							if(menu_select == 1)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	9a 81       	ldd	r25, Y+2	; 0x02
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f0       	breq	.+2      	; 0x16ca <main+0x2ee>
    16c8:	96 c1       	rjmp	.+812    	; 0x19f6 <main+0x61a>
							{
								master_clock:
								//_continue=0;
								lcd_cursor(1,1);
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("Set HRS:min:sec");
    16d2:	8d e2       	ldi	r24, 0x2D	; 45
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
								lcd_cursor(2,1);
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("  :  :          ");
    16e2:	8d e3       	ldi	r24, 0x3D	; 61
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

								while(1) // setting hrs
								{
									temp1=PINA;
    16ea:	89 e3       	ldi	r24, 0x39	; 57
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	80 93 1b 03 	sts	0x031B, r24
									hr=print_hour(2,1,0);
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_hour>
    1700:	9c 8f       	std	Y+28, r25	; 0x1c
    1702:	8b 8f       	std	Y+27, r24	; 0x1b
									if((temp1 & 0x01)!=0x00) // OK button
    1704:	80 91 1b 03 	lds	r24, 0x031B
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	99 27       	eor	r25, r25
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	51 f0       	breq	.+20     	; 0x1728 <main+0x34c>
									{
										break;
    1714:	00 00       	nop
										goto menu;
										break;
									}
								}

								lcd_cursor(1,1);
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("Set hrs:MIN:sec");
    171e:	8e e4       	ldi	r24, 0x4E	; 78
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    1726:	0d c0       	rjmp	.+26     	; 0x1742 <main+0x366>
									hr=print_hour(2,1,0);
									if((temp1 & 0x01)!=0x00) // OK button
									{
										break;
									}
									if((temp1 & 0x02)!=0x00) // EXIT button
    1728:	80 91 1b 03 	lds	r24, 0x031B
    172c:	88 2f       	mov	r24, r24
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	82 70       	andi	r24, 0x02	; 2
    1732:	99 27       	eor	r25, r25
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	21 f0       	breq	.+8      	; 0x1740 <main+0x364>
									{
										lcd_command_write(0x01); //clear screen
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										goto menu;
    173e:	3f cf       	rjmp	.-386    	; 0x15be <main+0x1e2>
										break;
									}
								}
    1740:	d4 cf       	rjmp	.-88     	; 0x16ea <main+0x30e>
								lcd_cursor(1,1);
								lcd_string_write("Set hrs:MIN:sec");

								while(1) // setting minutes
								{
									temp1=PINA;
    1742:	89 e3       	ldi	r24, 0x39	; 57
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	fc 01       	movw	r30, r24
    1748:	80 81       	ld	r24, Z
    174a:	80 93 1b 03 	sts	0x031B, r24
									min=print_minute(2,4,0);
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	64 e0       	ldi	r22, 0x04	; 4
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    1758:	9e 8f       	std	Y+30, r25	; 0x1e
    175a:	8d 8f       	std	Y+29, r24	; 0x1d
									if((temp1 & 0x01)!=0x00) // OK button
    175c:	80 91 1b 03 	lds	r24, 0x031B
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	99 27       	eor	r25, r25
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	51 f0       	breq	.+20     	; 0x1780 <main+0x3a4>
									{

										break;
    176c:	00 00       	nop
										goto master_clock;
										break;
									}
								}

								lcd_cursor(1,1);
    176e:	61 e0       	ldi	r22, 0x01	; 1
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("Set hrs:min:SEC");
    1776:	8e e5       	ldi	r24, 0x5E	; 94
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    177e:	0d c0       	rjmp	.+26     	; 0x179a <main+0x3be>
									if((temp1 & 0x01)!=0x00) // OK button
									{

										break;
									}
									if((temp1 & 0x02)!=0x00) // EXIT button
    1780:	80 91 1b 03 	lds	r24, 0x031B
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	82 70       	andi	r24, 0x02	; 2
    178a:	99 27       	eor	r25, r25
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	21 f0       	breq	.+8      	; 0x1798 <main+0x3bc>
									{
										lcd_command_write(0x01); //clear screen
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										goto master_clock;
    1796:	99 cf       	rjmp	.-206    	; 0x16ca <main+0x2ee>
										break;
									}
								}
    1798:	d4 cf       	rjmp	.-88     	; 0x1742 <main+0x366>



								while(1) // setting seconds
								{
									temp1=PINA;
    179a:	89 e3       	ldi	r24, 0x39	; 57
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	fc 01       	movw	r30, r24
    17a0:	80 81       	ld	r24, Z
    17a2:	80 93 1b 03 	sts	0x031B, r24
									sec=print_minute(2,7,0);
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	67 e0       	ldi	r22, 0x07	; 7
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    17b0:	98 a3       	std	Y+32, r25	; 0x20
    17b2:	8f 8f       	std	Y+31, r24	; 0x1f
									if((temp1 & 0x01)!=0x00) // OK button
    17b4:	80 91 1b 03 	lds	r24, 0x031B
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	81 70       	andi	r24, 0x01	; 1
    17be:	99 27       	eor	r25, r25
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f0       	breq	.+26     	; 0x17de <main+0x402>
									{

										break;
    17c4:	00 00       	nop
										lcd_command_write(0x01); //clear screen
										goto master_clock;
										break;
									}
								}
								ds1307_hour_write(hr,0,0);
    17c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	0e 94 84 04 	call	0x908	; 0x908 <ds1307_hour_write>
								ds1307_minute_write(min);
    17d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d2:	0e 94 65 04 	call	0x8ca	; 0x8ca <ds1307_minute_write>
								ds1307_second_write(sec);
    17d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17d8:	0e 94 46 04 	call	0x88c	; 0x88c <ds1307_second_write>
    17dc:	0d c0       	rjmp	.+26     	; 0x17f8 <main+0x41c>
									if((temp1 & 0x01)!=0x00) // OK button
									{

										break;
									}
									if((temp1 & 0x02)!=0x00) // EXIT button
    17de:	80 91 1b 03 	lds	r24, 0x031B
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	82 70       	andi	r24, 0x02	; 2
    17e8:	99 27       	eor	r25, r25
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	21 f0       	breq	.+8      	; 0x17f6 <main+0x41a>
									{
										lcd_command_write(0x01); //clear screen
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										goto master_clock;
    17f4:	6a cf       	rjmp	.-300    	; 0x16ca <main+0x2ee>
										break;
									}
								}
    17f6:	d1 cf       	rjmp	.-94     	; 0x179a <main+0x3be>
								ds1307_minute_write(min);
								ds1307_second_write(sec);

								date:

								lcd_cursor(1,1);
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("Set DD:mm:yy     ");
    1800:	8e e6       	ldi	r24, 0x6E	; 110
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
								lcd_cursor(2,1);
    1808:	61 e0       	ldi	r22, 0x01	; 1
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("  :  :          ");
    1810:	8d e3       	ldi	r24, 0x3D	; 61
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

								while(1) //setting date
								{
									temp1=PINA;
    1818:	89 e3       	ldi	r24, 0x39	; 57
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	fc 01       	movw	r30, r24
    181e:	80 81       	ld	r24, Z
    1820:	80 93 1b 03 	sts	0x031B, r24
									date = print_date(2,1,0);
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	61 e0       	ldi	r22, 0x01	; 1
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	0e 94 21 09 	call	0x1242	; 0x1242 <print_date>
    182e:	9a a3       	std	Y+34, r25	; 0x22
    1830:	89 a3       	std	Y+33, r24	; 0x21
									if((temp1 & 0x01)!=0x00) // OK button
    1832:	80 91 1b 03 	lds	r24, 0x031B
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	81 70       	andi	r24, 0x01	; 1
    183c:	99 27       	eor	r25, r25
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	51 f0       	breq	.+20     	; 0x1856 <main+0x47a>
									{
										break;
    1842:	00 00       	nop
										goto master_clock;
										break;
									}

								}
								if((temp1 & 0x02)!=0x00) // EXIT button
    1844:	80 91 1b 03 	lds	r24, 0x031B
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	82 70       	andi	r24, 0x02	; 2
    184e:	99 27       	eor	r25, r25
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	91 f0       	breq	.+36     	; 0x1878 <main+0x49c>
    1854:	0d c0       	rjmp	.+26     	; 0x1870 <main+0x494>
									date = print_date(2,1,0);
									if((temp1 & 0x01)!=0x00) // OK button
									{
										break;
									}
									if((temp1 & 0x02)!=0x00) // EXIT button
    1856:	80 91 1b 03 	lds	r24, 0x031B
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	82 70       	andi	r24, 0x02	; 2
    1860:	99 27       	eor	r25, r25
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	21 f0       	breq	.+8      	; 0x186e <main+0x492>
									{
										lcd_command_write(0x01); //clear screen
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										goto master_clock;
    186c:	2e cf       	rjmp	.-420    	; 0x16ca <main+0x2ee>
										break;
									}

								}
    186e:	d4 cf       	rjmp	.-88     	; 0x1818 <main+0x43c>
								if((temp1 & 0x02)!=0x00) // EXIT button
								{
									lcd_command_write(0x01); //clear screen
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
									goto menu;
    1876:	a3 ce       	rjmp	.-698    	; 0x15be <main+0x1e2>
									break;
								}
								lcd_cursor(1,1);
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("Set dd:MM:yy      ");
    1880:	80 e8       	ldi	r24, 0x80	; 128
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

								while(1) //setting month
								{
									temp1=PINA;
    1888:	89 e3       	ldi	r24, 0x39	; 57
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	fc 01       	movw	r30, r24
    188e:	80 81       	ld	r24, Z
    1890:	80 93 1b 03 	sts	0x031B, r24
									month = print_month(2,4,0);
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	64 e0       	ldi	r22, 0x04	; 4
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	0e 94 88 09 	call	0x1310	; 0x1310 <print_month>
    189e:	9c a3       	std	Y+36, r25	; 0x24
    18a0:	8b a3       	std	Y+35, r24	; 0x23
									if((temp1 & 0x01)!=0x00) // OK button
    18a2:	80 91 1b 03 	lds	r24, 0x031B
    18a6:	88 2f       	mov	r24, r24
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	99 27       	eor	r25, r25
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	51 f0       	breq	.+20     	; 0x18c6 <main+0x4ea>
									{
										break;
    18b2:	00 00       	nop
										break;
									}

								}

								lcd_cursor(1,1);
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("Set dd:mm:YY");
    18bc:	83 e9       	ldi	r24, 0x93	; 147
    18be:	91 e0       	ldi	r25, 0x01	; 1
    18c0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <main+0x504>
									month = print_month(2,4,0);
									if((temp1 & 0x01)!=0x00) // OK button
									{
										break;
									}
									if((temp1 & 0x02)!=0x00) // EXIT button
    18c6:	80 91 1b 03 	lds	r24, 0x031B
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	82 70       	andi	r24, 0x02	; 2
    18d0:	99 27       	eor	r25, r25
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	21 f0       	breq	.+8      	; 0x18de <main+0x502>
									{
										lcd_command_write(0x01); //clear screen
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										goto date;
    18dc:	8d cf       	rjmp	.-230    	; 0x17f8 <main+0x41c>
										break;
									}

								}
    18de:	d4 cf       	rjmp	.-88     	; 0x1888 <main+0x4ac>
								lcd_cursor(1,1);
								lcd_string_write("Set dd:mm:YY");

								while(1) //setting year
								{
									temp1=PINA;
    18e0:	89 e3       	ldi	r24, 0x39	; 57
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	fc 01       	movw	r30, r24
    18e6:	80 81       	ld	r24, Z
    18e8:	80 93 1b 03 	sts	0x031B, r24
									yr = print_yr(2,7,0);
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	67 e0       	ldi	r22, 0x07	; 7
    18f0:	82 e0       	ldi	r24, 0x02	; 2
    18f2:	0e 94 c1 08 	call	0x1182	; 0x1182 <print_yr>
    18f6:	9c 8b       	std	Y+20, r25	; 0x14
    18f8:	8b 8b       	std	Y+19, r24	; 0x13
									if((temp1 & 0x01)!=0x00) // OK button
    18fa:	80 91 1b 03 	lds	r24, 0x031B
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	81 70       	andi	r24, 0x01	; 1
    1904:	99 27       	eor	r25, r25
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	89 f0       	breq	.+34     	; 0x192c <main+0x550>
									{
										break;
    190a:	00 00       	nop
										goto date;
										break;
									}

								}
								ds1307_date_write(date);
    190c:	89 a1       	ldd	r24, Y+33	; 0x21
    190e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <ds1307_date_write>
								ds1307_month_write(month);
    1912:	8b a1       	ldd	r24, Y+35	; 0x23
    1914:	0e 94 02 05 	call	0xa04	; 0xa04 <ds1307_month_write>
								ds1307_year_write(yr);
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	0e 94 21 05 	call	0xa42	; 0xa42 <ds1307_year_write>
								if(yr%4 == 0)
    191e:	8b 89       	ldd	r24, Y+19	; 0x13
    1920:	9c 89       	ldd	r25, Y+20	; 0x14
    1922:	83 70       	andi	r24, 0x03	; 3
    1924:	99 27       	eor	r25, r25
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	99 f5       	brne	.+102    	; 0x1990 <main+0x5b4>
    192a:	0d c0       	rjmp	.+26     	; 0x1946 <main+0x56a>
									yr = print_yr(2,7,0);
									if((temp1 & 0x01)!=0x00) // OK button
									{
										break;
									}
									if((temp1 & 0x02)!=0x00) // EXIT button
    192c:	80 91 1b 03 	lds	r24, 0x031B
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	82 70       	andi	r24, 0x02	; 2
    1936:	99 27       	eor	r25, r25
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	21 f0       	breq	.+8      	; 0x1944 <main+0x568>
									{
										lcd_command_write(0x01); //clear screen
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										goto date;
    1942:	5a cf       	rjmp	.-332    	; 0x17f8 <main+0x41c>
										break;
									}

								}
    1944:	cd cf       	rjmp	.-102    	; 0x18e0 <main+0x504>
								ds1307_date_write(date);
								ds1307_month_write(month);
								ds1307_year_write(yr);
								if(yr%4 == 0)
								{
									d=date+leap[month-1]+yr+(yr/4)+6;
    1946:	8b a1       	ldd	r24, Y+35	; 0x23
    1948:	9c a1       	ldd	r25, Y+36	; 0x24
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	9e 01       	movw	r18, r28
    1952:	2f 5f       	subi	r18, 0xFF	; 255
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	ca 96       	adiw	r24, 0x3a	; 58
    195c:	fc 01       	movw	r30, r24
    195e:	20 81       	ld	r18, Z
    1960:	31 81       	ldd	r19, Z+1	; 0x01
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	28 0f       	add	r18, r24
    1968:	39 1f       	adc	r19, r25
    196a:	8b 89       	ldd	r24, Y+19	; 0x13
    196c:	9c 89       	ldd	r25, Y+20	; 0x14
    196e:	28 0f       	add	r18, r24
    1970:	39 1f       	adc	r19, r25
    1972:	8b 89       	ldd	r24, Y+19	; 0x13
    1974:	9c 89       	ldd	r25, Y+20	; 0x14
    1976:	99 23       	and	r25, r25
    1978:	0c f4       	brge	.+2      	; 0x197c <main+0x5a0>
    197a:	03 96       	adiw	r24, 0x03	; 3
    197c:	95 95       	asr	r25
    197e:	87 95       	ror	r24
    1980:	95 95       	asr	r25
    1982:	87 95       	ror	r24
    1984:	82 0f       	add	r24, r18
    1986:	93 1f       	adc	r25, r19
    1988:	06 96       	adiw	r24, 0x06	; 6
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	23 c0       	rjmp	.+70     	; 0x19d6 <main+0x5fa>
								} else
								{
									d=date+nonleap[month-1]+yr+(yr/4)+6;
    1990:	8b a1       	ldd	r24, Y+35	; 0x23
    1992:	9c a1       	ldd	r25, Y+36	; 0x24
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9e 01       	movw	r18, r28
    1998:	2d 5a       	subi	r18, 0xAD	; 173
    199a:	3f 4f       	sbci	r19, 0xFF	; 255
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	82 0f       	add	r24, r18
    19a2:	93 1f       	adc	r25, r19
    19a4:	fc 01       	movw	r30, r24
    19a6:	20 81       	ld	r18, Z
    19a8:	31 81       	ldd	r19, Z+1	; 0x01
    19aa:	89 a1       	ldd	r24, Y+33	; 0x21
    19ac:	9a a1       	ldd	r25, Y+34	; 0x22
    19ae:	28 0f       	add	r18, r24
    19b0:	39 1f       	adc	r19, r25
    19b2:	8b 89       	ldd	r24, Y+19	; 0x13
    19b4:	9c 89       	ldd	r25, Y+20	; 0x14
    19b6:	28 0f       	add	r18, r24
    19b8:	39 1f       	adc	r19, r25
    19ba:	8b 89       	ldd	r24, Y+19	; 0x13
    19bc:	9c 89       	ldd	r25, Y+20	; 0x14
    19be:	99 23       	and	r25, r25
    19c0:	0c f4       	brge	.+2      	; 0x19c4 <main+0x5e8>
    19c2:	03 96       	adiw	r24, 0x03	; 3
    19c4:	95 95       	asr	r25
    19c6:	87 95       	ror	r24
    19c8:	95 95       	asr	r25
    19ca:	87 95       	ror	r24
    19cc:	82 0f       	add	r24, r18
    19ce:	93 1f       	adc	r25, r19
    19d0:	06 96       	adiw	r24, 0x06	; 6
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
								}

								r=d%7 + 1;
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	27 e0       	ldi	r18, 0x07	; 7
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	b9 01       	movw	r22, r18
    19e0:	0e 94 6d 1a 	call	0x34da	; 0x34da <__divmodhi4>
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	9e a3       	std	Y+38, r25	; 0x26
    19e8:	8d a3       	std	Y+37, r24	; 0x25

								ds1307_day_write(r);
    19ea:	8d a1       	ldd	r24, Y+37	; 0x25
    19ec:	0e 94 c4 04 	call	0x988	; 0x988 <ds1307_day_write>


								//ending codes to go back to menu
								menu_select=0;
    19f0:	1a 82       	std	Y+2, r1	; 0x02
    19f2:	19 82       	std	Y+1, r1	; 0x01
								goto menu; //all values set, goto menu
    19f4:	e4 cd       	rjmp	.-1080   	; 0x15be <main+0x1e2>


							}

							//set P0
							if(menu_select==2)
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	9a 81       	ldd	r25, Y+2	; 0x02
    19fa:	82 30       	cpi	r24, 0x02	; 2
    19fc:	91 05       	cpc	r25, r1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <main+0x626>
    1a00:	51 c2       	rjmp	.+1186   	; 0x1ea4 <main+0xac8>
							{

								lcd_command_write(0x01); //clear screen
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
								lcd_cursor(1,1);
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								lcd_string_write("   P0   Clock   ");
    1a10:	80 ea       	ldi	r24, 0xA0	; 160
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
								while(1)
								{
									lcd_cursor(2,1);
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
									menu=ReadVoltage();
    1a20:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9a 8f       	std	Y+26, r25	; 0x1a
    1a2a:	89 8f       	std	Y+25, r24	; 0x19
									temp1 = PINA;
    1a2c:	89 e3       	ldi	r24, 0x39	; 57
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	fc 01       	movw	r30, r24
    1a32:	80 81       	ld	r24, Z
    1a34:	80 93 1b 03 	sts	0x031B, r24
									if(menu < 30)
    1a38:	89 8d       	ldd	r24, Y+25	; 0x19
    1a3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a3c:	8e 31       	cpi	r24, 0x1E	; 30
    1a3e:	91 05       	cpc	r25, r1
    1a40:	44 f4       	brge	.+16     	; 0x1a52 <main+0x676>
									{
										//modify
										lcd_string_write("MODIFY    reset");
    1a42:	81 eb       	ldi	r24, 0xB1	; 177
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										sub_select=1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
									}
									if(menu > 30)
    1a52:	89 8d       	ldd	r24, Y+25	; 0x19
    1a54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a56:	8f 31       	cpi	r24, 0x1F	; 31
    1a58:	91 05       	cpc	r25, r1
    1a5a:	44 f0       	brlt	.+16     	; 0x1a6c <main+0x690>
									{
										//reset
										lcd_string_write("modify    RESET");
    1a5c:	81 ec       	ldi	r24, 0xC1	; 193
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										sub_select=2;
    1a64:	82 e0       	ldi	r24, 0x02	; 2
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9c 83       	std	Y+4, r25	; 0x04
    1a6a:	8b 83       	std	Y+3, r24	; 0x03
									}
									if((temp1 & 0x01)!=0x00) // OK button
    1a6c:	80 91 1b 03 	lds	r24, 0x031B
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	81 70       	andi	r24, 0x01	; 1
    1a76:	99 27       	eor	r25, r25
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	39 f0       	breq	.+14     	; 0x1a8a <main+0x6ae>
									{
										break;
    1a7c:	00 00       	nop
									}
								}

								while(1)
								{
									if(sub_select==2) //resetting the eeprom
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	91 05       	cpc	r25, r1
    1a86:	a1 f4       	brne	.+40     	; 0x1ab0 <main+0x6d4>
    1a88:	0d c0       	rjmp	.+26     	; 0x1aa4 <main+0x6c8>
									}
									if((temp1 & 0x01)!=0x00) // OK button
									{
										break;
									}
									if((temp1 & 0x02)!=0x00) // EXIT button
    1a8a:	80 91 1b 03 	lds	r24, 0x031B
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	82 70       	andi	r24, 0x02	; 2
    1a94:	99 27       	eor	r25, r25
    1a96:	00 97       	sbiw	r24, 0x00	; 0
    1a98:	21 f0       	breq	.+8      	; 0x1aa2 <main+0x6c6>
									{
										lcd_command_write(0x01); //clear screen
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										goto menu;
    1aa0:	8e cd       	rjmp	.-1252   	; 0x15be <main+0x1e2>
										break;
									}
								}
    1aa2:	ba cf       	rjmp	.-140    	; 0x1a18 <main+0x63c>

								while(1)
								{
									if(sub_select==2) //resetting the eeprom
									{
										lcd_command_write(0x01); //clear screen
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
										menu_option_P0();
    1aaa:	0e 94 50 14 	call	0x28a0	; 0x28a0 <menu_option_P0>
										goto menu;
    1aae:	87 cd       	rjmp	.-1266   	; 0x15be <main+0x1e2>
										break;
									}
									if(sub_select==1) //editting selected timings
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <main+0x6e0>
    1aba:	ef c1       	rjmp	.+990    	; 0x1e9a <main+0xabe>
									{
										int i,i_prev;
										int  intervals = eeprom_read_word(MODE0);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1ac4:	98 a7       	std	Y+40, r25	; 0x28
    1ac6:	8f a3       	std	Y+39, r24	; 0x27


										lcd_cursor(2,1);
    1ac8:	61 e0       	ldi	r22, 0x01	; 1
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_string_write("  :         of  ");
    1ad0:	81 ed       	ldi	r24, 0xD1	; 209
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										P0_modify:
										while(1)
											{
											i = (ReadVoltage()*0.090196078);
    1ad8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	aa 27       	eor	r26, r26
    1ae2:	97 fd       	sbrc	r25, 7
    1ae4:	a0 95       	com	r26
    1ae6:	ba 2f       	mov	r27, r26
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__floatsisf>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	29 eb       	ldi	r18, 0xB9	; 185
    1af6:	38 eb       	ldi	r19, 0xB8	; 184
    1af8:	48 eb       	ldi	r20, 0xB8	; 184
    1afa:	5d e3       	ldi	r21, 0x3D	; 61
    1afc:	bc 01       	movw	r22, r24
    1afe:	cd 01       	movw	r24, r26
    1b00:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 99 1a 	call	0x3532	; 0x3532 <__fixsfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	98 87       	std	Y+8, r25	; 0x08
    1b16:	8f 83       	std	Y+7, r24	; 0x07
											if(i<0)
    1b18:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1a:	98 85       	ldd	r25, Y+8	; 0x08
    1b1c:	99 23       	and	r25, r25
    1b1e:	14 f4       	brge	.+4      	; 0x1b24 <main+0x748>
												i=0;
    1b20:	18 86       	std	Y+8, r1	; 0x08
    1b22:	1f 82       	std	Y+7, r1	; 0x07
											if(i>(intervals-1))
    1b24:	8f a1       	ldd	r24, Y+39	; 0x27
    1b26:	98 a5       	ldd	r25, Y+40	; 0x28
    1b28:	9c 01       	movw	r18, r24
    1b2a:	21 50       	subi	r18, 0x01	; 1
    1b2c:	31 09       	sbc	r19, r1
    1b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b30:	98 85       	ldd	r25, Y+8	; 0x08
    1b32:	28 17       	cp	r18, r24
    1b34:	39 07       	cpc	r19, r25
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <main+0x766>
												i=intervals-1;
    1b38:	8f a1       	ldd	r24, Y+39	; 0x27
    1b3a:	98 a5       	ldd	r25, Y+40	; 0x28
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	98 87       	std	Y+8, r25	; 0x08
    1b40:	8f 83       	std	Y+7, r24	; 0x07
											if(i-i_prev !=0)
    1b42:	2f 81       	ldd	r18, Y+7	; 0x07
    1b44:	38 85       	ldd	r19, Y+8	; 0x08
    1b46:	89 85       	ldd	r24, Y+9	; 0x09
    1b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4a:	28 17       	cp	r18, r24
    1b4c:	39 07       	cpc	r19, r25
    1b4e:	41 f0       	breq	.+16     	; 0x1b60 <main+0x784>
											{
												lcd_cursor(2,1);
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
												lcd_string_write("  :        ");
    1b58:	82 ee       	ldi	r24, 0xE2	; 226
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											}
											lcd_cursor(1,1);
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("HRS:MIN   P0 T");
    1b68:	8e ee       	ldi	r24, 0xEE	; 238
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											lcd_number_write(i+1,10);
    1b70:	8f 81       	ldd	r24, Y+7	; 0x07
    1b72:	98 85       	ldd	r25, Y+8	; 0x08
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	6a e0       	ldi	r22, 0x0A	; 10
    1b78:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
											lcd_cursor(1,16);
    1b7c:	60 e1       	ldi	r22, 0x10	; 16
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write(" ");
    1b84:	8d ef       	ldi	r24, 0xFD	; 253
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											if((eeprom_read_word(MODE0+i*2+2)/100) <= 9)
    1b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8e:	98 85       	ldd	r25, Y+8	; 0x08
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1b9a:	88 3e       	cpi	r24, 0xE8	; 232
    1b9c:	f3 e0       	ldi	r31, 0x03	; 3
    1b9e:	9f 07       	cpc	r25, r31
    1ba0:	e8 f4       	brcc	.+58     	; 0x1bdc <main+0x800>
											{
												lcd_cursor(2,1);
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
												lcd_string_write("0");
    1baa:	86 e8       	ldi	r24, 0x86	; 134
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
												lcd_number_write(eeprom_read_word(MODE0+i*2+2)/100,10);
    1bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb4:	98 85       	ldd	r25, Y+8	; 0x08
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1bc0:	96 95       	lsr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	96 95       	lsr	r25
    1bc6:	87 95       	ror	r24
    1bc8:	9c 01       	movw	r18, r24
    1bca:	ab e7       	ldi	r26, 0x7B	; 123
    1bcc:	b4 e1       	ldi	r27, 0x14	; 20
    1bce:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    1bd2:	96 95       	lsr	r25
    1bd4:	87 95       	ror	r24
    1bd6:	6a e0       	ldi	r22, 0x0A	; 10
    1bd8:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
											}
											if((eeprom_read_word(MODE0+i*2+2)/100) > 9)
    1bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bde:	98 85       	ldd	r25, Y+8	; 0x08
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1bea:	88 3e       	cpi	r24, 0xE8	; 232
    1bec:	23 e0       	ldi	r18, 0x03	; 3
    1bee:	92 07       	cpc	r25, r18
    1bf0:	c8 f0       	brcs	.+50     	; 0x1c24 <main+0x848>
											{
												lcd_cursor(2,1);
    1bf2:	61 e0       	ldi	r22, 0x01	; 1
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
												lcd_number_write(eeprom_read_word(MODE0+i*2+2)/100,10);
    1bfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1bfc:	98 85       	ldd	r25, Y+8	; 0x08
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1c08:	96 95       	lsr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	96 95       	lsr	r25
    1c0e:	87 95       	ror	r24
    1c10:	9c 01       	movw	r18, r24
    1c12:	ab e7       	ldi	r26, 0x7B	; 123
    1c14:	b4 e1       	ldi	r27, 0x14	; 20
    1c16:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    1c1a:	96 95       	lsr	r25
    1c1c:	87 95       	ror	r24
    1c1e:	6a e0       	ldi	r22, 0x0A	; 10
    1c20:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
											}

											if((eeprom_read_word(MODE0+i*2+2)%100) <= 9)
    1c24:	8f 81       	ldd	r24, Y+7	; 0x07
    1c26:	98 85       	ldd	r25, Y+8	; 0x08
    1c28:	01 96       	adiw	r24, 0x01	; 1
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1c32:	ac 01       	movw	r20, r24
    1c34:	ca 01       	movw	r24, r20
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	9c 01       	movw	r18, r24
    1c40:	ab e7       	ldi	r26, 0x7B	; 123
    1c42:	b4 e1       	ldi	r27, 0x14	; 20
    1c44:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    1c48:	96 95       	lsr	r25
    1c4a:	87 95       	ror	r24
    1c4c:	64 e6       	ldi	r22, 0x64	; 100
    1c4e:	68 9f       	mul	r22, r24
    1c50:	90 01       	movw	r18, r0
    1c52:	69 9f       	mul	r22, r25
    1c54:	30 0d       	add	r19, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	ca 01       	movw	r24, r20
    1c5a:	82 1b       	sub	r24, r18
    1c5c:	93 0b       	sbc	r25, r19
    1c5e:	8a 30       	cpi	r24, 0x0A	; 10
    1c60:	91 05       	cpc	r25, r1
    1c62:	40 f5       	brcc	.+80     	; 0x1cb4 <main+0x8d8>
											{
												lcd_cursor(2,4);
    1c64:	64 e0       	ldi	r22, 0x04	; 4
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
												lcd_string_write("0");
    1c6c:	86 e8       	ldi	r24, 0x86	; 134
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
												lcd_number_write(eeprom_read_word(MODE0+i*2+2)%100,10);
    1c74:	8f 81       	ldd	r24, Y+7	; 0x07
    1c76:	98 85       	ldd	r25, Y+8	; 0x08
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1c82:	ac 01       	movw	r20, r24
    1c84:	ca 01       	movw	r24, r20
    1c86:	96 95       	lsr	r25
    1c88:	87 95       	ror	r24
    1c8a:	96 95       	lsr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	9c 01       	movw	r18, r24
    1c90:	ab e7       	ldi	r26, 0x7B	; 123
    1c92:	b4 e1       	ldi	r27, 0x14	; 20
    1c94:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    1c98:	96 95       	lsr	r25
    1c9a:	87 95       	ror	r24
    1c9c:	64 e6       	ldi	r22, 0x64	; 100
    1c9e:	68 9f       	mul	r22, r24
    1ca0:	90 01       	movw	r18, r0
    1ca2:	69 9f       	mul	r22, r25
    1ca4:	30 0d       	add	r19, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	ca 01       	movw	r24, r20
    1caa:	82 1b       	sub	r24, r18
    1cac:	93 0b       	sbc	r25, r19
    1cae:	6a e0       	ldi	r22, 0x0A	; 10
    1cb0:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
											}
											if(eeprom_read_word(MODE0+i*2+2)%100 > 9)
    1cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb6:	98 85       	ldd	r25, Y+8	; 0x08
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1cc2:	ac 01       	movw	r20, r24
    1cc4:	ca 01       	movw	r24, r20
    1cc6:	96 95       	lsr	r25
    1cc8:	87 95       	ror	r24
    1cca:	96 95       	lsr	r25
    1ccc:	87 95       	ror	r24
    1cce:	9c 01       	movw	r18, r24
    1cd0:	ab e7       	ldi	r26, 0x7B	; 123
    1cd2:	b4 e1       	ldi	r27, 0x14	; 20
    1cd4:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    1cd8:	96 95       	lsr	r25
    1cda:	87 95       	ror	r24
    1cdc:	64 e6       	ldi	r22, 0x64	; 100
    1cde:	68 9f       	mul	r22, r24
    1ce0:	90 01       	movw	r18, r0
    1ce2:	69 9f       	mul	r22, r25
    1ce4:	30 0d       	add	r19, r0
    1ce6:	11 24       	eor	r1, r1
    1ce8:	ca 01       	movw	r24, r20
    1cea:	82 1b       	sub	r24, r18
    1cec:	93 0b       	sbc	r25, r19
    1cee:	8a 30       	cpi	r24, 0x0A	; 10
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	20 f1       	brcs	.+72     	; 0x1d3c <main+0x960>
											{
												lcd_cursor(2,4);
    1cf4:	64 e0       	ldi	r22, 0x04	; 4
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
												lcd_number_write(eeprom_read_word(MODE0+i*2+2)%100,10);
    1cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfe:	98 85       	ldd	r25, Y+8	; 0x08
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	ca 01       	movw	r24, r20
    1d0e:	96 95       	lsr	r25
    1d10:	87 95       	ror	r24
    1d12:	96 95       	lsr	r25
    1d14:	87 95       	ror	r24
    1d16:	9c 01       	movw	r18, r24
    1d18:	ab e7       	ldi	r26, 0x7B	; 123
    1d1a:	b4 e1       	ldi	r27, 0x14	; 20
    1d1c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    1d20:	96 95       	lsr	r25
    1d22:	87 95       	ror	r24
    1d24:	64 e6       	ldi	r22, 0x64	; 100
    1d26:	68 9f       	mul	r22, r24
    1d28:	90 01       	movw	r18, r0
    1d2a:	69 9f       	mul	r22, r25
    1d2c:	30 0d       	add	r19, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	ca 01       	movw	r24, r20
    1d32:	82 1b       	sub	r24, r18
    1d34:	93 0b       	sbc	r25, r19
    1d36:	6a e0       	ldi	r22, 0x0A	; 10
    1d38:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
											//lcd_data_write(eeprom_read_word(MODE0+i+1));

											/*lcd_cursor(2,4);
											lcd_number_write(eeprom_read_word(MODE0+i+1)%100,10)	;*/

											if(i+1 <= 9)
    1d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3e:	98 85       	ldd	r25, Y+8	; 0x08
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	8a 30       	cpi	r24, 0x0A	; 10
    1d44:	91 05       	cpc	r25, r1
    1d46:	24 f4       	brge	.+8      	; 0x1d50 <main+0x974>
												lcd_cursor(2,11);
    1d48:	6b e0       	ldi	r22, 0x0B	; 11
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											if(i+1 > 9)
    1d50:	8f 81       	ldd	r24, Y+7	; 0x07
    1d52:	98 85       	ldd	r25, Y+8	; 0x08
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	8a 30       	cpi	r24, 0x0A	; 10
    1d58:	91 05       	cpc	r25, r1
    1d5a:	24 f0       	brlt	.+8      	; 0x1d64 <main+0x988>
												lcd_cursor(2,10);
    1d5c:	6a e0       	ldi	r22, 0x0A	; 10
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_number_write(i+1,10);
    1d64:	8f 81       	ldd	r24, Y+7	; 0x07
    1d66:	98 85       	ldd	r25, Y+8	; 0x08
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	6a e0       	ldi	r22, 0x0A	; 10
    1d6c:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
											lcd_cursor(2,15);
    1d70:	6f e0       	ldi	r22, 0x0F	; 15
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_number_write(intervals,10);
    1d78:	8f a1       	ldd	r24, Y+39	; 0x27
    1d7a:	98 a5       	ldd	r25, Y+40	; 0x28
    1d7c:	6a e0       	ldi	r22, 0x0A	; 10
    1d7e:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
											temp1=PINA;
    1d82:	89 e3       	ldi	r24, 0x39	; 57
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	fc 01       	movw	r30, r24
    1d88:	80 81       	ld	r24, Z
    1d8a:	80 93 1b 03 	sts	0x031B, r24
											if((temp1 & 0x01)!=0x00) // OK button
    1d8e:	80 91 1b 03 	lds	r24, 0x031B
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	81 70       	andi	r24, 0x01	; 1
    1d98:	99 27       	eor	r25, r25
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <main+0x9c4>
    1d9e:	6c c0       	rjmp	.+216    	; 0x1e78 <main+0xa9c>
											{
												//edit the data
												lcd_cursor(2,1);
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
												lcd_string_write("  :             ");
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	91 e0       	ldi	r25, 0x01	; 1
    1dac:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
												P0_set:
												while(1) // setting hrs
												{
													temp1=PINA;
    1db0:	89 e3       	ldi	r24, 0x39	; 57
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	fc 01       	movw	r30, r24
    1db6:	80 81       	ld	r24, Z
    1db8:	80 93 1b 03 	sts	0x031B, r24
													hr=print_hour(2,1,0);
    1dbc:	40 e0       	ldi	r20, 0x00	; 0
    1dbe:	61 e0       	ldi	r22, 0x01	; 1
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_hour>
    1dc6:	9c 8f       	std	Y+28, r25	; 0x1c
    1dc8:	8b 8f       	std	Y+27, r24	; 0x1b
													if((temp1 & 0x01)!=0x00) // OK button
    1dca:	80 91 1b 03 	lds	r24, 0x031B
    1dce:	88 2f       	mov	r24, r24
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	81 70       	andi	r24, 0x01	; 1
    1dd4:	99 27       	eor	r25, r25
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <main+0xa00>
													{
														break;
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <main+0xa1a>
													}
													if((temp1 & 0x02)!=0x00) // EXIT button
    1ddc:	80 91 1b 03 	lds	r24, 0x031B
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	82 70       	andi	r24, 0x02	; 2
    1de6:	99 27       	eor	r25, r25
    1de8:	00 97       	sbiw	r24, 0x00	; 0
    1dea:	21 f0       	breq	.+8      	; 0x1df4 <main+0xa18>
													{
														lcd_command_write(0x01); //clear screen
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
														goto P0_modify;
    1df2:	72 ce       	rjmp	.-796    	; 0x1ad8 <main+0x6fc>
														break;
													}
												}
    1df4:	dd cf       	rjmp	.-70     	; 0x1db0 <main+0x9d4>

												while(1) // setting minutes
												{
													temp1=PINA;
    1df6:	89 e3       	ldi	r24, 0x39	; 57
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 93 1b 03 	sts	0x031B, r24
													min=print_minute(2,4,0);
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	64 e0       	ldi	r22, 0x04	; 4
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    1e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0e:	8d 8f       	std	Y+29, r24	; 0x1d
													if((temp1 & 0x01)!=0x00) // OK button
    1e10:	80 91 1b 03 	lds	r24, 0x031B
    1e14:	88 2f       	mov	r24, r24
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	99 27       	eor	r25, r25
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	f9 f0       	breq	.+62     	; 0x1e5e <main+0xa82>
													{

														break;
    1e20:	00 00       	nop
														lcd_command_write(0x01); //clear screen
														goto P0_set;
														break;
													}
												}
												eeprom_write_word((uint16_t *) (MODE0+i*2+2) , (hr*100+min));
    1e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e26:	44 e6       	ldi	r20, 0x64	; 100
    1e28:	48 9f       	mul	r20, r24
    1e2a:	90 01       	movw	r18, r0
    1e2c:	49 9f       	mul	r20, r25
    1e2e:	30 0d       	add	r19, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e36:	82 0f       	add	r24, r18
    1e38:	93 1f       	adc	r25, r19
    1e3a:	9c 01       	movw	r18, r24
    1e3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3e:	98 85       	ldd	r25, Y+8	; 0x08
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	b9 01       	movw	r22, r18
    1e48:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>
												lcd_cursor(2,1);
    1e4c:	61 e0       	ldi	r22, 0x01	; 1
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
												lcd_string_write("                ");
    1e54:	80 e1       	ldi	r24, 0x10	; 16
    1e56:	92 e0       	ldi	r25, 0x02	; 2
    1e58:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <main+0xa9c>
													if((temp1 & 0x01)!=0x00) // OK button
													{

														break;
													}
													if((temp1 & 0x02)!=0x00) // EXIT button
    1e5e:	80 91 1b 03 	lds	r24, 0x031B
    1e62:	88 2f       	mov	r24, r24
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	82 70       	andi	r24, 0x02	; 2
    1e68:	99 27       	eor	r25, r25
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <main+0xa9a>
													{
														lcd_command_write(0x01); //clear screen
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
														goto P0_set;
    1e74:	9d cf       	rjmp	.-198    	; 0x1db0 <main+0x9d4>
														break;
													}
												}
    1e76:	bf cf       	rjmp	.-130    	; 0x1df6 <main+0xa1a>
												eeprom_write_word((uint16_t *) (MODE0+i*2+2) , (hr*100+min));
												lcd_cursor(2,1);
												lcd_string_write("                ");
											}
											if((temp1 & 0x02)!=0x00) // EXIT button
    1e78:	80 91 1b 03 	lds	r24, 0x031B
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	82 70       	andi	r24, 0x02	; 2
    1e82:	99 27       	eor	r25, r25
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	21 f0       	breq	.+8      	; 0x1e90 <main+0xab4>
											{
												lcd_command_write(0x01); //clear screen
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
												goto menu;
    1e8e:	97 cb       	rjmp	.-2258   	; 0x15be <main+0x1e2>
												break;
											}
											i_prev=i;
    1e90:	8f 81       	ldd	r24, Y+7	; 0x07
    1e92:	98 85       	ldd	r25, Y+8	; 0x08
    1e94:	9a 87       	std	Y+10, r25	; 0x0a
    1e96:	89 87       	std	Y+9, r24	; 0x09


											}
    1e98:	1f ce       	rjmp	.-962    	; 0x1ad8 <main+0x6fc>
								}

								//ending codes to go back to menu
								menu_select = 0;
    1e9a:	1a 82       	std	Y+2, r1	; 0x02
    1e9c:	19 82       	std	Y+1, r1	; 0x01
								sub_select=0;
    1e9e:	1c 82       	std	Y+4, r1	; 0x04
    1ea0:	1b 82       	std	Y+3, r1	; 0x03
								goto menu;
    1ea2:	8d cb       	rjmp	.-2278   	; 0x15be <main+0x1e2>


						}
						//P1 MODE
							//set P0
						if(menu_select==3)
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <main+0xad4>
    1eae:	5a c2       	rjmp	.+1204   	; 0x2364 <main+0xf88>
						{

							lcd_command_write(0x01); //clear screen
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
							lcd_cursor(1,1);
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_string_write("   P1   Clock   ");
    1ebe:	81 e2       	ldi	r24, 0x21	; 33
    1ec0:	92 e0       	ldi	r25, 0x02	; 2
    1ec2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
							while(1)
							{
								lcd_cursor(2,1);
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								menu=ReadVoltage();
    1ece:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed8:	89 8f       	std	Y+25, r24	; 0x19
								temp1 = PINA;
    1eda:	89 e3       	ldi	r24, 0x39	; 57
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	fc 01       	movw	r30, r24
    1ee0:	80 81       	ld	r24, Z
    1ee2:	80 93 1b 03 	sts	0x031B, r24
								if(menu < 30)
    1ee6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ee8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1eea:	8e 31       	cpi	r24, 0x1E	; 30
    1eec:	91 05       	cpc	r25, r1
    1eee:	44 f4       	brge	.+16     	; 0x1f00 <main+0xb24>
								{
									//modify
									lcd_string_write("MODIFY    reset");
    1ef0:	81 eb       	ldi	r24, 0xB1	; 177
    1ef2:	91 e0       	ldi	r25, 0x01	; 1
    1ef4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
									sub_select=1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
								}
								if(menu > 30)
    1f00:	89 8d       	ldd	r24, Y+25	; 0x19
    1f02:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f04:	8f 31       	cpi	r24, 0x1F	; 31
    1f06:	91 05       	cpc	r25, r1
    1f08:	44 f0       	brlt	.+16     	; 0x1f1a <main+0xb3e>
								{
									//reset
									lcd_string_write("modify    RESET");
    1f0a:	81 ec       	ldi	r24, 0xC1	; 193
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
									sub_select=2;
    1f12:	82 e0       	ldi	r24, 0x02	; 2
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
								}
								if((temp1 & 0x01)!=0x00) // OK button
    1f1a:	80 91 1b 03 	lds	r24, 0x031B
    1f1e:	88 2f       	mov	r24, r24
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	81 70       	andi	r24, 0x01	; 1
    1f24:	99 27       	eor	r25, r25
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	39 f0       	breq	.+14     	; 0x1f38 <main+0xb5c>
								{
									break;
    1f2a:	00 00       	nop
								}
							}

							while(1)
							{
								if(sub_select==2) //resetting the eeprom
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	91 05       	cpc	r25, r1
    1f34:	a1 f4       	brne	.+40     	; 0x1f5e <main+0xb82>
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <main+0xb76>
								}
								if((temp1 & 0x01)!=0x00) // OK button
								{
									break;
								}
								if((temp1 & 0x02)!=0x00) // EXIT button
    1f38:	80 91 1b 03 	lds	r24, 0x031B
    1f3c:	88 2f       	mov	r24, r24
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	82 70       	andi	r24, 0x02	; 2
    1f42:	99 27       	eor	r25, r25
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	21 f0       	breq	.+8      	; 0x1f50 <main+0xb74>
								{
									lcd_command_write(0x01); //clear screen
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
									goto menu;
    1f4e:	37 cb       	rjmp	.-2450   	; 0x15be <main+0x1e2>
									break;
								}
							}
    1f50:	ba cf       	rjmp	.-140    	; 0x1ec6 <main+0xaea>

							while(1)
							{
								if(sub_select==2) //resetting the eeprom
								{
									lcd_command_write(0x01); //clear screen
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
									menu_option_P1();
    1f58:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <menu_option_P1>
									goto menu;
    1f5c:	30 cb       	rjmp	.-2464   	; 0x15be <main+0x1e2>
									break;
								}
								if(sub_select==1) //editting selected timings
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	9c 81       	ldd	r25, Y+4	; 0x04
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	91 05       	cpc	r25, r1
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <main+0xb8e>
    1f68:	f8 c1       	rjmp	.+1008   	; 0x235a <main+0xf7e>
								{
									int i,i_prev;
									int  intervals = eeprom_read_word(MODE1);
    1f6a:	8a ea       	ldi	r24, 0xAA	; 170
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    1f72:	9a a7       	std	Y+42, r25	; 0x2a
    1f74:	89 a7       	std	Y+41, r24	; 0x29


									lcd_cursor(2,1);
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
									lcd_string_write("  :         of  ");
    1f7e:	81 ed       	ldi	r24, 0xD1	; 209
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
									P1_modify:
									while(1)
										{
										i = (ReadVoltage()*0.090196078);
    1f86:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	aa 27       	eor	r26, r26
    1f90:	97 fd       	sbrc	r25, 7
    1f92:	a0 95       	com	r26
    1f94:	ba 2f       	mov	r27, r26
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__floatsisf>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	29 eb       	ldi	r18, 0xB9	; 185
    1fa4:	38 eb       	ldi	r19, 0xB8	; 184
    1fa6:	48 eb       	ldi	r20, 0xB8	; 184
    1fa8:	5d e3       	ldi	r21, 0x3D	; 61
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0e 94 99 1a 	call	0x3532	; 0x3532 <__fixsfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9c 87       	std	Y+12, r25	; 0x0c
    1fc4:	8b 87       	std	Y+11, r24	; 0x0b
										if(i<0)
    1fc6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fc8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fca:	99 23       	and	r25, r25
    1fcc:	14 f4       	brge	.+4      	; 0x1fd2 <main+0xbf6>
											i=0;
    1fce:	1c 86       	std	Y+12, r1	; 0x0c
    1fd0:	1b 86       	std	Y+11, r1	; 0x0b
										if(i>(intervals-1))
    1fd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd6:	9c 01       	movw	r18, r24
    1fd8:	21 50       	subi	r18, 0x01	; 1
    1fda:	31 09       	sbc	r19, r1
    1fdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fde:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fe0:	28 17       	cp	r18, r24
    1fe2:	39 07       	cpc	r19, r25
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <main+0xc14>
											i=intervals-1;
    1fe6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9c 87       	std	Y+12, r25	; 0x0c
    1fee:	8b 87       	std	Y+11, r24	; 0x0b
										if(i-i_prev !=0)
    1ff0:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ff2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ff4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff8:	28 17       	cp	r18, r24
    1ffa:	39 07       	cpc	r19, r25
    1ffc:	41 f0       	breq	.+16     	; 0x200e <main+0xc32>
										{
										lcd_cursor(2,1);
    1ffe:	61 e0       	ldi	r22, 0x01	; 1
    2000:	82 e0       	ldi	r24, 0x02	; 2
    2002:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_string_write("  :        ");
    2006:	82 ee       	ldi	r24, 0xE2	; 226
    2008:	91 e0       	ldi	r25, 0x01	; 1
    200a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										}
										lcd_cursor(1,1);
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_string_write("HRS:MIN   P1 T");
    2016:	82 e3       	ldi	r24, 0x32	; 50
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										lcd_number_write(i+1,10);
    201e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2020:	9c 85       	ldd	r25, Y+12	; 0x0c
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	6a e0       	ldi	r22, 0x0A	; 10
    2026:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										lcd_cursor(1,16);
    202a:	60 e1       	ldi	r22, 0x10	; 16
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_string_write(" ");
    2032:	8d ef       	ldi	r24, 0xFD	; 253
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										if(eeprom_read_word(MODE1+i*2+2)/100 <= 9)
    203a:	8b 85       	ldd	r24, Y+11	; 0x0b
    203c:	9c 85       	ldd	r25, Y+12	; 0x0c
    203e:	8a 5a       	subi	r24, 0xAA	; 170
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    204a:	88 3e       	cpi	r24, 0xE8	; 232
    204c:	f3 e0       	ldi	r31, 0x03	; 3
    204e:	9f 07       	cpc	r25, r31
    2050:	f0 f4       	brcc	.+60     	; 0x208e <main+0xcb2>
										{
											lcd_cursor(2,1);
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	82 e0       	ldi	r24, 0x02	; 2
    2056:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("0");
    205a:	86 e8       	ldi	r24, 0x86	; 134
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											lcd_number_write(eeprom_read_word(MODE1+i*2+2)/100,10);
    2062:	8b 85       	ldd	r24, Y+11	; 0x0b
    2064:	9c 85       	ldd	r25, Y+12	; 0x0c
    2066:	8a 5a       	subi	r24, 0xAA	; 170
    2068:	9f 4f       	sbci	r25, 0xFF	; 255
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    2072:	96 95       	lsr	r25
    2074:	87 95       	ror	r24
    2076:	96 95       	lsr	r25
    2078:	87 95       	ror	r24
    207a:	9c 01       	movw	r18, r24
    207c:	ab e7       	ldi	r26, 0x7B	; 123
    207e:	b4 e1       	ldi	r27, 0x14	; 20
    2080:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2084:	96 95       	lsr	r25
    2086:	87 95       	ror	r24
    2088:	6a e0       	ldi	r22, 0x0A	; 10
    208a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										}
										if(eeprom_read_word(MODE1+i*2+2)/100 > 9)
    208e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2090:	9c 85       	ldd	r25, Y+12	; 0x0c
    2092:	8a 5a       	subi	r24, 0xAA	; 170
    2094:	9f 4f       	sbci	r25, 0xFF	; 255
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    209e:	88 3e       	cpi	r24, 0xE8	; 232
    20a0:	23 e0       	ldi	r18, 0x03	; 3
    20a2:	92 07       	cpc	r25, r18
    20a4:	d0 f0       	brcs	.+52     	; 0x20da <main+0xcfe>
										{
											lcd_cursor(2,1);
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_number_write(eeprom_read_word(MODE1+i*2+2)/100,10);
    20ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    20b2:	8a 5a       	subi	r24, 0xAA	; 170
    20b4:	9f 4f       	sbci	r25, 0xFF	; 255
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    20be:	96 95       	lsr	r25
    20c0:	87 95       	ror	r24
    20c2:	96 95       	lsr	r25
    20c4:	87 95       	ror	r24
    20c6:	9c 01       	movw	r18, r24
    20c8:	ab e7       	ldi	r26, 0x7B	; 123
    20ca:	b4 e1       	ldi	r27, 0x14	; 20
    20cc:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    20d0:	96 95       	lsr	r25
    20d2:	87 95       	ror	r24
    20d4:	6a e0       	ldi	r22, 0x0A	; 10
    20d6:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										}

										if(eeprom_read_word(MODE1+i*2+2)%100 <= 9)
    20da:	8b 85       	ldd	r24, Y+11	; 0x0b
    20dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    20de:	8a 5a       	subi	r24, 0xAA	; 170
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    20ea:	ac 01       	movw	r20, r24
    20ec:	ca 01       	movw	r24, r20
    20ee:	96 95       	lsr	r25
    20f0:	87 95       	ror	r24
    20f2:	96 95       	lsr	r25
    20f4:	87 95       	ror	r24
    20f6:	9c 01       	movw	r18, r24
    20f8:	ab e7       	ldi	r26, 0x7B	; 123
    20fa:	b4 e1       	ldi	r27, 0x14	; 20
    20fc:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2100:	96 95       	lsr	r25
    2102:	87 95       	ror	r24
    2104:	64 e6       	ldi	r22, 0x64	; 100
    2106:	68 9f       	mul	r22, r24
    2108:	90 01       	movw	r18, r0
    210a:	69 9f       	mul	r22, r25
    210c:	30 0d       	add	r19, r0
    210e:	11 24       	eor	r1, r1
    2110:	ca 01       	movw	r24, r20
    2112:	82 1b       	sub	r24, r18
    2114:	93 0b       	sbc	r25, r19
    2116:	8a 30       	cpi	r24, 0x0A	; 10
    2118:	91 05       	cpc	r25, r1
    211a:	48 f5       	brcc	.+82     	; 0x216e <main+0xd92>
										{
											lcd_cursor(2,4);
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	82 e0       	ldi	r24, 0x02	; 2
    2120:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("0");
    2124:	86 e8       	ldi	r24, 0x86	; 134
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											lcd_number_write(eeprom_read_word(MODE1+i*2+2)%100,10);
    212c:	8b 85       	ldd	r24, Y+11	; 0x0b
    212e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2130:	8a 5a       	subi	r24, 0xAA	; 170
    2132:	9f 4f       	sbci	r25, 0xFF	; 255
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    213c:	ac 01       	movw	r20, r24
    213e:	ca 01       	movw	r24, r20
    2140:	96 95       	lsr	r25
    2142:	87 95       	ror	r24
    2144:	96 95       	lsr	r25
    2146:	87 95       	ror	r24
    2148:	9c 01       	movw	r18, r24
    214a:	ab e7       	ldi	r26, 0x7B	; 123
    214c:	b4 e1       	ldi	r27, 0x14	; 20
    214e:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2152:	96 95       	lsr	r25
    2154:	87 95       	ror	r24
    2156:	64 e6       	ldi	r22, 0x64	; 100
    2158:	68 9f       	mul	r22, r24
    215a:	90 01       	movw	r18, r0
    215c:	69 9f       	mul	r22, r25
    215e:	30 0d       	add	r19, r0
    2160:	11 24       	eor	r1, r1
    2162:	ca 01       	movw	r24, r20
    2164:	82 1b       	sub	r24, r18
    2166:	93 0b       	sbc	r25, r19
    2168:	6a e0       	ldi	r22, 0x0A	; 10
    216a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										}
										if(eeprom_read_word(MODE1+i*2+2)%100 > 9)
    216e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2170:	9c 85       	ldd	r25, Y+12	; 0x0c
    2172:	8a 5a       	subi	r24, 0xAA	; 170
    2174:	9f 4f       	sbci	r25, 0xFF	; 255
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    217e:	ac 01       	movw	r20, r24
    2180:	ca 01       	movw	r24, r20
    2182:	96 95       	lsr	r25
    2184:	87 95       	ror	r24
    2186:	96 95       	lsr	r25
    2188:	87 95       	ror	r24
    218a:	9c 01       	movw	r18, r24
    218c:	ab e7       	ldi	r26, 0x7B	; 123
    218e:	b4 e1       	ldi	r27, 0x14	; 20
    2190:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2194:	96 95       	lsr	r25
    2196:	87 95       	ror	r24
    2198:	64 e6       	ldi	r22, 0x64	; 100
    219a:	68 9f       	mul	r22, r24
    219c:	90 01       	movw	r18, r0
    219e:	69 9f       	mul	r22, r25
    21a0:	30 0d       	add	r19, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	ca 01       	movw	r24, r20
    21a6:	82 1b       	sub	r24, r18
    21a8:	93 0b       	sbc	r25, r19
    21aa:	8a 30       	cpi	r24, 0x0A	; 10
    21ac:	91 05       	cpc	r25, r1
    21ae:	28 f1       	brcs	.+74     	; 0x21fa <main+0xe1e>
										{
											lcd_cursor(2,4);
    21b0:	64 e0       	ldi	r22, 0x04	; 4
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_number_write(eeprom_read_word(MODE1+i*2+2)%100,10);
    21b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    21bc:	8a 5a       	subi	r24, 0xAA	; 170
    21be:	9f 4f       	sbci	r25, 0xFF	; 255
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    21c8:	ac 01       	movw	r20, r24
    21ca:	ca 01       	movw	r24, r20
    21cc:	96 95       	lsr	r25
    21ce:	87 95       	ror	r24
    21d0:	96 95       	lsr	r25
    21d2:	87 95       	ror	r24
    21d4:	9c 01       	movw	r18, r24
    21d6:	ab e7       	ldi	r26, 0x7B	; 123
    21d8:	b4 e1       	ldi	r27, 0x14	; 20
    21da:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    21de:	96 95       	lsr	r25
    21e0:	87 95       	ror	r24
    21e2:	64 e6       	ldi	r22, 0x64	; 100
    21e4:	68 9f       	mul	r22, r24
    21e6:	90 01       	movw	r18, r0
    21e8:	69 9f       	mul	r22, r25
    21ea:	30 0d       	add	r19, r0
    21ec:	11 24       	eor	r1, r1
    21ee:	ca 01       	movw	r24, r20
    21f0:	82 1b       	sub	r24, r18
    21f2:	93 0b       	sbc	r25, r19
    21f4:	6a e0       	ldi	r22, 0x0A	; 10
    21f6:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										//lcd_data_write(eeprom_read_word(MODE0+i+1));

										/*lcd_cursor(2,4);
										lcd_number_write(eeprom_read_word(MODE0+i+1)%100,10)	;*/

										if(i+1 <= 9)
    21fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    21fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    21fe:	01 96       	adiw	r24, 0x01	; 1
    2200:	8a 30       	cpi	r24, 0x0A	; 10
    2202:	91 05       	cpc	r25, r1
    2204:	24 f4       	brge	.+8      	; 0x220e <main+0xe32>
											lcd_cursor(2,11);
    2206:	6b e0       	ldi	r22, 0x0B	; 11
    2208:	82 e0       	ldi	r24, 0x02	; 2
    220a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										if(i+1 > 9)
    220e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2210:	9c 85       	ldd	r25, Y+12	; 0x0c
    2212:	01 96       	adiw	r24, 0x01	; 1
    2214:	8a 30       	cpi	r24, 0x0A	; 10
    2216:	91 05       	cpc	r25, r1
    2218:	24 f0       	brlt	.+8      	; 0x2222 <main+0xe46>
											lcd_cursor(2,10);
    221a:	6a e0       	ldi	r22, 0x0A	; 10
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_number_write(i+1,10);
    2222:	8b 85       	ldd	r24, Y+11	; 0x0b
    2224:	9c 85       	ldd	r25, Y+12	; 0x0c
    2226:	01 96       	adiw	r24, 0x01	; 1
    2228:	6a e0       	ldi	r22, 0x0A	; 10
    222a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										lcd_cursor(2,15);
    222e:	6f e0       	ldi	r22, 0x0F	; 15
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_number_write(intervals,10);
    2236:	89 a5       	ldd	r24, Y+41	; 0x29
    2238:	9a a5       	ldd	r25, Y+42	; 0x2a
    223a:	6a e0       	ldi	r22, 0x0A	; 10
    223c:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										temp1=PINA;
    2240:	89 e3       	ldi	r24, 0x39	; 57
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	fc 01       	movw	r30, r24
    2246:	80 81       	ld	r24, Z
    2248:	80 93 1b 03 	sts	0x031B, r24
										if((temp1 & 0x01)!=0x00) // OK button
    224c:	80 91 1b 03 	lds	r24, 0x031B
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	81 70       	andi	r24, 0x01	; 1
    2256:	99 27       	eor	r25, r25
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	09 f4       	brne	.+2      	; 0x225e <main+0xe82>
    225c:	6d c0       	rjmp	.+218    	; 0x2338 <main+0xf5c>
										{
											//edit the data
											lcd_cursor(2,1);
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("  :             ");
    2266:	8f ef       	ldi	r24, 0xFF	; 255
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											P1_set:
											while(1) // setting hrs
											{
												temp1=PINA;
    226e:	89 e3       	ldi	r24, 0x39	; 57
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	fc 01       	movw	r30, r24
    2274:	80 81       	ld	r24, Z
    2276:	80 93 1b 03 	sts	0x031B, r24
												hr=print_hour(2,1,0);
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	61 e0       	ldi	r22, 0x01	; 1
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_hour>
    2284:	9c 8f       	std	Y+28, r25	; 0x1c
    2286:	8b 8f       	std	Y+27, r24	; 0x1b
												if((temp1 & 0x01)!=0x00) // OK button
    2288:	80 91 1b 03 	lds	r24, 0x031B
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	81 70       	andi	r24, 0x01	; 1
    2292:	99 27       	eor	r25, r25
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	09 f0       	breq	.+2      	; 0x229a <main+0xebe>
												{
													break;
    2298:	0d c0       	rjmp	.+26     	; 0x22b4 <main+0xed8>
												}
												if((temp1 & 0x02)!=0x00) // EXIT button
    229a:	80 91 1b 03 	lds	r24, 0x031B
    229e:	88 2f       	mov	r24, r24
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	82 70       	andi	r24, 0x02	; 2
    22a4:	99 27       	eor	r25, r25
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	21 f0       	breq	.+8      	; 0x22b2 <main+0xed6>
												{
													lcd_command_write(0x01); //clear screen
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
													goto P1_modify;
    22b0:	6a ce       	rjmp	.-812    	; 0x1f86 <main+0xbaa>
													break;
												}
											}
    22b2:	dd cf       	rjmp	.-70     	; 0x226e <main+0xe92>

											while(1) // setting minutes
											{
												temp1=PINA;
    22b4:	89 e3       	ldi	r24, 0x39	; 57
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	fc 01       	movw	r30, r24
    22ba:	80 81       	ld	r24, Z
    22bc:	80 93 1b 03 	sts	0x031B, r24
												min=print_minute(2,4,0);
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	64 e0       	ldi	r22, 0x04	; 4
    22c4:	82 e0       	ldi	r24, 0x02	; 2
    22c6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    22ca:	9e 8f       	std	Y+30, r25	; 0x1e
    22cc:	8d 8f       	std	Y+29, r24	; 0x1d
												if((temp1 & 0x01)!=0x00) // OK button
    22ce:	80 91 1b 03 	lds	r24, 0x031B
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	81 70       	andi	r24, 0x01	; 1
    22d8:	99 27       	eor	r25, r25
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	01 f1       	breq	.+64     	; 0x231e <main+0xf42>
												{

													break;
    22de:	00 00       	nop
													lcd_command_write(0x01); //clear screen
													goto P1_set;
													break;
												}
											}
											eeprom_write_word((uint16_t *) (MODE1+i*2+2) , (hr*100+min));
    22e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22e4:	44 e6       	ldi	r20, 0x64	; 100
    22e6:	48 9f       	mul	r20, r24
    22e8:	90 01       	movw	r18, r0
    22ea:	49 9f       	mul	r20, r25
    22ec:	30 0d       	add	r19, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f4:	82 0f       	add	r24, r18
    22f6:	93 1f       	adc	r25, r19
    22f8:	9c 01       	movw	r18, r24
    22fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    22fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    22fe:	8a 5a       	subi	r24, 0xAA	; 170
    2300:	9f 4f       	sbci	r25, 0xFF	; 255
    2302:	88 0f       	add	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	b9 01       	movw	r22, r18
    2308:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>
											lcd_cursor(2,1);
    230c:	61 e0       	ldi	r22, 0x01	; 1
    230e:	82 e0       	ldi	r24, 0x02	; 2
    2310:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("                ");
    2314:	80 e1       	ldi	r24, 0x10	; 16
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    231c:	0d c0       	rjmp	.+26     	; 0x2338 <main+0xf5c>
												if((temp1 & 0x01)!=0x00) // OK button
												{

													break;
												}
												if((temp1 & 0x02)!=0x00) // EXIT button
    231e:	80 91 1b 03 	lds	r24, 0x031B
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	82 70       	andi	r24, 0x02	; 2
    2328:	99 27       	eor	r25, r25
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	21 f0       	breq	.+8      	; 0x2336 <main+0xf5a>
												{
													lcd_command_write(0x01); //clear screen
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
													goto P1_set;
    2334:	9c cf       	rjmp	.-200    	; 0x226e <main+0xe92>
													break;
												}
											}
    2336:	be cf       	rjmp	.-132    	; 0x22b4 <main+0xed8>
											eeprom_write_word((uint16_t *) (MODE1+i*2+2) , (hr*100+min));
											lcd_cursor(2,1);
											lcd_string_write("                ");
										}
										if((temp1 & 0x02)!=0x00) // EXIT button
    2338:	80 91 1b 03 	lds	r24, 0x031B
    233c:	88 2f       	mov	r24, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	82 70       	andi	r24, 0x02	; 2
    2342:	99 27       	eor	r25, r25
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	21 f0       	breq	.+8      	; 0x2350 <main+0xf74>
										{
											lcd_command_write(0x01); //clear screen
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
											goto menu;
    234e:	37 c9       	rjmp	.-3474   	; 0x15be <main+0x1e2>
											break;
										}
										i_prev=i;
    2350:	8b 85       	ldd	r24, Y+11	; 0x0b
    2352:	9c 85       	ldd	r25, Y+12	; 0x0c
    2354:	9e 87       	std	Y+14, r25	; 0x0e
    2356:	8d 87       	std	Y+13, r24	; 0x0d


										}
    2358:	16 ce       	rjmp	.-980    	; 0x1f86 <main+0xbaa>
							}

							//ending codes to go back to menu
							menu_select = 0;
    235a:	1a 82       	std	Y+2, r1	; 0x02
    235c:	19 82       	std	Y+1, r1	; 0x01
							sub_select=0;
    235e:	1c 82       	std	Y+4, r1	; 0x04
    2360:	1b 82       	std	Y+3, r1	; 0x03
							goto menu;
    2362:	2d c9       	rjmp	.-3494   	; 0x15be <main+0x1e2>
						}
						}
						//P2 MODE
							//set P2
						if(menu_select==4)
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	84 30       	cpi	r24, 0x04	; 4
    236a:	91 05       	cpc	r25, r1
    236c:	09 f0       	breq	.+2      	; 0x2370 <main+0xf94>
    236e:	5c c2       	rjmp	.+1208   	; 0x2828 <main+0x144c>
						{

							lcd_command_write(0x01); //clear screen
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
							lcd_cursor(1,1);
    2376:	61 e0       	ldi	r22, 0x01	; 1
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
							lcd_string_write("   P2   Clock   ");
    237e:	81 e4       	ldi	r24, 0x41	; 65
    2380:	92 e0       	ldi	r25, 0x02	; 2
    2382:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
							while(1)
							{
								lcd_cursor(2,1);
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	82 e0       	ldi	r24, 0x02	; 2
    238a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
								menu=ReadVoltage();
    238e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	9a 8f       	std	Y+26, r25	; 0x1a
    2398:	89 8f       	std	Y+25, r24	; 0x19
								temp1 = PINA;
    239a:	89 e3       	ldi	r24, 0x39	; 57
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	fc 01       	movw	r30, r24
    23a0:	80 81       	ld	r24, Z
    23a2:	80 93 1b 03 	sts	0x031B, r24
								if(menu < 30)
    23a6:	89 8d       	ldd	r24, Y+25	; 0x19
    23a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23aa:	8e 31       	cpi	r24, 0x1E	; 30
    23ac:	91 05       	cpc	r25, r1
    23ae:	44 f4       	brge	.+16     	; 0x23c0 <main+0xfe4>
								{
									//modify
									lcd_string_write("MODIFY    reset");
    23b0:	81 eb       	ldi	r24, 0xB1	; 177
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
									sub_select=1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	8b 83       	std	Y+3, r24	; 0x03
								}
								if(menu > 30)
    23c0:	89 8d       	ldd	r24, Y+25	; 0x19
    23c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23c4:	8f 31       	cpi	r24, 0x1F	; 31
    23c6:	91 05       	cpc	r25, r1
    23c8:	44 f0       	brlt	.+16     	; 0x23da <main+0xffe>
								{
									//reset
									lcd_string_write("modify    RESET");
    23ca:	81 ec       	ldi	r24, 0xC1	; 193
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
									sub_select=2;
    23d2:	82 e0       	ldi	r24, 0x02	; 2
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
								}
								if((temp1 & 0x01)!=0x00) // OK button
    23da:	80 91 1b 03 	lds	r24, 0x031B
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	81 70       	andi	r24, 0x01	; 1
    23e4:	99 27       	eor	r25, r25
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	39 f0       	breq	.+14     	; 0x23f8 <main+0x101c>
								{
									break;
    23ea:	00 00       	nop
								}
							}

							while(1)
							{
								if(sub_select==2) //resetting the eeprom
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	9c 81       	ldd	r25, Y+4	; 0x04
    23f0:	82 30       	cpi	r24, 0x02	; 2
    23f2:	91 05       	cpc	r25, r1
    23f4:	a1 f4       	brne	.+40     	; 0x241e <main+0x1042>
    23f6:	0d c0       	rjmp	.+26     	; 0x2412 <main+0x1036>
								}
								if((temp1 & 0x01)!=0x00) // OK button
								{
									break;
								}
								if((temp1 & 0x02)!=0x00) // EXIT button
    23f8:	80 91 1b 03 	lds	r24, 0x031B
    23fc:	88 2f       	mov	r24, r24
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	82 70       	andi	r24, 0x02	; 2
    2402:	99 27       	eor	r25, r25
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	21 f0       	breq	.+8      	; 0x2410 <main+0x1034>
								{
									lcd_command_write(0x01); //clear screen
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
									goto menu;
    240e:	d7 c8       	rjmp	.-3666   	; 0x15be <main+0x1e2>
									break;
								}
							}
    2410:	ba cf       	rjmp	.-140    	; 0x2386 <main+0xfaa>

							while(1)
							{
								if(sub_select==2) //resetting the eeprom
								{
									lcd_command_write(0x01); //clear screen
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
									menu_option_P2();
    2418:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <menu_option_P2>
									goto menu;
    241c:	d0 c8       	rjmp	.-3680   	; 0x15be <main+0x1e2>
									break;
								}
								if(sub_select==1) //editting selected timings
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	91 05       	cpc	r25, r1
    2426:	09 f0       	breq	.+2      	; 0x242a <main+0x104e>
    2428:	f9 c1       	rjmp	.+1010   	; 0x281c <main+0x1440>
								{
									int i,i_prev;
									int  intervals = eeprom_read_word(MODE2);
    242a:	84 e5       	ldi	r24, 0x54	; 84
    242c:	91 e0       	ldi	r25, 0x01	; 1
    242e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    2432:	9c a7       	std	Y+44, r25	; 0x2c
    2434:	8b a7       	std	Y+43, r24	; 0x2b


									lcd_cursor(2,1);
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
									lcd_string_write("  :         of  ");
    243e:	81 ed       	ldi	r24, 0xD1	; 209
    2440:	91 e0       	ldi	r25, 0x01	; 1
    2442:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
									P2_modify:
									while(1)
										{
										i = (ReadVoltage()*0.090196078);
    2446:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <ReadVoltage>
    244a:	88 2f       	mov	r24, r24
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	aa 27       	eor	r26, r26
    2450:	97 fd       	sbrc	r25, 7
    2452:	a0 95       	com	r26
    2454:	ba 2f       	mov	r27, r26
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__floatsisf>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	29 eb       	ldi	r18, 0xB9	; 185
    2464:	38 eb       	ldi	r19, 0xB8	; 184
    2466:	48 eb       	ldi	r20, 0xB8	; 184
    2468:	5d e3       	ldi	r21, 0x3D	; 61
    246a:	bc 01       	movw	r22, r24
    246c:	cd 01       	movw	r24, r26
    246e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 99 1a 	call	0x3532	; 0x3532 <__fixsfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	98 8b       	std	Y+16, r25	; 0x10
    2484:	8f 87       	std	Y+15, r24	; 0x0f
										if(i<0)
    2486:	8f 85       	ldd	r24, Y+15	; 0x0f
    2488:	98 89       	ldd	r25, Y+16	; 0x10
    248a:	99 23       	and	r25, r25
    248c:	14 f4       	brge	.+4      	; 0x2492 <main+0x10b6>
											i=0;
    248e:	18 8a       	std	Y+16, r1	; 0x10
    2490:	1f 86       	std	Y+15, r1	; 0x0f
										if(i>(intervals-1))
    2492:	8b a5       	ldd	r24, Y+43	; 0x2b
    2494:	9c a5       	ldd	r25, Y+44	; 0x2c
    2496:	9c 01       	movw	r18, r24
    2498:	21 50       	subi	r18, 0x01	; 1
    249a:	31 09       	sbc	r19, r1
    249c:	8f 85       	ldd	r24, Y+15	; 0x0f
    249e:	98 89       	ldd	r25, Y+16	; 0x10
    24a0:	28 17       	cp	r18, r24
    24a2:	39 07       	cpc	r19, r25
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <main+0x10d4>
											i=intervals-1;
    24a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	98 8b       	std	Y+16, r25	; 0x10
    24ae:	8f 87       	std	Y+15, r24	; 0x0f
										if(i-i_prev !=0)
    24b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    24b2:	38 89       	ldd	r19, Y+16	; 0x10
    24b4:	89 89       	ldd	r24, Y+17	; 0x11
    24b6:	9a 89       	ldd	r25, Y+18	; 0x12
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	41 f0       	breq	.+16     	; 0x24ce <main+0x10f2>
										{
										lcd_cursor(2,1);
    24be:	61 e0       	ldi	r22, 0x01	; 1
    24c0:	82 e0       	ldi	r24, 0x02	; 2
    24c2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_string_write("  :        ");
    24c6:	82 ee       	ldi	r24, 0xE2	; 226
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										}
										lcd_cursor(1,1);
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_string_write("HRS:MIN   P2 T");
    24d6:	82 e5       	ldi	r24, 0x52	; 82
    24d8:	92 e0       	ldi	r25, 0x02	; 2
    24da:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										lcd_number_write(i+1,10);
    24de:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e0:	98 89       	ldd	r25, Y+16	; 0x10
    24e2:	01 96       	adiw	r24, 0x01	; 1
    24e4:	6a e0       	ldi	r22, 0x0A	; 10
    24e6:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										lcd_cursor(1,16);
    24ea:	60 e1       	ldi	r22, 0x10	; 16
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_string_write(" ");
    24f2:	8d ef       	ldi	r24, 0xFD	; 253
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
										if(eeprom_read_word(MODE2+i*2+2)/100 <= 9)
    24fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    24fc:	98 89       	ldd	r25, Y+16	; 0x10
    24fe:	85 55       	subi	r24, 0x55	; 85
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    250a:	88 3e       	cpi	r24, 0xE8	; 232
    250c:	f3 e0       	ldi	r31, 0x03	; 3
    250e:	9f 07       	cpc	r25, r31
    2510:	f0 f4       	brcc	.+60     	; 0x254e <main+0x1172>
										{
											lcd_cursor(2,1);
    2512:	61 e0       	ldi	r22, 0x01	; 1
    2514:	82 e0       	ldi	r24, 0x02	; 2
    2516:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("0");
    251a:	86 e8       	ldi	r24, 0x86	; 134
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											lcd_number_write(eeprom_read_word(MODE2+i*2+2)/100,10);
    2522:	8f 85       	ldd	r24, Y+15	; 0x0f
    2524:	98 89       	ldd	r25, Y+16	; 0x10
    2526:	85 55       	subi	r24, 0x55	; 85
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    2532:	96 95       	lsr	r25
    2534:	87 95       	ror	r24
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
    253a:	9c 01       	movw	r18, r24
    253c:	ab e7       	ldi	r26, 0x7B	; 123
    253e:	b4 e1       	ldi	r27, 0x14	; 20
    2540:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2544:	96 95       	lsr	r25
    2546:	87 95       	ror	r24
    2548:	6a e0       	ldi	r22, 0x0A	; 10
    254a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										}
										if(eeprom_read_word(MODE2+i*2+2)/100 > 9)
    254e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2550:	98 89       	ldd	r25, Y+16	; 0x10
    2552:	85 55       	subi	r24, 0x55	; 85
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    255e:	88 3e       	cpi	r24, 0xE8	; 232
    2560:	23 e0       	ldi	r18, 0x03	; 3
    2562:	92 07       	cpc	r25, r18
    2564:	d0 f0       	brcs	.+52     	; 0x259a <main+0x11be>
										{
											lcd_cursor(2,1);
    2566:	61 e0       	ldi	r22, 0x01	; 1
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_number_write(eeprom_read_word(MODE2+i*2+2)/100,10);
    256e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2570:	98 89       	ldd	r25, Y+16	; 0x10
    2572:	85 55       	subi	r24, 0x55	; 85
    2574:	9f 4f       	sbci	r25, 0xFF	; 255
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    257e:	96 95       	lsr	r25
    2580:	87 95       	ror	r24
    2582:	96 95       	lsr	r25
    2584:	87 95       	ror	r24
    2586:	9c 01       	movw	r18, r24
    2588:	ab e7       	ldi	r26, 0x7B	; 123
    258a:	b4 e1       	ldi	r27, 0x14	; 20
    258c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2590:	96 95       	lsr	r25
    2592:	87 95       	ror	r24
    2594:	6a e0       	ldi	r22, 0x0A	; 10
    2596:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										}

										if(eeprom_read_word(MODE2+i*2+2)%100 <= 9)
    259a:	8f 85       	ldd	r24, Y+15	; 0x0f
    259c:	98 89       	ldd	r25, Y+16	; 0x10
    259e:	85 55       	subi	r24, 0x55	; 85
    25a0:	9f 4f       	sbci	r25, 0xFF	; 255
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    25aa:	ac 01       	movw	r20, r24
    25ac:	ca 01       	movw	r24, r20
    25ae:	96 95       	lsr	r25
    25b0:	87 95       	ror	r24
    25b2:	96 95       	lsr	r25
    25b4:	87 95       	ror	r24
    25b6:	9c 01       	movw	r18, r24
    25b8:	ab e7       	ldi	r26, 0x7B	; 123
    25ba:	b4 e1       	ldi	r27, 0x14	; 20
    25bc:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    25c0:	96 95       	lsr	r25
    25c2:	87 95       	ror	r24
    25c4:	64 e6       	ldi	r22, 0x64	; 100
    25c6:	68 9f       	mul	r22, r24
    25c8:	90 01       	movw	r18, r0
    25ca:	69 9f       	mul	r22, r25
    25cc:	30 0d       	add	r19, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	ca 01       	movw	r24, r20
    25d2:	82 1b       	sub	r24, r18
    25d4:	93 0b       	sbc	r25, r19
    25d6:	8a 30       	cpi	r24, 0x0A	; 10
    25d8:	91 05       	cpc	r25, r1
    25da:	48 f5       	brcc	.+82     	; 0x262e <main+0x1252>
										{
											lcd_cursor(2,4);
    25dc:	64 e0       	ldi	r22, 0x04	; 4
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("0");
    25e4:	86 e8       	ldi	r24, 0x86	; 134
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											lcd_number_write(eeprom_read_word(MODE2+i*2+2)%100,10);
    25ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ee:	98 89       	ldd	r25, Y+16	; 0x10
    25f0:	85 55       	subi	r24, 0x55	; 85
    25f2:	9f 4f       	sbci	r25, 0xFF	; 255
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    25fc:	ac 01       	movw	r20, r24
    25fe:	ca 01       	movw	r24, r20
    2600:	96 95       	lsr	r25
    2602:	87 95       	ror	r24
    2604:	96 95       	lsr	r25
    2606:	87 95       	ror	r24
    2608:	9c 01       	movw	r18, r24
    260a:	ab e7       	ldi	r26, 0x7B	; 123
    260c:	b4 e1       	ldi	r27, 0x14	; 20
    260e:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2612:	96 95       	lsr	r25
    2614:	87 95       	ror	r24
    2616:	64 e6       	ldi	r22, 0x64	; 100
    2618:	68 9f       	mul	r22, r24
    261a:	90 01       	movw	r18, r0
    261c:	69 9f       	mul	r22, r25
    261e:	30 0d       	add	r19, r0
    2620:	11 24       	eor	r1, r1
    2622:	ca 01       	movw	r24, r20
    2624:	82 1b       	sub	r24, r18
    2626:	93 0b       	sbc	r25, r19
    2628:	6a e0       	ldi	r22, 0x0A	; 10
    262a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										}
										if(eeprom_read_word(MODE2+i*2+2)%100 > 9)
    262e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2630:	98 89       	ldd	r25, Y+16	; 0x10
    2632:	85 55       	subi	r24, 0x55	; 85
    2634:	9f 4f       	sbci	r25, 0xFF	; 255
    2636:	88 0f       	add	r24, r24
    2638:	99 1f       	adc	r25, r25
    263a:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    263e:	ac 01       	movw	r20, r24
    2640:	ca 01       	movw	r24, r20
    2642:	96 95       	lsr	r25
    2644:	87 95       	ror	r24
    2646:	96 95       	lsr	r25
    2648:	87 95       	ror	r24
    264a:	9c 01       	movw	r18, r24
    264c:	ab e7       	ldi	r26, 0x7B	; 123
    264e:	b4 e1       	ldi	r27, 0x14	; 20
    2650:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2654:	96 95       	lsr	r25
    2656:	87 95       	ror	r24
    2658:	64 e6       	ldi	r22, 0x64	; 100
    265a:	68 9f       	mul	r22, r24
    265c:	90 01       	movw	r18, r0
    265e:	69 9f       	mul	r22, r25
    2660:	30 0d       	add	r19, r0
    2662:	11 24       	eor	r1, r1
    2664:	ca 01       	movw	r24, r20
    2666:	82 1b       	sub	r24, r18
    2668:	93 0b       	sbc	r25, r19
    266a:	8a 30       	cpi	r24, 0x0A	; 10
    266c:	91 05       	cpc	r25, r1
    266e:	28 f1       	brcs	.+74     	; 0x26ba <main+0x12de>
										{
											lcd_cursor(2,4);
    2670:	64 e0       	ldi	r22, 0x04	; 4
    2672:	82 e0       	ldi	r24, 0x02	; 2
    2674:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_number_write(eeprom_read_word(MODE2+i*2+2)%100,10);
    2678:	8f 85       	ldd	r24, Y+15	; 0x0f
    267a:	98 89       	ldd	r25, Y+16	; 0x10
    267c:	85 55       	subi	r24, 0x55	; 85
    267e:	9f 4f       	sbci	r25, 0xFF	; 255
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    2688:	ac 01       	movw	r20, r24
    268a:	ca 01       	movw	r24, r20
    268c:	96 95       	lsr	r25
    268e:	87 95       	ror	r24
    2690:	96 95       	lsr	r25
    2692:	87 95       	ror	r24
    2694:	9c 01       	movw	r18, r24
    2696:	ab e7       	ldi	r26, 0x7B	; 123
    2698:	b4 e1       	ldi	r27, 0x14	; 20
    269a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    269e:	96 95       	lsr	r25
    26a0:	87 95       	ror	r24
    26a2:	64 e6       	ldi	r22, 0x64	; 100
    26a4:	68 9f       	mul	r22, r24
    26a6:	90 01       	movw	r18, r0
    26a8:	69 9f       	mul	r22, r25
    26aa:	30 0d       	add	r19, r0
    26ac:	11 24       	eor	r1, r1
    26ae:	ca 01       	movw	r24, r20
    26b0:	82 1b       	sub	r24, r18
    26b2:	93 0b       	sbc	r25, r19
    26b4:	6a e0       	ldi	r22, 0x0A	; 10
    26b6:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										//lcd_data_write(eeprom_read_word(MODE0+i+1));

										/*lcd_cursor(2,4);
										lcd_number_write(eeprom_read_word(MODE0+i+1)%100,10)	;*/

										if(i+1 <= 9)
    26ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    26bc:	98 89       	ldd	r25, Y+16	; 0x10
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	8a 30       	cpi	r24, 0x0A	; 10
    26c2:	91 05       	cpc	r25, r1
    26c4:	24 f4       	brge	.+8      	; 0x26ce <main+0x12f2>
											lcd_cursor(2,11);
    26c6:	6b e0       	ldi	r22, 0x0B	; 11
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										if(i+1 > 9)
    26ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d0:	98 89       	ldd	r25, Y+16	; 0x10
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	8a 30       	cpi	r24, 0x0A	; 10
    26d6:	91 05       	cpc	r25, r1
    26d8:	24 f0       	brlt	.+8      	; 0x26e2 <main+0x1306>
											lcd_cursor(2,10);
    26da:	6a e0       	ldi	r22, 0x0A	; 10
    26dc:	82 e0       	ldi	r24, 0x02	; 2
    26de:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_number_write(i+1,10);
    26e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e4:	98 89       	ldd	r25, Y+16	; 0x10
    26e6:	01 96       	adiw	r24, 0x01	; 1
    26e8:	6a e0       	ldi	r22, 0x0A	; 10
    26ea:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										lcd_cursor(2,15);
    26ee:	6f e0       	ldi	r22, 0x0F	; 15
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
										lcd_number_write(intervals,10);
    26f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26fa:	6a e0       	ldi	r22, 0x0A	; 10
    26fc:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
										temp1=PINA;
    2700:	89 e3       	ldi	r24, 0x39	; 57
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	fc 01       	movw	r30, r24
    2706:	80 81       	ld	r24, Z
    2708:	80 93 1b 03 	sts	0x031B, r24
										if((temp1 & 0x01)!=0x00) // OK button
    270c:	80 91 1b 03 	lds	r24, 0x031B
    2710:	88 2f       	mov	r24, r24
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	81 70       	andi	r24, 0x01	; 1
    2716:	99 27       	eor	r25, r25
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	09 f4       	brne	.+2      	; 0x271e <main+0x1342>
    271c:	6d c0       	rjmp	.+218    	; 0x27f8 <main+0x141c>
										{
											//edit the data
											lcd_cursor(2,1);
    271e:	61 e0       	ldi	r22, 0x01	; 1
    2720:	82 e0       	ldi	r24, 0x02	; 2
    2722:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("  :             ");
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	91 e0       	ldi	r25, 0x01	; 1
    272a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
											P2_set:
											while(1) // setting hrs
											{
												temp1=PINA;
    272e:	89 e3       	ldi	r24, 0x39	; 57
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	fc 01       	movw	r30, r24
    2734:	80 81       	ld	r24, Z
    2736:	80 93 1b 03 	sts	0x031B, r24
												hr=print_hour(2,1,0);
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	61 e0       	ldi	r22, 0x01	; 1
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_hour>
    2744:	9c 8f       	std	Y+28, r25	; 0x1c
    2746:	8b 8f       	std	Y+27, r24	; 0x1b
												if((temp1 & 0x01)!=0x00) // OK button
    2748:	80 91 1b 03 	lds	r24, 0x031B
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	81 70       	andi	r24, 0x01	; 1
    2752:	99 27       	eor	r25, r25
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	09 f0       	breq	.+2      	; 0x275a <main+0x137e>
												{
													break;
    2758:	0d c0       	rjmp	.+26     	; 0x2774 <main+0x1398>
												}
												if((temp1 & 0x02)!=0x00) // EXIT button
    275a:	80 91 1b 03 	lds	r24, 0x031B
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	82 70       	andi	r24, 0x02	; 2
    2764:	99 27       	eor	r25, r25
    2766:	00 97       	sbiw	r24, 0x00	; 0
    2768:	21 f0       	breq	.+8      	; 0x2772 <main+0x1396>
												{
													lcd_command_write(0x01); //clear screen
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
													goto P2_modify;
    2770:	6a ce       	rjmp	.-812    	; 0x2446 <main+0x106a>
													break;
												}
											}
    2772:	dd cf       	rjmp	.-70     	; 0x272e <main+0x1352>

											while(1) // setting minutes
											{
												temp1=PINA;
    2774:	89 e3       	ldi	r24, 0x39	; 57
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	fc 01       	movw	r30, r24
    277a:	80 81       	ld	r24, Z
    277c:	80 93 1b 03 	sts	0x031B, r24
												min=print_minute(2,4,0);
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	64 e0       	ldi	r22, 0x04	; 4
    2784:	82 e0       	ldi	r24, 0x02	; 2
    2786:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    278a:	9e 8f       	std	Y+30, r25	; 0x1e
    278c:	8d 8f       	std	Y+29, r24	; 0x1d
												if((temp1 & 0x01)!=0x00) // OK button
    278e:	80 91 1b 03 	lds	r24, 0x031B
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	81 70       	andi	r24, 0x01	; 1
    2798:	99 27       	eor	r25, r25
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	01 f1       	breq	.+64     	; 0x27de <main+0x1402>
												{

													break;
    279e:	00 00       	nop
													lcd_command_write(0x01); //clear screen
													goto P2_set;
													break;
												}
											}
											eeprom_write_word((uint16_t *) (MODE2+i*2+2) , (hr*100+min));
    27a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a4:	44 e6       	ldi	r20, 0x64	; 100
    27a6:	48 9f       	mul	r20, r24
    27a8:	90 01       	movw	r18, r0
    27aa:	49 9f       	mul	r20, r25
    27ac:	30 0d       	add	r19, r0
    27ae:	11 24       	eor	r1, r1
    27b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	9c 01       	movw	r18, r24
    27ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    27bc:	98 89       	ldd	r25, Y+16	; 0x10
    27be:	85 55       	subi	r24, 0x55	; 85
    27c0:	9f 4f       	sbci	r25, 0xFF	; 255
    27c2:	88 0f       	add	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	b9 01       	movw	r22, r18
    27c8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>
											lcd_cursor(2,1);
    27cc:	61 e0       	ldi	r22, 0x01	; 1
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
											lcd_string_write("                ");
    27d4:	80 e1       	ldi	r24, 0x10	; 16
    27d6:	92 e0       	ldi	r25, 0x02	; 2
    27d8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    27dc:	0d c0       	rjmp	.+26     	; 0x27f8 <main+0x141c>
												if((temp1 & 0x01)!=0x00) // OK button
												{

													break;
												}
												if((temp1 & 0x02)!=0x00) // EXIT button
    27de:	80 91 1b 03 	lds	r24, 0x031B
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	82 70       	andi	r24, 0x02	; 2
    27e8:	99 27       	eor	r25, r25
    27ea:	00 97       	sbiw	r24, 0x00	; 0
    27ec:	21 f0       	breq	.+8      	; 0x27f6 <main+0x141a>
												{
													lcd_command_write(0x01); //clear screen
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
													goto P2_set;
    27f4:	9c cf       	rjmp	.-200    	; 0x272e <main+0x1352>
													break;
												}
											}
    27f6:	be cf       	rjmp	.-132    	; 0x2774 <main+0x1398>
											eeprom_write_word((uint16_t *) (MODE2+i*2+2) , (hr*100+min));
											lcd_cursor(2,1);
											lcd_string_write("                ");
										}
										if((temp1 & 0x02)!=0x00) // EXIT button
    27f8:	80 91 1b 03 	lds	r24, 0x031B
    27fc:	88 2f       	mov	r24, r24
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	82 70       	andi	r24, 0x02	; 2
    2802:	99 27       	eor	r25, r25
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	29 f0       	breq	.+10     	; 0x2812 <main+0x1436>
										{
											lcd_command_write(0x01); //clear screen
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
											goto menu;
    280e:	0c 94 df 0a 	jmp	0x15be	; 0x15be <main+0x1e2>
											break;
										}
										i_prev=i;
    2812:	8f 85       	ldd	r24, Y+15	; 0x0f
    2814:	98 89       	ldd	r25, Y+16	; 0x10
    2816:	9a 8b       	std	Y+18, r25	; 0x12
    2818:	89 8b       	std	Y+17, r24	; 0x11


										}
    281a:	15 ce       	rjmp	.-982    	; 0x2446 <main+0x106a>
							}

							//ending codes to go back to menu
							menu_select = 0;
    281c:	1a 82       	std	Y+2, r1	; 0x02
    281e:	19 82       	std	Y+1, r1	; 0x01
							sub_select=0;
    2820:	1c 82       	std	Y+4, r1	; 0x04
    2822:	1b 82       	std	Y+3, r1	; 0x03
							goto menu;
    2824:	0c 94 df 0a 	jmp	0x15be	; 0x15be <main+0x1e2>
						}
						}

						lcd_command_write(0x01); //clear screen
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
						break;
    282e:	00 00       	nop
					}

					if((temp1 & 0x02)!=0x00) // EXIT button
    2830:	80 91 1b 03 	lds	r24, 0x031B
    2834:	88 2f       	mov	r24, r24
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	82 70       	andi	r24, 0x02	; 2
    283a:	99 27       	eor	r25, r25
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	21 f0       	breq	.+8      	; 0x2848 <main+0x146c>
					{
						lcd_command_write(0x01); //clear screen
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
						break;
    2846:	02 c0       	rjmp	.+4      	; 0x284c <main+0x1470>
					}

				}


			}
    2848:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <main+0x1f2>
			}
			// else { // RUN MODE: either P0(normal routine); P1(exam routine); P2/Intervals?(custom routine
				if((temp1 & 0x10)!=0x00)
    284c:	80 91 1b 03 	lds	r24, 0x031B
    2850:	88 2f       	mov	r24, r24
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	80 71       	andi	r24, 0x10	; 16
    2856:	99 27       	eor	r25, r25
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	11 f0       	breq	.+4      	; 0x2860 <main+0x1484>
				{
					menu_option_runP1();
    285c:	0e 94 46 18 	call	0x308c	; 0x308c <menu_option_runP1>
				}
				if((temp1 & 0x20)!=0x00)
    2860:	80 91 1b 03 	lds	r24, 0x031B
    2864:	88 2f       	mov	r24, r24
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	80 72       	andi	r24, 0x20	; 32
    286a:	99 27       	eor	r25, r25
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	11 f0       	breq	.+4      	; 0x2874 <main+0x1498>
				{
					menu_option_runP2();
    2870:	0e 94 52 19 	call	0x32a4	; 0x32a4 <menu_option_runP2>
				}
				if(((temp1 & 0x10)==0x00) && ((temp1 & 0x20)==0x00))
    2874:	80 91 1b 03 	lds	r24, 0x031B
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	80 71       	andi	r24, 0x10	; 16
    287e:	99 27       	eor	r25, r25
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	61 f4       	brne	.+24     	; 0x289c <main+0x14c0>
    2884:	80 91 1b 03 	lds	r24, 0x031B
    2888:	88 2f       	mov	r24, r24
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	80 72       	andi	r24, 0x20	; 32
    288e:	99 27       	eor	r25, r25
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	21 f4       	brne	.+8      	; 0x289c <main+0x14c0>
				{
					menu_option_runP0();
    2894:	0e 94 34 17 	call	0x2e68	; 0x2e68 <menu_option_runP0>
				//bell_H(h);
				//bell_S(s);

		//	}

	} //while loop
    2898:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <main+0x1bc>
    289c:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <main+0x1bc>

000028a0 <menu_option_P0>:
}//main loop



int menu_option_P0(void)// normal mode to be changed to custom mode
{
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <menu_option_P0+0x6>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <menu_option_P0+0x8>
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
	//P0

	int intervals;

	lcd_command_write(0x01); //clear screen
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	lcd_cursor(1,1);
    28b2:	61 e0       	ldi	r22, 0x01	; 1
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>

	lcd_string_write("No. of timings?");
    28ba:	81 e9       	ldi	r24, 0x91	; 145
    28bc:	92 e0       	ldi	r25, 0x02	; 2
    28be:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	lcd_cursor(2,1);
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	82 e0       	ldi	r24, 0x02	; 2
    28c6:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>

	while(1)
	{
		intervals = print_minute(2,1,0);
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
		temp1=PINA;
    28d8:	89 e3       	ldi	r24, 0x39	; 57
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	fc 01       	movw	r30, r24
    28de:	80 81       	ld	r24, Z
    28e0:	80 93 1b 03 	sts	0x031B, r24

		if((temp1 & 0x01)!=0x00) // OK button
    28e4:	80 91 1b 03 	lds	r24, 0x031B
    28e8:	88 2f       	mov	r24, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	81 70       	andi	r24, 0x01	; 1
    28ee:	99 27       	eor	r25, r25
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	71 f0       	breq	.+28     	; 0x2910 <menu_option_P0+0x70>
		{
			lcd_command_write(0x01); //clear screen
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
			break;
    28fa:	00 00       	nop
			return 0;
		}

	}

	eeprom_write_word((uint16_t *) (MODE0) , intervals);
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	bc 01       	movw	r22, r24
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>

	int i;
	for(i=0; i<intervals; i++)
    290a:	1a 82       	std	Y+2, r1	; 0x02
    290c:	19 82       	std	Y+1, r1	; 0x01
    290e:	af c0       	rjmp	.+350    	; 0x2a6e <menu_option_P0+0x1ce>
		{
			lcd_command_write(0x01); //clear screen
			break;
		}

		if((temp1 & 0x02)!=0x00) // EXIT button
    2910:	80 91 1b 03 	lds	r24, 0x031B
    2914:	88 2f       	mov	r24, r24
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	82 70       	andi	r24, 0x02	; 2
    291a:	99 27       	eor	r25, r25
    291c:	00 97       	sbiw	r24, 0x00	; 0
    291e:	31 f0       	breq	.+12     	; 0x292c <menu_option_P0+0x8c>
		{
			lcd_command_write(0x01); //clear screen
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
			return 0;
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a9 c0       	rjmp	.+338    	; 0x2a7e <menu_option_P0+0x1de>
		}

	}
    292c:	ce cf       	rjmp	.-100    	; 0x28ca <menu_option_P0+0x2a>

	int i;
	for(i=0; i<intervals; i++)
	{
		clock:
		lcd_cursor(1,1);
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("HRS:min   P0 T");
    2936:	81 ea       	ldi	r24, 0xA1	; 161
    2938:	92 e0       	ldi	r25, 0x02	; 2
    293a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
		lcd_number_write(i+1,10);
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	6a e0       	ldi	r22, 0x0A	; 10
    2946:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		lcd_cursor(2,1);
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("  :         of  ");
    2952:	81 ed       	ldi	r24, 0xD1	; 209
    2954:	91 e0       	ldi	r25, 0x01	; 1
    2956:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
		lcd_cursor(2,11);
    295a:	6b e0       	ldi	r22, 0x0B	; 11
    295c:	82 e0       	ldi	r24, 0x02	; 2
    295e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_number_write(i+1,10);
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	6a e0       	ldi	r22, 0x0A	; 10
    296a:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		lcd_cursor(2,15);
    296e:	6f e0       	ldi	r22, 0x0F	; 15
    2970:	82 e0       	ldi	r24, 0x02	; 2
    2972:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_number_write(intervals,10);
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	6a e0       	ldi	r22, 0x0A	; 10
    297c:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>



		while(1) // setting hrs
		{
			temp1=PINA;
    2980:	89 e3       	ldi	r24, 0x39	; 57
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	fc 01       	movw	r30, r24
    2986:	80 81       	ld	r24, Z
    2988:	80 93 1b 03 	sts	0x031B, r24
			hr=print_hour(2,1,0);
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_hour>
    2996:	80 93 1e 03 	sts	0x031E, r24

			if((temp1 & 0x01)!=0x00) // OK button
    299a:	80 91 1b 03 	lds	r24, 0x031B
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	81 70       	andi	r24, 0x01	; 1
    29a4:	99 27       	eor	r25, r25
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	51 f0       	breq	.+20     	; 0x29be <menu_option_P0+0x11e>
			{
				break;
    29aa:	00 00       	nop
				return 0;
				break;
			}
		}

		lcd_cursor(1,1);
    29ac:	61 e0       	ldi	r22, 0x01	; 1
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("hrs:MIN   P0 T");
    29b4:	80 eb       	ldi	r24, 0xB0	; 176
    29b6:	92 e0       	ldi	r25, 0x02	; 2
    29b8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <menu_option_P0+0x13c>
			if((temp1 & 0x01)!=0x00) // OK button
			{
				break;
			}

			if((temp1 & 0x02)!=0x00) // EXIT button
    29be:	80 91 1b 03 	lds	r24, 0x031B
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	82 70       	andi	r24, 0x02	; 2
    29c8:	99 27       	eor	r25, r25
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	31 f0       	breq	.+12     	; 0x29da <menu_option_P0+0x13a>
			{
				lcd_command_write(0x01); //clear screen
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
				return 0;
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	52 c0       	rjmp	.+164    	; 0x2a7e <menu_option_P0+0x1de>
				break;
			}
		}
    29da:	d2 cf       	rjmp	.-92     	; 0x2980 <menu_option_P0+0xe0>
		lcd_cursor(1,1);
		lcd_string_write("hrs:MIN   P0 T");

		while(1) // setting minutes
		{
			temp1=PINA;
    29dc:	89 e3       	ldi	r24, 0x39	; 57
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	fc 01       	movw	r30, r24
    29e2:	80 81       	ld	r24, Z
    29e4:	80 93 1b 03 	sts	0x031B, r24
			min=print_minute(2,4,0);
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	64 e0       	ldi	r22, 0x04	; 4
    29ec:	82 e0       	ldi	r24, 0x02	; 2
    29ee:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    29f2:	80 93 1c 03 	sts	0x031C, r24

			if((temp1 & 0x01)!=0x00) // OK button
    29f6:	80 91 1b 03 	lds	r24, 0x031B
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	81 70       	andi	r24, 0x01	; 1
    2a00:	99 27       	eor	r25, r25
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	39 f1       	breq	.+78     	; 0x2a54 <menu_option_P0+0x1b4>
			{
				break;
    2a06:	00 00       	nop
				lcd_command_write(0x01); //clear screen
				goto clock;
				break;
			}
		}
		eeprom_write_word((uint16_t *) (MODE0+i*2+2) , (hr*100+min));
    2a08:	80 91 1e 03 	lds	r24, 0x031E
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	44 e6       	ldi	r20, 0x64	; 100
    2a12:	48 9f       	mul	r20, r24
    2a14:	90 01       	movw	r18, r0
    2a16:	49 9f       	mul	r20, r25
    2a18:	30 0d       	add	r19, r0
    2a1a:	11 24       	eor	r1, r1
    2a1c:	80 91 1c 03 	lds	r24, 0x031C
    2a20:	88 2f       	mov	r24, r24
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	82 0f       	add	r24, r18
    2a26:	93 1f       	adc	r25, r19
    2a28:	9c 01       	movw	r18, r24
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	88 0f       	add	r24, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	b9 01       	movw	r22, r18
    2a36:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>
		lcd_cursor(2,9);
    2a3a:	69 e0       	ldi	r22, 0x09	; 9
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
//		lcd_number_write((MODE1+i*2),10);
//		_delay_ms(100);
		lcd_command_write(0x01); //clear screen
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	}

	eeprom_write_word((uint16_t *) (MODE0) , intervals);

	int i;
	for(i=0; i<intervals; i++)
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	01 96       	adiw	r24, 0x01	; 1
    2a4e:	9a 83       	std	Y+2, r25	; 0x02
    2a50:	89 83       	std	Y+1, r24	; 0x01
    2a52:	0d c0       	rjmp	.+26     	; 0x2a6e <menu_option_P0+0x1ce>
			if((temp1 & 0x01)!=0x00) // OK button
			{
				break;
			}

			if((temp1 & 0x02)!=0x00) // EXIT button
    2a54:	80 91 1b 03 	lds	r24, 0x031B
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	82 70       	andi	r24, 0x02	; 2
    2a5e:	99 27       	eor	r25, r25
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	21 f0       	breq	.+8      	; 0x2a6c <menu_option_P0+0x1cc>
			{
				lcd_command_write(0x01); //clear screen
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
				goto clock;
    2a6a:	61 cf       	rjmp	.-318    	; 0x292e <menu_option_P0+0x8e>
				break;
			}
		}
    2a6c:	b7 cf       	rjmp	.-146    	; 0x29dc <menu_option_P0+0x13c>
	}

	eeprom_write_word((uint16_t *) (MODE0) , intervals);

	int i;
	for(i=0; i<intervals; i++)
    2a6e:	29 81       	ldd	r18, Y+1	; 0x01
    2a70:	3a 81       	ldd	r19, Y+2	; 0x02
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	28 17       	cp	r18, r24
    2a78:	39 07       	cpc	r19, r25
    2a7a:	0c f4       	brge	.+2      	; 0x2a7e <menu_option_P0+0x1de>
    2a7c:	58 cf       	rjmp	.-336    	; 0x292e <menu_option_P0+0x8e>
//		_delay_ms(100);
		lcd_command_write(0x01); //clear screen

	}

}
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	08 95       	ret

00002a8c <menu_option_P1>:

int menu_option_P1(void)// normal mode to be changed to custom mode
{
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <menu_option_P1+0x6>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <menu_option_P1+0x8>
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
	//P0

	int intervals;

	lcd_command_write(0x01); //clear screen
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	lcd_cursor(1,1);
    2a9e:	61 e0       	ldi	r22, 0x01	; 1
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>

	lcd_string_write("No. of timings?");
    2aa6:	81 e9       	ldi	r24, 0x91	; 145
    2aa8:	92 e0       	ldi	r25, 0x02	; 2
    2aaa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	lcd_cursor(2,1);
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	82 e0       	ldi	r24, 0x02	; 2
    2ab2:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>

	while(1)
	{
		intervals = print_minute(2,1,0);
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    2ac0:	9c 83       	std	Y+4, r25	; 0x04
    2ac2:	8b 83       	std	Y+3, r24	; 0x03
		temp1=PINA;
    2ac4:	89 e3       	ldi	r24, 0x39	; 57
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	fc 01       	movw	r30, r24
    2aca:	80 81       	ld	r24, Z
    2acc:	80 93 1b 03 	sts	0x031B, r24

		if((temp1 & 0x01)!=0x00) // OK button
    2ad0:	80 91 1b 03 	lds	r24, 0x031B
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	81 70       	andi	r24, 0x01	; 1
    2ada:	99 27       	eor	r25, r25
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	71 f0       	breq	.+28     	; 0x2afc <menu_option_P1+0x70>
		{
			lcd_command_write(0x01); //clear screen
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
			break;
    2ae6:	00 00       	nop
			return 0;
		}

	}

	eeprom_write_word((uint16_t *) (MODE1) , intervals);
    2ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aea:	9c 81       	ldd	r25, Y+4	; 0x04
    2aec:	bc 01       	movw	r22, r24
    2aee:	8a ea       	ldi	r24, 0xAA	; 170
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>

	int i;
	for(i=0; i<intervals; i++)
    2af6:	1a 82       	std	Y+2, r1	; 0x02
    2af8:	19 82       	std	Y+1, r1	; 0x01
    2afa:	b0 c0       	rjmp	.+352    	; 0x2c5c <menu_option_P1+0x1d0>
		{
			lcd_command_write(0x01); //clear screen
			break;
		}

		if((temp1 & 0x02)!=0x00) // EXIT button
    2afc:	80 91 1b 03 	lds	r24, 0x031B
    2b00:	88 2f       	mov	r24, r24
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	82 70       	andi	r24, 0x02	; 2
    2b06:	99 27       	eor	r25, r25
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	31 f0       	breq	.+12     	; 0x2b18 <menu_option_P1+0x8c>
		{
			lcd_command_write(0x01); //clear screen
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
			return 0;
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	aa c0       	rjmp	.+340    	; 0x2c6c <menu_option_P1+0x1e0>
		}

	}
    2b18:	ce cf       	rjmp	.-100    	; 0x2ab6 <menu_option_P1+0x2a>

	int i;
	for(i=0; i<intervals; i++)
	{
		clock:
		lcd_cursor(1,1);
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("HRS:min   P1 T");
    2b22:	8f eb       	ldi	r24, 0xBF	; 191
    2b24:	92 e0       	ldi	r25, 0x02	; 2
    2b26:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
		lcd_number_write(i+1,10);
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	01 96       	adiw	r24, 0x01	; 1
    2b30:	6a e0       	ldi	r22, 0x0A	; 10
    2b32:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		lcd_cursor(2,1);
    2b36:	61 e0       	ldi	r22, 0x01	; 1
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("  :         of  ");
    2b3e:	81 ed       	ldi	r24, 0xD1	; 209
    2b40:	91 e0       	ldi	r25, 0x01	; 1
    2b42:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
		lcd_cursor(2,11);
    2b46:	6b e0       	ldi	r22, 0x0B	; 11
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_number_write(i+1,10);
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	9a 81       	ldd	r25, Y+2	; 0x02
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	6a e0       	ldi	r22, 0x0A	; 10
    2b56:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		lcd_cursor(2,15);
    2b5a:	6f e0       	ldi	r22, 0x0F	; 15
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_number_write(intervals,10);
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	9c 81       	ldd	r25, Y+4	; 0x04
    2b66:	6a e0       	ldi	r22, 0x0A	; 10
    2b68:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>



		while(1) // setting hrs
		{
			temp1=PINA;
    2b6c:	89 e3       	ldi	r24, 0x39	; 57
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	fc 01       	movw	r30, r24
    2b72:	80 81       	ld	r24, Z
    2b74:	80 93 1b 03 	sts	0x031B, r24
			hr=print_hour(2,1,0);
    2b78:	40 e0       	ldi	r20, 0x00	; 0
    2b7a:	61 e0       	ldi	r22, 0x01	; 1
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_hour>
    2b82:	80 93 1e 03 	sts	0x031E, r24

			if((temp1 & 0x01)!=0x00) // OK button
    2b86:	80 91 1b 03 	lds	r24, 0x031B
    2b8a:	88 2f       	mov	r24, r24
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	81 70       	andi	r24, 0x01	; 1
    2b90:	99 27       	eor	r25, r25
    2b92:	00 97       	sbiw	r24, 0x00	; 0
    2b94:	51 f0       	breq	.+20     	; 0x2baa <menu_option_P1+0x11e>
			{
				break;
    2b96:	00 00       	nop
				return 0;
				break;
			}
		}

		lcd_cursor(1,1);
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("hrs:MIN   P1 T");
    2ba0:	8e ec       	ldi	r24, 0xCE	; 206
    2ba2:	92 e0       	ldi	r25, 0x02	; 2
    2ba4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    2ba8:	0f c0       	rjmp	.+30     	; 0x2bc8 <menu_option_P1+0x13c>
			if((temp1 & 0x01)!=0x00) // OK button
			{
				break;
			}

			if((temp1 & 0x02)!=0x00) // EXIT button
    2baa:	80 91 1b 03 	lds	r24, 0x031B
    2bae:	88 2f       	mov	r24, r24
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	82 70       	andi	r24, 0x02	; 2
    2bb4:	99 27       	eor	r25, r25
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	31 f0       	breq	.+12     	; 0x2bc6 <menu_option_P1+0x13a>
			{
				lcd_command_write(0x01); //clear screen
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
				return 0;
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	53 c0       	rjmp	.+166    	; 0x2c6c <menu_option_P1+0x1e0>
				break;
			}
		}
    2bc6:	d2 cf       	rjmp	.-92     	; 0x2b6c <menu_option_P1+0xe0>
		lcd_cursor(1,1);
		lcd_string_write("hrs:MIN   P1 T");

		while(1) // setting minutes
		{
			temp1=PINA;
    2bc8:	89 e3       	ldi	r24, 0x39	; 57
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	fc 01       	movw	r30, r24
    2bce:	80 81       	ld	r24, Z
    2bd0:	80 93 1b 03 	sts	0x031B, r24
			min=print_minute(2,4,0);
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	64 e0       	ldi	r22, 0x04	; 4
    2bd8:	82 e0       	ldi	r24, 0x02	; 2
    2bda:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    2bde:	80 93 1c 03 	sts	0x031C, r24

			if((temp1 & 0x01)!=0x00) // OK button
    2be2:	80 91 1b 03 	lds	r24, 0x031B
    2be6:	88 2f       	mov	r24, r24
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	81 70       	andi	r24, 0x01	; 1
    2bec:	99 27       	eor	r25, r25
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	41 f1       	breq	.+80     	; 0x2c42 <menu_option_P1+0x1b6>
			{
				break;
    2bf2:	00 00       	nop
				lcd_command_write(0x01); //clear screen
				goto clock;
				break;
			}
		}
		eeprom_write_word((uint16_t *) (MODE1+i*2+2) , (hr*100+min));
    2bf4:	80 91 1e 03 	lds	r24, 0x031E
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	44 e6       	ldi	r20, 0x64	; 100
    2bfe:	48 9f       	mul	r20, r24
    2c00:	90 01       	movw	r18, r0
    2c02:	49 9f       	mul	r20, r25
    2c04:	30 0d       	add	r19, r0
    2c06:	11 24       	eor	r1, r1
    2c08:	80 91 1c 03 	lds	r24, 0x031C
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	82 0f       	add	r24, r18
    2c12:	93 1f       	adc	r25, r19
    2c14:	9c 01       	movw	r18, r24
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1a:	8a 5a       	subi	r24, 0xAA	; 170
    2c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	b9 01       	movw	r22, r18
    2c24:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>
		lcd_cursor(2,9);
    2c28:	69 e0       	ldi	r22, 0x09	; 9
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
//		lcd_number_write((MODE1+i*2),10);
//		_delay_ms(100);
		lcd_command_write(0x01); //clear screen
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	}

	eeprom_write_word((uint16_t *) (MODE1) , intervals);

	int i;
	for(i=0; i<intervals; i++)
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	9a 83       	std	Y+2, r25	; 0x02
    2c3e:	89 83       	std	Y+1, r24	; 0x01
    2c40:	0d c0       	rjmp	.+26     	; 0x2c5c <menu_option_P1+0x1d0>
			if((temp1 & 0x01)!=0x00) // OK button
			{
				break;
			}

			if((temp1 & 0x02)!=0x00) // EXIT button
    2c42:	80 91 1b 03 	lds	r24, 0x031B
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	82 70       	andi	r24, 0x02	; 2
    2c4c:	99 27       	eor	r25, r25
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	21 f0       	breq	.+8      	; 0x2c5a <menu_option_P1+0x1ce>
			{
				lcd_command_write(0x01); //clear screen
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
				goto clock;
    2c58:	60 cf       	rjmp	.-320    	; 0x2b1a <menu_option_P1+0x8e>
				break;
			}
		}
    2c5a:	b6 cf       	rjmp	.-148    	; 0x2bc8 <menu_option_P1+0x13c>
	}

	eeprom_write_word((uint16_t *) (MODE1) , intervals);

	int i;
	for(i=0; i<intervals; i++)
    2c5c:	29 81       	ldd	r18, Y+1	; 0x01
    2c5e:	3a 81       	ldd	r19, Y+2	; 0x02
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	28 17       	cp	r18, r24
    2c66:	39 07       	cpc	r19, r25
    2c68:	0c f4       	brge	.+2      	; 0x2c6c <menu_option_P1+0x1e0>
    2c6a:	57 cf       	rjmp	.-338    	; 0x2b1a <menu_option_P1+0x8e>
//		_delay_ms(100);
		lcd_command_write(0x01); //clear screen

	}

}
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	df 91       	pop	r29
    2c76:	cf 91       	pop	r28
    2c78:	08 95       	ret

00002c7a <menu_option_P2>:

int menu_option_P2(void)// normal mode to be changed to custom mode
{
    2c7a:	cf 93       	push	r28
    2c7c:	df 93       	push	r29
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <menu_option_P2+0x6>
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <menu_option_P2+0x8>
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
	//P0

	int intervals;

	lcd_command_write(0x01); //clear screen
    2c86:	81 e0       	ldi	r24, 0x01	; 1
    2c88:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	lcd_cursor(1,1);
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>

	lcd_string_write("No. of alarms?");
    2c94:	8d ed       	ldi	r24, 0xDD	; 221
    2c96:	92 e0       	ldi	r25, 0x02	; 2
    2c98:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
	lcd_cursor(2,1);
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>

	while(1)
	{
		intervals = print_minute(2,1,0);
    2ca4:	40 e0       	ldi	r20, 0x00	; 0
    2ca6:	61 e0       	ldi	r22, 0x01	; 1
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    2cae:	9c 83       	std	Y+4, r25	; 0x04
    2cb0:	8b 83       	std	Y+3, r24	; 0x03
		temp1=PINA;
    2cb2:	89 e3       	ldi	r24, 0x39	; 57
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	80 81       	ld	r24, Z
    2cba:	80 93 1b 03 	sts	0x031B, r24

		if((temp1 & 0x01)!=0x00) // OK button
    2cbe:	80 91 1b 03 	lds	r24, 0x031B
    2cc2:	88 2f       	mov	r24, r24
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	81 70       	andi	r24, 0x01	; 1
    2cc8:	99 27       	eor	r25, r25
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	71 f0       	breq	.+28     	; 0x2cea <menu_option_P2+0x70>
		{
			lcd_command_write(0x01); //clear screen
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
			break;
    2cd4:	00 00       	nop
			return 0;
		}

	}

	eeprom_write_word((uint16_t *) (MODE2) , intervals);
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	bc 01       	movw	r22, r24
    2cdc:	84 e5       	ldi	r24, 0x54	; 84
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>

	int i;
	for(i=0; i<intervals; i++)
    2ce4:	1a 82       	std	Y+2, r1	; 0x02
    2ce6:	19 82       	std	Y+1, r1	; 0x01
    2ce8:	b0 c0       	rjmp	.+352    	; 0x2e4a <menu_option_P2+0x1d0>
		{
			lcd_command_write(0x01); //clear screen
			break;
		}

		if((temp1 & 0x02)!=0x00) // EXIT button
    2cea:	80 91 1b 03 	lds	r24, 0x031B
    2cee:	88 2f       	mov	r24, r24
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	82 70       	andi	r24, 0x02	; 2
    2cf4:	99 27       	eor	r25, r25
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	31 f0       	breq	.+12     	; 0x2d06 <menu_option_P2+0x8c>
		{
			lcd_command_write(0x01); //clear screen
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
			return 0;
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	aa c0       	rjmp	.+340    	; 0x2e5a <menu_option_P2+0x1e0>
		}

	}
    2d06:	ce cf       	rjmp	.-100    	; 0x2ca4 <menu_option_P2+0x2a>

	int i;
	for(i=0; i<intervals; i++)
	{
		clock:
		lcd_cursor(1,1);
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("HRS:min   P2 T");
    2d10:	8c ee       	ldi	r24, 0xEC	; 236
    2d12:	92 e0       	ldi	r25, 0x02	; 2
    2d14:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
		lcd_number_write(i+1,10);
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1c:	01 96       	adiw	r24, 0x01	; 1
    2d1e:	6a e0       	ldi	r22, 0x0A	; 10
    2d20:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		lcd_cursor(2,1);
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("  :         of  ");
    2d2c:	81 ed       	ldi	r24, 0xD1	; 209
    2d2e:	91 e0       	ldi	r25, 0x01	; 1
    2d30:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
		lcd_cursor(2,11);
    2d34:	6b e0       	ldi	r22, 0x0B	; 11
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_number_write(i+1,10);
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	01 96       	adiw	r24, 0x01	; 1
    2d42:	6a e0       	ldi	r22, 0x0A	; 10
    2d44:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>
		lcd_cursor(2,15);
    2d48:	6f e0       	ldi	r22, 0x0F	; 15
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_number_write(intervals,10);
    2d50:	8b 81       	ldd	r24, Y+3	; 0x03
    2d52:	9c 81       	ldd	r25, Y+4	; 0x04
    2d54:	6a e0       	ldi	r22, 0x0A	; 10
    2d56:	0e 94 87 02 	call	0x50e	; 0x50e <lcd_number_write>



		while(1) // setting hrs
		{
			temp1=PINA;
    2d5a:	89 e3       	ldi	r24, 0x39	; 57
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	fc 01       	movw	r30, r24
    2d60:	80 81       	ld	r24, Z
    2d62:	80 93 1b 03 	sts	0x031B, r24
			hr=print_hour(2,1,0);
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	61 e0       	ldi	r22, 0x01	; 1
    2d6a:	82 e0       	ldi	r24, 0x02	; 2
    2d6c:	0e 94 f8 07 	call	0xff0	; 0xff0 <print_hour>
    2d70:	80 93 1e 03 	sts	0x031E, r24

			if((temp1 & 0x01)!=0x00) // OK button
    2d74:	80 91 1b 03 	lds	r24, 0x031B
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	81 70       	andi	r24, 0x01	; 1
    2d7e:	99 27       	eor	r25, r25
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	51 f0       	breq	.+20     	; 0x2d98 <menu_option_P2+0x11e>
			{
				break;
    2d84:	00 00       	nop
				return 0;
				break;
			}
		}

		lcd_cursor(1,1);
    2d86:	61 e0       	ldi	r22, 0x01	; 1
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("hrs:MIN   P2 T");
    2d8e:	8b ef       	ldi	r24, 0xFB	; 251
    2d90:	92 e0       	ldi	r25, 0x02	; 2
    2d92:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>
    2d96:	0f c0       	rjmp	.+30     	; 0x2db6 <menu_option_P2+0x13c>
			if((temp1 & 0x01)!=0x00) // OK button
			{
				break;
			}

			if((temp1 & 0x02)!=0x00) // EXIT button
    2d98:	80 91 1b 03 	lds	r24, 0x031B
    2d9c:	88 2f       	mov	r24, r24
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	82 70       	andi	r24, 0x02	; 2
    2da2:	99 27       	eor	r25, r25
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	31 f0       	breq	.+12     	; 0x2db4 <menu_option_P2+0x13a>
			{
				lcd_command_write(0x01); //clear screen
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
				return 0;
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	53 c0       	rjmp	.+166    	; 0x2e5a <menu_option_P2+0x1e0>
				break;
			}
		}
    2db4:	d2 cf       	rjmp	.-92     	; 0x2d5a <menu_option_P2+0xe0>
		lcd_cursor(1,1);
		lcd_string_write("hrs:MIN   P2 T");

		while(1) // setting minutes
		{
			temp1=PINA;
    2db6:	89 e3       	ldi	r24, 0x39	; 57
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	fc 01       	movw	r30, r24
    2dbc:	80 81       	ld	r24, Z
    2dbe:	80 93 1b 03 	sts	0x031B, r24
			min=print_minute(2,4,0);
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	64 e0       	ldi	r22, 0x04	; 4
    2dc6:	82 e0       	ldi	r24, 0x02	; 2
    2dc8:	0e 94 5d 08 	call	0x10ba	; 0x10ba <print_minute>
    2dcc:	80 93 1c 03 	sts	0x031C, r24

			if((temp1 & 0x01)!=0x00) // OK button
    2dd0:	80 91 1b 03 	lds	r24, 0x031B
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	81 70       	andi	r24, 0x01	; 1
    2dda:	99 27       	eor	r25, r25
    2ddc:	00 97       	sbiw	r24, 0x00	; 0
    2dde:	41 f1       	breq	.+80     	; 0x2e30 <menu_option_P2+0x1b6>
			{
				break;
    2de0:	00 00       	nop
				lcd_command_write(0x01); //clear screen
				goto clock;
				break;
			}
		}
		eeprom_write_word((uint16_t *) (MODE2+i*2+2) , (hr*100+min));
    2de2:	80 91 1e 03 	lds	r24, 0x031E
    2de6:	88 2f       	mov	r24, r24
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	44 e6       	ldi	r20, 0x64	; 100
    2dec:	48 9f       	mul	r20, r24
    2dee:	90 01       	movw	r18, r0
    2df0:	49 9f       	mul	r20, r25
    2df2:	30 0d       	add	r19, r0
    2df4:	11 24       	eor	r1, r1
    2df6:	80 91 1c 03 	lds	r24, 0x031C
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	82 0f       	add	r24, r18
    2e00:	93 1f       	adc	r25, r19
    2e02:	9c 01       	movw	r18, r24
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	85 55       	subi	r24, 0x55	; 85
    2e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	b9 01       	movw	r22, r18
    2e12:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__eewr_word_m32>
		lcd_cursor(2,9);
    2e16:	69 e0       	ldi	r22, 0x09	; 9
    2e18:	82 e0       	ldi	r24, 0x02	; 2
    2e1a:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
//		lcd_number_write((MODE1+i*2),10);
//		_delay_ms(100);
		lcd_command_write(0x01); //clear screen
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
	}

	eeprom_write_word((uint16_t *) (MODE2) , intervals);

	int i;
	for(i=0; i<intervals; i++)
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	0d c0       	rjmp	.+26     	; 0x2e4a <menu_option_P2+0x1d0>
			if((temp1 & 0x01)!=0x00) // OK button
			{
				break;
			}

			if((temp1 & 0x02)!=0x00) // EXIT button
    2e30:	80 91 1b 03 	lds	r24, 0x031B
    2e34:	88 2f       	mov	r24, r24
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	82 70       	andi	r24, 0x02	; 2
    2e3a:	99 27       	eor	r25, r25
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	21 f0       	breq	.+8      	; 0x2e48 <menu_option_P2+0x1ce>
			{
				lcd_command_write(0x01); //clear screen
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_command_write>
				goto clock;
    2e46:	60 cf       	rjmp	.-320    	; 0x2d08 <menu_option_P2+0x8e>
				break;
			}
		}
    2e48:	b6 cf       	rjmp	.-148    	; 0x2db6 <menu_option_P2+0x13c>
	}

	eeprom_write_word((uint16_t *) (MODE2) , intervals);

	int i;
	for(i=0; i<intervals; i++)
    2e4a:	29 81       	ldd	r18, Y+1	; 0x01
    2e4c:	3a 81       	ldd	r19, Y+2	; 0x02
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	9c 81       	ldd	r25, Y+4	; 0x04
    2e52:	28 17       	cp	r18, r24
    2e54:	39 07       	cpc	r19, r25
    2e56:	0c f4       	brge	.+2      	; 0x2e5a <menu_option_P2+0x1e0>
    2e58:	57 cf       	rjmp	.-338    	; 0x2d08 <menu_option_P2+0x8e>
//		lcd_number_write((MODE1+i*2),10);
//		_delay_ms(100);
		lcd_command_write(0x01); //clear screen
	}

}
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	df 91       	pop	r29
    2e64:	cf 91       	pop	r28
    2e66:	08 95       	ret

00002e68 <menu_option_runP0>:

void menu_option_runP0(void)
{
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	62 97       	sbiw	r28, 0x12	; 18
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
	int i=0; //restart counter
    2e80:	1a 82       	std	Y+2, r1	; 0x02
    2e82:	19 82       	std	Y+1, r1	; 0x01
	int intervals = 0;
    2e84:	1c 82       	std	Y+4, r1	; 0x04
    2e86:	1b 82       	std	Y+3, r1	; 0x03
	intervals=eeprom_read_word((uint16_t *) MODE0);	// Load total no. of timings stored in eeprom
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    2e90:	9c 83       	std	Y+4, r25	; 0x04
    2e92:	8b 83       	std	Y+3, r24	; 0x03

	while(1)
	{
		display_time();
    2e94:	0e 94 4a 06 	call	0xc94	; 0xc94 <display_time>

		lcd_cursor(2,14);
    2e98:	6e e0       	ldi	r22, 0x0E	; 14
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("P0");
    2ea0:	8a e0       	ldi	r24, 0x0A	; 10
    2ea2:	93 e0       	ldi	r25, 0x03	; 3
    2ea4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

		if((hr==(eeprom_read_word((uint16_t *) (MODE0 + i*2+2))/100)) && (min == (eeprom_read_word((uint16_t *) (MODE0 + i*2+2) )%100)))
    2ea8:	80 91 1e 03 	lds	r24, 0x031E
    2eac:	08 2f       	mov	r16, r24
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb4:	01 96       	adiw	r24, 0x01	; 1
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    2ebe:	96 95       	lsr	r25
    2ec0:	87 95       	ror	r24
    2ec2:	96 95       	lsr	r25
    2ec4:	87 95       	ror	r24
    2ec6:	9c 01       	movw	r18, r24
    2ec8:	ab e7       	ldi	r26, 0x7B	; 123
    2eca:	b4 e1       	ldi	r27, 0x14	; 20
    2ecc:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2ed0:	96 95       	lsr	r25
    2ed2:	87 95       	ror	r24
    2ed4:	08 17       	cp	r16, r24
    2ed6:	19 07       	cpc	r17, r25
    2ed8:	09 f0       	breq	.+2      	; 0x2edc <menu_option_runP0+0x74>
    2eda:	a6 c0       	rjmp	.+332    	; 0x3028 <menu_option_runP0+0x1c0>
    2edc:	80 91 1c 03 	lds	r24, 0x031C
    2ee0:	08 2f       	mov	r16, r24
    2ee2:	10 e0       	ldi	r17, 0x00	; 0
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	88 0f       	add	r24, r24
    2eec:	99 1f       	adc	r25, r25
    2eee:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    2ef2:	ac 01       	movw	r20, r24
    2ef4:	ca 01       	movw	r24, r20
    2ef6:	96 95       	lsr	r25
    2ef8:	87 95       	ror	r24
    2efa:	96 95       	lsr	r25
    2efc:	87 95       	ror	r24
    2efe:	9c 01       	movw	r18, r24
    2f00:	ab e7       	ldi	r26, 0x7B	; 123
    2f02:	b4 e1       	ldi	r27, 0x14	; 20
    2f04:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    2f08:	96 95       	lsr	r25
    2f0a:	87 95       	ror	r24
    2f0c:	64 e6       	ldi	r22, 0x64	; 100
    2f0e:	68 9f       	mul	r22, r24
    2f10:	90 01       	movw	r18, r0
    2f12:	69 9f       	mul	r22, r25
    2f14:	30 0d       	add	r19, r0
    2f16:	11 24       	eor	r1, r1
    2f18:	ca 01       	movw	r24, r20
    2f1a:	82 1b       	sub	r24, r18
    2f1c:	93 0b       	sbc	r25, r19
    2f1e:	08 17       	cp	r16, r24
    2f20:	19 07       	cpc	r17, r25
    2f22:	09 f0       	breq	.+2      	; 0x2f26 <menu_option_runP0+0xbe>
    2f24:	81 c0       	rjmp	.+258    	; 0x3028 <menu_option_runP0+0x1c0>
		{
			//  ring_bell_long(1);
			PORTC = (PC2<<1)|(PC3<<1); //Pins PC2(bell) and PC3(buzzer) will go high
    2f26:	85 e3       	ldi	r24, 0x35	; 53
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	26 e0       	ldi	r18, 0x06	; 6
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	20 83       	st	Z, r18
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	aa ef       	ldi	r26, 0xFA	; 250
    2f36:	b3 e4       	ldi	r27, 0x43	; 67
    2f38:	8d 83       	std	Y+5, r24	; 0x05
    2f3a:	9e 83       	std	Y+6, r25	; 0x06
    2f3c:	af 83       	std	Y+7, r26	; 0x07
    2f3e:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4a e7       	ldi	r20, 0x7A	; 122
    2f46:	55 e4       	ldi	r21, 0x45	; 69
    2f48:	6d 81       	ldd	r22, Y+5	; 0x05
    2f4a:	7e 81       	ldd	r23, Y+6	; 0x06
    2f4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4e:	98 85       	ldd	r25, Y+8	; 0x08
    2f50:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	89 87       	std	Y+9, r24	; 0x09
    2f5a:	9a 87       	std	Y+10, r25	; 0x0a
    2f5c:	ab 87       	std	Y+11, r26	; 0x0b
    2f5e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	40 e8       	ldi	r20, 0x80	; 128
    2f66:	5f e3       	ldi	r21, 0x3F	; 63
    2f68:	69 85       	ldd	r22, Y+9	; 0x09
    2f6a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f70:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
    2f74:	88 23       	and	r24, r24
    2f76:	2c f4       	brge	.+10     	; 0x2f82 <menu_option_runP0+0x11a>
		__ticks = 1;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	9e 87       	std	Y+14, r25	; 0x0e
    2f7e:	8d 87       	std	Y+13, r24	; 0x0d
    2f80:	3f c0       	rjmp	.+126    	; 0x3000 <menu_option_runP0+0x198>
	else if (__tmp > 65535)
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	3f ef       	ldi	r19, 0xFF	; 255
    2f86:	4f e7       	ldi	r20, 0x7F	; 127
    2f88:	57 e4       	ldi	r21, 0x47	; 71
    2f8a:	69 85       	ldd	r22, Y+9	; 0x09
    2f8c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f90:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f92:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
    2f96:	18 16       	cp	r1, r24
    2f98:	4c f5       	brge	.+82     	; 0x2fec <menu_option_runP0+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	40 e2       	ldi	r20, 0x20	; 32
    2fa0:	51 e4       	ldi	r21, 0x41	; 65
    2fa2:	6d 81       	ldd	r22, Y+5	; 0x05
    2fa4:	7e 81       	ldd	r23, Y+6	; 0x06
    2fa6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fa8:	98 85       	ldd	r25, Y+8	; 0x08
    2faa:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	9e 87       	std	Y+14, r25	; 0x0e
    2fc0:	8d 87       	std	Y+13, r24	; 0x0d
    2fc2:	0f c0       	rjmp	.+30     	; 0x2fe2 <menu_option_runP0+0x17a>
    2fc4:	80 e9       	ldi	r24, 0x90	; 144
    2fc6:	91 e0       	ldi	r25, 0x01	; 1
    2fc8:	98 8b       	std	Y+16, r25	; 0x10
    2fca:	8f 87       	std	Y+15, r24	; 0x0f
    2fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fce:	98 89       	ldd	r25, Y+16	; 0x10
    2fd0:	01 97       	sbiw	r24, 0x01	; 1
    2fd2:	f1 f7       	brne	.-4      	; 0x2fd0 <menu_option_runP0+0x168>
    2fd4:	98 8b       	std	Y+16, r25	; 0x10
    2fd6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fdc:	01 97       	sbiw	r24, 0x01	; 1
    2fde:	9e 87       	std	Y+14, r25	; 0x0e
    2fe0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe6:	00 97       	sbiw	r24, 0x00	; 0
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <menu_option_runP0+0x15c>
    2fea:	14 c0       	rjmp	.+40     	; 0x3014 <menu_option_runP0+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fec:	69 85       	ldd	r22, Y+9	; 0x09
    2fee:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ff0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ff2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ff4:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9e 87       	std	Y+14, r25	; 0x0e
    2ffe:	8d 87       	std	Y+13, r24	; 0x0d
    3000:	8d 85       	ldd	r24, Y+13	; 0x0d
    3002:	9e 85       	ldd	r25, Y+14	; 0x0e
    3004:	9a 8b       	std	Y+18, r25	; 0x12
    3006:	89 8b       	std	Y+17, r24	; 0x11
    3008:	89 89       	ldd	r24, Y+17	; 0x11
    300a:	9a 89       	ldd	r25, Y+18	; 0x12
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	f1 f7       	brne	.-4      	; 0x300c <menu_option_runP0+0x1a4>
    3010:	9a 8b       	std	Y+18, r25	; 0x12
    3012:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(500);
			PORTC = (PC2<<0)|(PC3<<0);
    3014:	85 e3       	ldi	r24, 0x35	; 53
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	23 e0       	ldi	r18, 0x03	; 3
    301a:	fc 01       	movw	r30, r24
    301c:	20 83       	st	Z, r18
			//lcd_command_write(0x01);
			i++;
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	9a 81       	ldd	r25, Y+2	; 0x02
    3022:	01 96       	adiw	r24, 0x01	; 1
    3024:	9a 83       	std	Y+2, r25	; 0x02
    3026:	89 83       	std	Y+1, r24	; 0x01
		}
		if(i>intervals)
    3028:	29 81       	ldd	r18, Y+1	; 0x01
    302a:	3a 81       	ldd	r19, Y+2	; 0x02
    302c:	8b 81       	ldd	r24, Y+3	; 0x03
    302e:	9c 81       	ldd	r25, Y+4	; 0x04
    3030:	82 17       	cp	r24, r18
    3032:	93 07       	cpc	r25, r19
    3034:	0c f4       	brge	.+2      	; 0x3038 <menu_option_runP0+0x1d0>
			break;
    3036:	1f c0       	rjmp	.+62     	; 0x3076 <menu_option_runP0+0x20e>
		temp1=PINA;
    3038:	89 e3       	ldi	r24, 0x39	; 57
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	fc 01       	movw	r30, r24
    303e:	80 81       	ld	r24, Z
    3040:	80 93 1b 03 	sts	0x031B, r24
		if(((temp1 & 0x08) !=0x00)||((temp1 & 0x10) !=0x00)||((temp1 & 0x20) !=0x00))
    3044:	80 91 1b 03 	lds	r24, 0x031B
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	88 70       	andi	r24, 0x08	; 8
    304e:	99 27       	eor	r25, r25
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	89 f4       	brne	.+34     	; 0x3076 <menu_option_runP0+0x20e>
    3054:	80 91 1b 03 	lds	r24, 0x031B
    3058:	88 2f       	mov	r24, r24
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	80 71       	andi	r24, 0x10	; 16
    305e:	99 27       	eor	r25, r25
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	49 f4       	brne	.+18     	; 0x3076 <menu_option_runP0+0x20e>
    3064:	80 91 1b 03 	lds	r24, 0x031B
    3068:	88 2f       	mov	r24, r24
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	80 72       	andi	r24, 0x20	; 32
    306e:	99 27       	eor	r25, r25
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	09 f4       	brne	.+2      	; 0x3076 <menu_option_runP0+0x20e>
		{
			break;
		}
	}
    3074:	0f cf       	rjmp	.-482    	; 0x2e94 <menu_option_runP0+0x2c>
}
    3076:	62 96       	adiw	r28, 0x12	; 18
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	df 91       	pop	r29
    3084:	cf 91       	pop	r28
    3086:	1f 91       	pop	r17
    3088:	0f 91       	pop	r16
    308a:	08 95       	ret

0000308c <menu_option_runP1>:

void menu_option_runP1(void)
{
    308c:	0f 93       	push	r16
    308e:	1f 93       	push	r17
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	62 97       	sbiw	r28, 0x12	; 18
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
	int i=0; //restart counter
    30a4:	1a 82       	std	Y+2, r1	; 0x02
    30a6:	19 82       	std	Y+1, r1	; 0x01
	int intervals = 0;
    30a8:	1c 82       	std	Y+4, r1	; 0x04
    30aa:	1b 82       	std	Y+3, r1	; 0x03
	intervals=eeprom_read_word((uint16_t *) MODE1);	// Load total no. of timings stored in eeprom
    30ac:	8a ea       	ldi	r24, 0xAA	; 170
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    30b4:	9c 83       	std	Y+4, r25	; 0x04
    30b6:	8b 83       	std	Y+3, r24	; 0x03

	while(1)
	{
		display_time();
    30b8:	0e 94 4a 06 	call	0xc94	; 0xc94 <display_time>
		lcd_cursor(2,14);
    30bc:	6e e0       	ldi	r22, 0x0E	; 14
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("P1");
    30c4:	8d e0       	ldi	r24, 0x0D	; 13
    30c6:	93 e0       	ldi	r25, 0x03	; 3
    30c8:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

		if((hr==(eeprom_read_word((uint16_t *) (MODE1 + i*2+2))/100)) && (min == (eeprom_read_word((uint16_t *) (MODE1 + i*2+2) )%100)))
    30cc:	80 91 1e 03 	lds	r24, 0x031E
    30d0:	08 2f       	mov	r16, r24
    30d2:	10 e0       	ldi	r17, 0x00	; 0
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	8a 5a       	subi	r24, 0xAA	; 170
    30da:	9f 4f       	sbci	r25, 0xFF	; 255
    30dc:	88 0f       	add	r24, r24
    30de:	99 1f       	adc	r25, r25
    30e0:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    30e4:	96 95       	lsr	r25
    30e6:	87 95       	ror	r24
    30e8:	96 95       	lsr	r25
    30ea:	87 95       	ror	r24
    30ec:	9c 01       	movw	r18, r24
    30ee:	ab e7       	ldi	r26, 0x7B	; 123
    30f0:	b4 e1       	ldi	r27, 0x14	; 20
    30f2:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    30f6:	96 95       	lsr	r25
    30f8:	87 95       	ror	r24
    30fa:	08 17       	cp	r16, r24
    30fc:	19 07       	cpc	r17, r25
    30fe:	09 f0       	breq	.+2      	; 0x3102 <menu_option_runP1+0x76>
    3100:	a7 c0       	rjmp	.+334    	; 0x3250 <menu_option_runP1+0x1c4>
    3102:	80 91 1c 03 	lds	r24, 0x031C
    3106:	08 2f       	mov	r16, r24
    3108:	10 e0       	ldi	r17, 0x00	; 0
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	9a 81       	ldd	r25, Y+2	; 0x02
    310e:	8a 5a       	subi	r24, 0xAA	; 170
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	88 0f       	add	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    311a:	ac 01       	movw	r20, r24
    311c:	ca 01       	movw	r24, r20
    311e:	96 95       	lsr	r25
    3120:	87 95       	ror	r24
    3122:	96 95       	lsr	r25
    3124:	87 95       	ror	r24
    3126:	9c 01       	movw	r18, r24
    3128:	ab e7       	ldi	r26, 0x7B	; 123
    312a:	b4 e1       	ldi	r27, 0x14	; 20
    312c:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    3130:	96 95       	lsr	r25
    3132:	87 95       	ror	r24
    3134:	64 e6       	ldi	r22, 0x64	; 100
    3136:	68 9f       	mul	r22, r24
    3138:	90 01       	movw	r18, r0
    313a:	69 9f       	mul	r22, r25
    313c:	30 0d       	add	r19, r0
    313e:	11 24       	eor	r1, r1
    3140:	ca 01       	movw	r24, r20
    3142:	82 1b       	sub	r24, r18
    3144:	93 0b       	sbc	r25, r19
    3146:	08 17       	cp	r16, r24
    3148:	19 07       	cpc	r17, r25
    314a:	09 f0       	breq	.+2      	; 0x314e <menu_option_runP1+0xc2>
    314c:	81 c0       	rjmp	.+258    	; 0x3250 <menu_option_runP1+0x1c4>
		{
			//  ring_bell_long(1);
			PORTC = (PC2<<1)|(PC3<<1); //Pins PC2(bell) and PC3(buzzer) will go high
    314e:	85 e3       	ldi	r24, 0x35	; 53
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	26 e0       	ldi	r18, 0x06	; 6
    3154:	fc 01       	movw	r30, r24
    3156:	20 83       	st	Z, r18
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	aa ef       	ldi	r26, 0xFA	; 250
    315e:	b3 e4       	ldi	r27, 0x43	; 67
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	af 83       	std	Y+7, r26	; 0x07
    3166:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3168:	20 e0       	ldi	r18, 0x00	; 0
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	4a e7       	ldi	r20, 0x7A	; 122
    316e:	55 e4       	ldi	r21, 0x45	; 69
    3170:	6d 81       	ldd	r22, Y+5	; 0x05
    3172:	7e 81       	ldd	r23, Y+6	; 0x06
    3174:	8f 81       	ldd	r24, Y+7	; 0x07
    3176:	98 85       	ldd	r25, Y+8	; 0x08
    3178:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	89 87       	std	Y+9, r24	; 0x09
    3182:	9a 87       	std	Y+10, r25	; 0x0a
    3184:	ab 87       	std	Y+11, r26	; 0x0b
    3186:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	40 e8       	ldi	r20, 0x80	; 128
    318e:	5f e3       	ldi	r21, 0x3F	; 63
    3190:	69 85       	ldd	r22, Y+9	; 0x09
    3192:	7a 85       	ldd	r23, Y+10	; 0x0a
    3194:	8b 85       	ldd	r24, Y+11	; 0x0b
    3196:	9c 85       	ldd	r25, Y+12	; 0x0c
    3198:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <menu_option_runP1+0x11e>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9e 87       	std	Y+14, r25	; 0x0e
    31a6:	8d 87       	std	Y+13, r24	; 0x0d
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <menu_option_runP1+0x19c>
	else if (__tmp > 65535)
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	3f ef       	ldi	r19, 0xFF	; 255
    31ae:	4f e7       	ldi	r20, 0x7F	; 127
    31b0:	57 e4       	ldi	r21, 0x47	; 71
    31b2:	69 85       	ldd	r22, Y+9	; 0x09
    31b4:	7a 85       	ldd	r23, Y+10	; 0x0a
    31b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    31b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    31ba:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <menu_option_runP1+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e2       	ldi	r20, 0x20	; 32
    31c8:	51 e4       	ldi	r21, 0x41	; 65
    31ca:	6d 81       	ldd	r22, Y+5	; 0x05
    31cc:	7e 81       	ldd	r23, Y+6	; 0x06
    31ce:	8f 81       	ldd	r24, Y+7	; 0x07
    31d0:	98 85       	ldd	r25, Y+8	; 0x08
    31d2:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9e 87       	std	Y+14, r25	; 0x0e
    31e8:	8d 87       	std	Y+13, r24	; 0x0d
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <menu_option_runP1+0x17e>
    31ec:	80 e9       	ldi	r24, 0x90	; 144
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	98 8b       	std	Y+16, r25	; 0x10
    31f2:	8f 87       	std	Y+15, r24	; 0x0f
    31f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f6:	98 89       	ldd	r25, Y+16	; 0x10
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <menu_option_runP1+0x16c>
    31fc:	98 8b       	std	Y+16, r25	; 0x10
    31fe:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	8d 85       	ldd	r24, Y+13	; 0x0d
    3202:	9e 85       	ldd	r25, Y+14	; 0x0e
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9e 87       	std	Y+14, r25	; 0x0e
    3208:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	8d 85       	ldd	r24, Y+13	; 0x0d
    320c:	9e 85       	ldd	r25, Y+14	; 0x0e
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <menu_option_runP1+0x160>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <menu_option_runP1+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	69 85       	ldd	r22, Y+9	; 0x09
    3216:	7a 85       	ldd	r23, Y+10	; 0x0a
    3218:	8b 85       	ldd	r24, Y+11	; 0x0b
    321a:	9c 85       	ldd	r25, Y+12	; 0x0c
    321c:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9e 87       	std	Y+14, r25	; 0x0e
    3226:	8d 87       	std	Y+13, r24	; 0x0d
    3228:	8d 85       	ldd	r24, Y+13	; 0x0d
    322a:	9e 85       	ldd	r25, Y+14	; 0x0e
    322c:	9a 8b       	std	Y+18, r25	; 0x12
    322e:	89 8b       	std	Y+17, r24	; 0x11
    3230:	89 89       	ldd	r24, Y+17	; 0x11
    3232:	9a 89       	ldd	r25, Y+18	; 0x12
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <menu_option_runP1+0x1a8>
    3238:	9a 8b       	std	Y+18, r25	; 0x12
    323a:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(500);
			PORTC = (PC2<<0)|(PC3<<0);
    323c:	85 e3       	ldi	r24, 0x35	; 53
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	23 e0       	ldi	r18, 0x03	; 3
    3242:	fc 01       	movw	r30, r24
    3244:	20 83       	st	Z, r18
			//lcd_command_write(0x01);
			i++;
    3246:	89 81       	ldd	r24, Y+1	; 0x01
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	9a 83       	std	Y+2, r25	; 0x02
    324e:	89 83       	std	Y+1, r24	; 0x01
		}
		if(i>intervals)
    3250:	29 81       	ldd	r18, Y+1	; 0x01
    3252:	3a 81       	ldd	r19, Y+2	; 0x02
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	9c 81       	ldd	r25, Y+4	; 0x04
    3258:	82 17       	cp	r24, r18
    325a:	93 07       	cpc	r25, r19
    325c:	0c f4       	brge	.+2      	; 0x3260 <menu_option_runP1+0x1d4>
			break;
    325e:	17 c0       	rjmp	.+46     	; 0x328e <menu_option_runP1+0x202>
		temp1=PINA;
    3260:	89 e3       	ldi	r24, 0x39	; 57
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	fc 01       	movw	r30, r24
    3266:	80 81       	ld	r24, Z
    3268:	80 93 1b 03 	sts	0x031B, r24
		if(((temp1 & 0x08) !=0x00)||((temp1 & 0x20) !=0x00))
    326c:	80 91 1b 03 	lds	r24, 0x031B
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	88 70       	andi	r24, 0x08	; 8
    3276:	99 27       	eor	r25, r25
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	49 f4       	brne	.+18     	; 0x328e <menu_option_runP1+0x202>
    327c:	80 91 1b 03 	lds	r24, 0x031B
    3280:	88 2f       	mov	r24, r24
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	80 72       	andi	r24, 0x20	; 32
    3286:	99 27       	eor	r25, r25
    3288:	00 97       	sbiw	r24, 0x00	; 0
    328a:	09 f4       	brne	.+2      	; 0x328e <menu_option_runP1+0x202>
		{
			break;
		}
	}
    328c:	15 cf       	rjmp	.-470    	; 0x30b8 <menu_option_runP1+0x2c>
}
    328e:	62 96       	adiw	r28, 0x12	; 18
    3290:	0f b6       	in	r0, 0x3f	; 63
    3292:	f8 94       	cli
    3294:	de bf       	out	0x3e, r29	; 62
    3296:	0f be       	out	0x3f, r0	; 63
    3298:	cd bf       	out	0x3d, r28	; 61
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	1f 91       	pop	r17
    32a0:	0f 91       	pop	r16
    32a2:	08 95       	ret

000032a4 <menu_option_runP2>:

void menu_option_runP2(void)
{
    32a4:	0f 93       	push	r16
    32a6:	1f 93       	push	r17
    32a8:	cf 93       	push	r28
    32aa:	df 93       	push	r29
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	62 97       	sbiw	r28, 0x12	; 18
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
	int i=0; //restart counter
    32bc:	1a 82       	std	Y+2, r1	; 0x02
    32be:	19 82       	std	Y+1, r1	; 0x01
	int intervals = 0;
    32c0:	1c 82       	std	Y+4, r1	; 0x04
    32c2:	1b 82       	std	Y+3, r1	; 0x03
	intervals = eeprom_read_word((uint16_t *) MODE2);	// Load total no. of timings stored in eeprom
    32c4:	84 e5       	ldi	r24, 0x54	; 84
    32c6:	91 e0       	ldi	r25, 0x01	; 1
    32c8:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    32cc:	9c 83       	std	Y+4, r25	; 0x04
    32ce:	8b 83       	std	Y+3, r24	; 0x03

	while(1)
	{
		display_time();
    32d0:	0e 94 4a 06 	call	0xc94	; 0xc94 <display_time>
		lcd_cursor(2,14);
    32d4:	6e e0       	ldi	r22, 0x0E	; 14
    32d6:	82 e0       	ldi	r24, 0x02	; 2
    32d8:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_cursor>
		lcd_string_write("P2");
    32dc:	80 e1       	ldi	r24, 0x10	; 16
    32de:	93 e0       	ldi	r25, 0x03	; 3
    32e0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_string_write>

		if((hr==(eeprom_read_word((uint16_t *) (MODE2 + i*2+2))/100)) && (min == (eeprom_read_word((uint16_t *) (MODE2 + i*2+2) )%100)))
    32e4:	80 91 1e 03 	lds	r24, 0x031E
    32e8:	08 2f       	mov	r16, r24
    32ea:	10 e0       	ldi	r17, 0x00	; 0
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
    32ee:	9a 81       	ldd	r25, Y+2	; 0x02
    32f0:	85 55       	subi	r24, 0x55	; 85
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    32fc:	96 95       	lsr	r25
    32fe:	87 95       	ror	r24
    3300:	96 95       	lsr	r25
    3302:	87 95       	ror	r24
    3304:	9c 01       	movw	r18, r24
    3306:	ab e7       	ldi	r26, 0x7B	; 123
    3308:	b4 e1       	ldi	r27, 0x14	; 20
    330a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    330e:	96 95       	lsr	r25
    3310:	87 95       	ror	r24
    3312:	08 17       	cp	r16, r24
    3314:	19 07       	cpc	r17, r25
    3316:	09 f0       	breq	.+2      	; 0x331a <menu_option_runP2+0x76>
    3318:	a7 c0       	rjmp	.+334    	; 0x3468 <menu_option_runP2+0x1c4>
    331a:	80 91 1c 03 	lds	r24, 0x031C
    331e:	08 2f       	mov	r16, r24
    3320:	10 e0       	ldi	r17, 0x00	; 0
    3322:	89 81       	ldd	r24, Y+1	; 0x01
    3324:	9a 81       	ldd	r25, Y+2	; 0x02
    3326:	85 55       	subi	r24, 0x55	; 85
    3328:	9f 4f       	sbci	r25, 0xFF	; 255
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	0e 94 04 1c 	call	0x3808	; 0x3808 <__eerd_word_m32>
    3332:	ac 01       	movw	r20, r24
    3334:	ca 01       	movw	r24, r20
    3336:	96 95       	lsr	r25
    3338:	87 95       	ror	r24
    333a:	96 95       	lsr	r25
    333c:	87 95       	ror	r24
    333e:	9c 01       	movw	r18, r24
    3340:	ab e7       	ldi	r26, 0x7B	; 123
    3342:	b4 e1       	ldi	r27, 0x14	; 20
    3344:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <__umulhisi3>
    3348:	96 95       	lsr	r25
    334a:	87 95       	ror	r24
    334c:	64 e6       	ldi	r22, 0x64	; 100
    334e:	68 9f       	mul	r22, r24
    3350:	90 01       	movw	r18, r0
    3352:	69 9f       	mul	r22, r25
    3354:	30 0d       	add	r19, r0
    3356:	11 24       	eor	r1, r1
    3358:	ca 01       	movw	r24, r20
    335a:	82 1b       	sub	r24, r18
    335c:	93 0b       	sbc	r25, r19
    335e:	08 17       	cp	r16, r24
    3360:	19 07       	cpc	r17, r25
    3362:	09 f0       	breq	.+2      	; 0x3366 <menu_option_runP2+0xc2>
    3364:	81 c0       	rjmp	.+258    	; 0x3468 <menu_option_runP2+0x1c4>
		{
			//  ring_bell_long(1);
			PORTC = (PC2<<1)|(PC3<<1);	//Pins PC2(bell) and PC3(buzzer) will go high
    3366:	85 e3       	ldi	r24, 0x35	; 53
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	26 e0       	ldi	r18, 0x06	; 6
    336c:	fc 01       	movw	r30, r24
    336e:	20 83       	st	Z, r18
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	aa ef       	ldi	r26, 0xFA	; 250
    3376:	b3 e4       	ldi	r27, 0x43	; 67
    3378:	8d 83       	std	Y+5, r24	; 0x05
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	af 83       	std	Y+7, r26	; 0x07
    337e:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a e7       	ldi	r20, 0x7A	; 122
    3386:	55 e4       	ldi	r21, 0x45	; 69
    3388:	6d 81       	ldd	r22, Y+5	; 0x05
    338a:	7e 81       	ldd	r23, Y+6	; 0x06
    338c:	8f 81       	ldd	r24, Y+7	; 0x07
    338e:	98 85       	ldd	r25, Y+8	; 0x08
    3390:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	89 87       	std	Y+9, r24	; 0x09
    339a:	9a 87       	std	Y+10, r25	; 0x0a
    339c:	ab 87       	std	Y+11, r26	; 0x0b
    339e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	40 e8       	ldi	r20, 0x80	; 128
    33a6:	5f e3       	ldi	r21, 0x3F	; 63
    33a8:	69 85       	ldd	r22, Y+9	; 0x09
    33aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    33ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    33ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    33b0:	0e 94 95 1a 	call	0x352a	; 0x352a <__cmpsf2>
    33b4:	88 23       	and	r24, r24
    33b6:	2c f4       	brge	.+10     	; 0x33c2 <menu_option_runP2+0x11e>
		__ticks = 1;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	9e 87       	std	Y+14, r25	; 0x0e
    33be:	8d 87       	std	Y+13, r24	; 0x0d
    33c0:	3f c0       	rjmp	.+126    	; 0x3440 <menu_option_runP2+0x19c>
	else if (__tmp > 65535)
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	3f ef       	ldi	r19, 0xFF	; 255
    33c6:	4f e7       	ldi	r20, 0x7F	; 127
    33c8:	57 e4       	ldi	r21, 0x47	; 71
    33ca:	69 85       	ldd	r22, Y+9	; 0x09
    33cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    33ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    33d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    33d2:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__gesf2>
    33d6:	18 16       	cp	r1, r24
    33d8:	4c f5       	brge	.+82     	; 0x342c <menu_option_runP2+0x188>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e2       	ldi	r20, 0x20	; 32
    33e0:	51 e4       	ldi	r21, 0x41	; 65
    33e2:	6d 81       	ldd	r22, Y+5	; 0x05
    33e4:	7e 81       	ldd	r23, Y+6	; 0x06
    33e6:	8f 81       	ldd	r24, Y+7	; 0x07
    33e8:	98 85       	ldd	r25, Y+8	; 0x08
    33ea:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	9e 87       	std	Y+14, r25	; 0x0e
    3400:	8d 87       	std	Y+13, r24	; 0x0d
    3402:	0f c0       	rjmp	.+30     	; 0x3422 <menu_option_runP2+0x17e>
    3404:	80 e9       	ldi	r24, 0x90	; 144
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	98 8b       	std	Y+16, r25	; 0x10
    340a:	8f 87       	std	Y+15, r24	; 0x0f
    340c:	8f 85       	ldd	r24, Y+15	; 0x0f
    340e:	98 89       	ldd	r25, Y+16	; 0x10
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <menu_option_runP2+0x16c>
    3414:	98 8b       	std	Y+16, r25	; 0x10
    3416:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3418:	8d 85       	ldd	r24, Y+13	; 0x0d
    341a:	9e 85       	ldd	r25, Y+14	; 0x0e
    341c:	01 97       	sbiw	r24, 0x01	; 1
    341e:	9e 87       	std	Y+14, r25	; 0x0e
    3420:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3422:	8d 85       	ldd	r24, Y+13	; 0x0d
    3424:	9e 85       	ldd	r25, Y+14	; 0x0e
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	69 f7       	brne	.-38     	; 0x3404 <menu_option_runP2+0x160>
    342a:	14 c0       	rjmp	.+40     	; 0x3454 <menu_option_runP2+0x1b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342c:	69 85       	ldd	r22, Y+9	; 0x09
    342e:	7a 85       	ldd	r23, Y+10	; 0x0a
    3430:	8b 85       	ldd	r24, Y+11	; 0x0b
    3432:	9c 85       	ldd	r25, Y+12	; 0x0c
    3434:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    3438:	dc 01       	movw	r26, r24
    343a:	cb 01       	movw	r24, r22
    343c:	9e 87       	std	Y+14, r25	; 0x0e
    343e:	8d 87       	std	Y+13, r24	; 0x0d
    3440:	8d 85       	ldd	r24, Y+13	; 0x0d
    3442:	9e 85       	ldd	r25, Y+14	; 0x0e
    3444:	9a 8b       	std	Y+18, r25	; 0x12
    3446:	89 8b       	std	Y+17, r24	; 0x11
    3448:	89 89       	ldd	r24, Y+17	; 0x11
    344a:	9a 89       	ldd	r25, Y+18	; 0x12
    344c:	01 97       	sbiw	r24, 0x01	; 1
    344e:	f1 f7       	brne	.-4      	; 0x344c <menu_option_runP2+0x1a8>
    3450:	9a 8b       	std	Y+18, r25	; 0x12
    3452:	89 8b       	std	Y+17, r24	; 0x11
			_delay_ms(500);
			PORTC = (PC2<<0)|(PC3<<0);
    3454:	85 e3       	ldi	r24, 0x35	; 53
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	23 e0       	ldi	r18, 0x03	; 3
    345a:	fc 01       	movw	r30, r24
    345c:	20 83       	st	Z, r18
			//lcd_command_write(0x01);
			i++;
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	01 96       	adiw	r24, 0x01	; 1
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
		}
		if(i>intervals)
    3468:	29 81       	ldd	r18, Y+1	; 0x01
    346a:	3a 81       	ldd	r19, Y+2	; 0x02
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	9c 81       	ldd	r25, Y+4	; 0x04
    3470:	82 17       	cp	r24, r18
    3472:	93 07       	cpc	r25, r19
    3474:	0c f4       	brge	.+2      	; 0x3478 <menu_option_runP2+0x1d4>
			break;
    3476:	17 c0       	rjmp	.+46     	; 0x34a6 <menu_option_runP2+0x202>
		temp1=PINA;
    3478:	89 e3       	ldi	r24, 0x39	; 57
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	fc 01       	movw	r30, r24
    347e:	80 81       	ld	r24, Z
    3480:	80 93 1b 03 	sts	0x031B, r24
		if(((temp1 & 0x10) !=0x00)||((temp1 & 0x08) !=0x00))
    3484:	80 91 1b 03 	lds	r24, 0x031B
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	80 71       	andi	r24, 0x10	; 16
    348e:	99 27       	eor	r25, r25
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	49 f4       	brne	.+18     	; 0x34a6 <menu_option_runP2+0x202>
    3494:	80 91 1b 03 	lds	r24, 0x031B
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	88 70       	andi	r24, 0x08	; 8
    349e:	99 27       	eor	r25, r25
    34a0:	00 97       	sbiw	r24, 0x00	; 0
    34a2:	09 f4       	brne	.+2      	; 0x34a6 <menu_option_runP2+0x202>
		{
			break;
		}
	}
    34a4:	15 cf       	rjmp	.-470    	; 0x32d0 <menu_option_runP2+0x2c>
}
    34a6:	62 96       	adiw	r28, 0x12	; 18
    34a8:	0f b6       	in	r0, 0x3f	; 63
    34aa:	f8 94       	cli
    34ac:	de bf       	out	0x3e, r29	; 62
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	cd bf       	out	0x3d, r28	; 61
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	08 95       	ret

000034bc <__umulhisi3>:
    34bc:	a2 9f       	mul	r26, r18
    34be:	b0 01       	movw	r22, r0
    34c0:	b3 9f       	mul	r27, r19
    34c2:	c0 01       	movw	r24, r0
    34c4:	a3 9f       	mul	r26, r19
    34c6:	70 0d       	add	r23, r0
    34c8:	81 1d       	adc	r24, r1
    34ca:	11 24       	eor	r1, r1
    34cc:	91 1d       	adc	r25, r1
    34ce:	b2 9f       	mul	r27, r18
    34d0:	70 0d       	add	r23, r0
    34d2:	81 1d       	adc	r24, r1
    34d4:	11 24       	eor	r1, r1
    34d6:	91 1d       	adc	r25, r1
    34d8:	08 95       	ret

000034da <__divmodhi4>:
    34da:	97 fb       	bst	r25, 7
    34dc:	07 2e       	mov	r0, r23
    34de:	16 f4       	brtc	.+4      	; 0x34e4 <__divmodhi4+0xa>
    34e0:	00 94       	com	r0
    34e2:	07 d0       	rcall	.+14     	; 0x34f2 <__divmodhi4_neg1>
    34e4:	77 fd       	sbrc	r23, 7
    34e6:	09 d0       	rcall	.+18     	; 0x34fa <__divmodhi4_neg2>
    34e8:	0e 94 81 1a 	call	0x3502	; 0x3502 <__udivmodhi4>
    34ec:	07 fc       	sbrc	r0, 7
    34ee:	05 d0       	rcall	.+10     	; 0x34fa <__divmodhi4_neg2>
    34f0:	3e f4       	brtc	.+14     	; 0x3500 <__divmodhi4_exit>

000034f2 <__divmodhi4_neg1>:
    34f2:	90 95       	com	r25
    34f4:	81 95       	neg	r24
    34f6:	9f 4f       	sbci	r25, 0xFF	; 255
    34f8:	08 95       	ret

000034fa <__divmodhi4_neg2>:
    34fa:	70 95       	com	r23
    34fc:	61 95       	neg	r22
    34fe:	7f 4f       	sbci	r23, 0xFF	; 255

00003500 <__divmodhi4_exit>:
    3500:	08 95       	ret

00003502 <__udivmodhi4>:
    3502:	aa 1b       	sub	r26, r26
    3504:	bb 1b       	sub	r27, r27
    3506:	51 e1       	ldi	r21, 0x11	; 17
    3508:	07 c0       	rjmp	.+14     	; 0x3518 <__udivmodhi4_ep>

0000350a <__udivmodhi4_loop>:
    350a:	aa 1f       	adc	r26, r26
    350c:	bb 1f       	adc	r27, r27
    350e:	a6 17       	cp	r26, r22
    3510:	b7 07       	cpc	r27, r23
    3512:	10 f0       	brcs	.+4      	; 0x3518 <__udivmodhi4_ep>
    3514:	a6 1b       	sub	r26, r22
    3516:	b7 0b       	sbc	r27, r23

00003518 <__udivmodhi4_ep>:
    3518:	88 1f       	adc	r24, r24
    351a:	99 1f       	adc	r25, r25
    351c:	5a 95       	dec	r21
    351e:	a9 f7       	brne	.-22     	; 0x350a <__udivmodhi4_loop>
    3520:	80 95       	com	r24
    3522:	90 95       	com	r25
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	08 95       	ret

0000352a <__cmpsf2>:
    352a:	71 d0       	rcall	.+226    	; 0x360e <__fp_cmp>
    352c:	08 f4       	brcc	.+2      	; 0x3530 <__cmpsf2+0x6>
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	08 95       	ret

00003532 <__fixsfsi>:
    3532:	04 d0       	rcall	.+8      	; 0x353c <__fixunssfsi>
    3534:	68 94       	set
    3536:	b1 11       	cpse	r27, r1
    3538:	b1 c0       	rjmp	.+354    	; 0x369c <__fp_szero>
    353a:	08 95       	ret

0000353c <__fixunssfsi>:
    353c:	94 d0       	rcall	.+296    	; 0x3666 <__fp_splitA>
    353e:	88 f0       	brcs	.+34     	; 0x3562 <__fixunssfsi+0x26>
    3540:	9f 57       	subi	r25, 0x7F	; 127
    3542:	90 f0       	brcs	.+36     	; 0x3568 <__fixunssfsi+0x2c>
    3544:	b9 2f       	mov	r27, r25
    3546:	99 27       	eor	r25, r25
    3548:	b7 51       	subi	r27, 0x17	; 23
    354a:	a0 f0       	brcs	.+40     	; 0x3574 <__fixunssfsi+0x38>
    354c:	d1 f0       	breq	.+52     	; 0x3582 <__fixunssfsi+0x46>
    354e:	66 0f       	add	r22, r22
    3550:	77 1f       	adc	r23, r23
    3552:	88 1f       	adc	r24, r24
    3554:	99 1f       	adc	r25, r25
    3556:	1a f0       	brmi	.+6      	; 0x355e <__fixunssfsi+0x22>
    3558:	ba 95       	dec	r27
    355a:	c9 f7       	brne	.-14     	; 0x354e <__fixunssfsi+0x12>
    355c:	12 c0       	rjmp	.+36     	; 0x3582 <__fixunssfsi+0x46>
    355e:	b1 30       	cpi	r27, 0x01	; 1
    3560:	81 f0       	breq	.+32     	; 0x3582 <__fixunssfsi+0x46>
    3562:	9b d0       	rcall	.+310    	; 0x369a <__fp_zero>
    3564:	b1 e0       	ldi	r27, 0x01	; 1
    3566:	08 95       	ret
    3568:	98 c0       	rjmp	.+304    	; 0x369a <__fp_zero>
    356a:	67 2f       	mov	r22, r23
    356c:	78 2f       	mov	r23, r24
    356e:	88 27       	eor	r24, r24
    3570:	b8 5f       	subi	r27, 0xF8	; 248
    3572:	39 f0       	breq	.+14     	; 0x3582 <__fixunssfsi+0x46>
    3574:	b9 3f       	cpi	r27, 0xF9	; 249
    3576:	cc f3       	brlt	.-14     	; 0x356a <__fixunssfsi+0x2e>
    3578:	86 95       	lsr	r24
    357a:	77 95       	ror	r23
    357c:	67 95       	ror	r22
    357e:	b3 95       	inc	r27
    3580:	d9 f7       	brne	.-10     	; 0x3578 <__fixunssfsi+0x3c>
    3582:	3e f4       	brtc	.+14     	; 0x3592 <__fixunssfsi+0x56>
    3584:	90 95       	com	r25
    3586:	80 95       	com	r24
    3588:	70 95       	com	r23
    358a:	61 95       	neg	r22
    358c:	7f 4f       	sbci	r23, 0xFF	; 255
    358e:	8f 4f       	sbci	r24, 0xFF	; 255
    3590:	9f 4f       	sbci	r25, 0xFF	; 255
    3592:	08 95       	ret

00003594 <__floatunsisf>:
    3594:	e8 94       	clt
    3596:	09 c0       	rjmp	.+18     	; 0x35aa <__floatsisf+0x12>

00003598 <__floatsisf>:
    3598:	97 fb       	bst	r25, 7
    359a:	3e f4       	brtc	.+14     	; 0x35aa <__floatsisf+0x12>
    359c:	90 95       	com	r25
    359e:	80 95       	com	r24
    35a0:	70 95       	com	r23
    35a2:	61 95       	neg	r22
    35a4:	7f 4f       	sbci	r23, 0xFF	; 255
    35a6:	8f 4f       	sbci	r24, 0xFF	; 255
    35a8:	9f 4f       	sbci	r25, 0xFF	; 255
    35aa:	99 23       	and	r25, r25
    35ac:	a9 f0       	breq	.+42     	; 0x35d8 <__floatsisf+0x40>
    35ae:	f9 2f       	mov	r31, r25
    35b0:	96 e9       	ldi	r25, 0x96	; 150
    35b2:	bb 27       	eor	r27, r27
    35b4:	93 95       	inc	r25
    35b6:	f6 95       	lsr	r31
    35b8:	87 95       	ror	r24
    35ba:	77 95       	ror	r23
    35bc:	67 95       	ror	r22
    35be:	b7 95       	ror	r27
    35c0:	f1 11       	cpse	r31, r1
    35c2:	f8 cf       	rjmp	.-16     	; 0x35b4 <__floatsisf+0x1c>
    35c4:	fa f4       	brpl	.+62     	; 0x3604 <__floatsisf+0x6c>
    35c6:	bb 0f       	add	r27, r27
    35c8:	11 f4       	brne	.+4      	; 0x35ce <__floatsisf+0x36>
    35ca:	60 ff       	sbrs	r22, 0
    35cc:	1b c0       	rjmp	.+54     	; 0x3604 <__floatsisf+0x6c>
    35ce:	6f 5f       	subi	r22, 0xFF	; 255
    35d0:	7f 4f       	sbci	r23, 0xFF	; 255
    35d2:	8f 4f       	sbci	r24, 0xFF	; 255
    35d4:	9f 4f       	sbci	r25, 0xFF	; 255
    35d6:	16 c0       	rjmp	.+44     	; 0x3604 <__floatsisf+0x6c>
    35d8:	88 23       	and	r24, r24
    35da:	11 f0       	breq	.+4      	; 0x35e0 <__floatsisf+0x48>
    35dc:	96 e9       	ldi	r25, 0x96	; 150
    35de:	11 c0       	rjmp	.+34     	; 0x3602 <__floatsisf+0x6a>
    35e0:	77 23       	and	r23, r23
    35e2:	21 f0       	breq	.+8      	; 0x35ec <__floatsisf+0x54>
    35e4:	9e e8       	ldi	r25, 0x8E	; 142
    35e6:	87 2f       	mov	r24, r23
    35e8:	76 2f       	mov	r23, r22
    35ea:	05 c0       	rjmp	.+10     	; 0x35f6 <__floatsisf+0x5e>
    35ec:	66 23       	and	r22, r22
    35ee:	71 f0       	breq	.+28     	; 0x360c <__floatsisf+0x74>
    35f0:	96 e8       	ldi	r25, 0x86	; 134
    35f2:	86 2f       	mov	r24, r22
    35f4:	70 e0       	ldi	r23, 0x00	; 0
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	2a f0       	brmi	.+10     	; 0x3604 <__floatsisf+0x6c>
    35fa:	9a 95       	dec	r25
    35fc:	66 0f       	add	r22, r22
    35fe:	77 1f       	adc	r23, r23
    3600:	88 1f       	adc	r24, r24
    3602:	da f7       	brpl	.-10     	; 0x35fa <__floatsisf+0x62>
    3604:	88 0f       	add	r24, r24
    3606:	96 95       	lsr	r25
    3608:	87 95       	ror	r24
    360a:	97 f9       	bld	r25, 7
    360c:	08 95       	ret

0000360e <__fp_cmp>:
    360e:	99 0f       	add	r25, r25
    3610:	00 08       	sbc	r0, r0
    3612:	55 0f       	add	r21, r21
    3614:	aa 0b       	sbc	r26, r26
    3616:	e0 e8       	ldi	r30, 0x80	; 128
    3618:	fe ef       	ldi	r31, 0xFE	; 254
    361a:	16 16       	cp	r1, r22
    361c:	17 06       	cpc	r1, r23
    361e:	e8 07       	cpc	r30, r24
    3620:	f9 07       	cpc	r31, r25
    3622:	c0 f0       	brcs	.+48     	; 0x3654 <__fp_cmp+0x46>
    3624:	12 16       	cp	r1, r18
    3626:	13 06       	cpc	r1, r19
    3628:	e4 07       	cpc	r30, r20
    362a:	f5 07       	cpc	r31, r21
    362c:	98 f0       	brcs	.+38     	; 0x3654 <__fp_cmp+0x46>
    362e:	62 1b       	sub	r22, r18
    3630:	73 0b       	sbc	r23, r19
    3632:	84 0b       	sbc	r24, r20
    3634:	95 0b       	sbc	r25, r21
    3636:	39 f4       	brne	.+14     	; 0x3646 <__fp_cmp+0x38>
    3638:	0a 26       	eor	r0, r26
    363a:	61 f0       	breq	.+24     	; 0x3654 <__fp_cmp+0x46>
    363c:	23 2b       	or	r18, r19
    363e:	24 2b       	or	r18, r20
    3640:	25 2b       	or	r18, r21
    3642:	21 f4       	brne	.+8      	; 0x364c <__fp_cmp+0x3e>
    3644:	08 95       	ret
    3646:	0a 26       	eor	r0, r26
    3648:	09 f4       	brne	.+2      	; 0x364c <__fp_cmp+0x3e>
    364a:	a1 40       	sbci	r26, 0x01	; 1
    364c:	a6 95       	lsr	r26
    364e:	8f ef       	ldi	r24, 0xFF	; 255
    3650:	81 1d       	adc	r24, r1
    3652:	81 1d       	adc	r24, r1
    3654:	08 95       	ret

00003656 <__fp_split3>:
    3656:	57 fd       	sbrc	r21, 7
    3658:	90 58       	subi	r25, 0x80	; 128
    365a:	44 0f       	add	r20, r20
    365c:	55 1f       	adc	r21, r21
    365e:	59 f0       	breq	.+22     	; 0x3676 <__fp_splitA+0x10>
    3660:	5f 3f       	cpi	r21, 0xFF	; 255
    3662:	71 f0       	breq	.+28     	; 0x3680 <__fp_splitA+0x1a>
    3664:	47 95       	ror	r20

00003666 <__fp_splitA>:
    3666:	88 0f       	add	r24, r24
    3668:	97 fb       	bst	r25, 7
    366a:	99 1f       	adc	r25, r25
    366c:	61 f0       	breq	.+24     	; 0x3686 <__fp_splitA+0x20>
    366e:	9f 3f       	cpi	r25, 0xFF	; 255
    3670:	79 f0       	breq	.+30     	; 0x3690 <__fp_splitA+0x2a>
    3672:	87 95       	ror	r24
    3674:	08 95       	ret
    3676:	12 16       	cp	r1, r18
    3678:	13 06       	cpc	r1, r19
    367a:	14 06       	cpc	r1, r20
    367c:	55 1f       	adc	r21, r21
    367e:	f2 cf       	rjmp	.-28     	; 0x3664 <__fp_split3+0xe>
    3680:	46 95       	lsr	r20
    3682:	f1 df       	rcall	.-30     	; 0x3666 <__fp_splitA>
    3684:	08 c0       	rjmp	.+16     	; 0x3696 <__fp_splitA+0x30>
    3686:	16 16       	cp	r1, r22
    3688:	17 06       	cpc	r1, r23
    368a:	18 06       	cpc	r1, r24
    368c:	99 1f       	adc	r25, r25
    368e:	f1 cf       	rjmp	.-30     	; 0x3672 <__fp_splitA+0xc>
    3690:	86 95       	lsr	r24
    3692:	71 05       	cpc	r23, r1
    3694:	61 05       	cpc	r22, r1
    3696:	08 94       	sec
    3698:	08 95       	ret

0000369a <__fp_zero>:
    369a:	e8 94       	clt

0000369c <__fp_szero>:
    369c:	bb 27       	eor	r27, r27
    369e:	66 27       	eor	r22, r22
    36a0:	77 27       	eor	r23, r23
    36a2:	cb 01       	movw	r24, r22
    36a4:	97 f9       	bld	r25, 7
    36a6:	08 95       	ret

000036a8 <__gesf2>:
    36a8:	b2 df       	rcall	.-156    	; 0x360e <__fp_cmp>
    36aa:	08 f4       	brcc	.+2      	; 0x36ae <__gesf2+0x6>
    36ac:	8f ef       	ldi	r24, 0xFF	; 255
    36ae:	08 95       	ret

000036b0 <__mulsf3>:
    36b0:	0b d0       	rcall	.+22     	; 0x36c8 <__mulsf3x>
    36b2:	78 c0       	rjmp	.+240    	; 0x37a4 <__fp_round>
    36b4:	69 d0       	rcall	.+210    	; 0x3788 <__fp_pscA>
    36b6:	28 f0       	brcs	.+10     	; 0x36c2 <__mulsf3+0x12>
    36b8:	6e d0       	rcall	.+220    	; 0x3796 <__fp_pscB>
    36ba:	18 f0       	brcs	.+6      	; 0x36c2 <__mulsf3+0x12>
    36bc:	95 23       	and	r25, r21
    36be:	09 f0       	breq	.+2      	; 0x36c2 <__mulsf3+0x12>
    36c0:	5a c0       	rjmp	.+180    	; 0x3776 <__fp_inf>
    36c2:	5f c0       	rjmp	.+190    	; 0x3782 <__fp_nan>
    36c4:	11 24       	eor	r1, r1
    36c6:	ea cf       	rjmp	.-44     	; 0x369c <__fp_szero>

000036c8 <__mulsf3x>:
    36c8:	c6 df       	rcall	.-116    	; 0x3656 <__fp_split3>
    36ca:	a0 f3       	brcs	.-24     	; 0x36b4 <__mulsf3+0x4>

000036cc <__mulsf3_pse>:
    36cc:	95 9f       	mul	r25, r21
    36ce:	d1 f3       	breq	.-12     	; 0x36c4 <__mulsf3+0x14>
    36d0:	95 0f       	add	r25, r21
    36d2:	50 e0       	ldi	r21, 0x00	; 0
    36d4:	55 1f       	adc	r21, r21
    36d6:	62 9f       	mul	r22, r18
    36d8:	f0 01       	movw	r30, r0
    36da:	72 9f       	mul	r23, r18
    36dc:	bb 27       	eor	r27, r27
    36de:	f0 0d       	add	r31, r0
    36e0:	b1 1d       	adc	r27, r1
    36e2:	63 9f       	mul	r22, r19
    36e4:	aa 27       	eor	r26, r26
    36e6:	f0 0d       	add	r31, r0
    36e8:	b1 1d       	adc	r27, r1
    36ea:	aa 1f       	adc	r26, r26
    36ec:	64 9f       	mul	r22, r20
    36ee:	66 27       	eor	r22, r22
    36f0:	b0 0d       	add	r27, r0
    36f2:	a1 1d       	adc	r26, r1
    36f4:	66 1f       	adc	r22, r22
    36f6:	82 9f       	mul	r24, r18
    36f8:	22 27       	eor	r18, r18
    36fa:	b0 0d       	add	r27, r0
    36fc:	a1 1d       	adc	r26, r1
    36fe:	62 1f       	adc	r22, r18
    3700:	73 9f       	mul	r23, r19
    3702:	b0 0d       	add	r27, r0
    3704:	a1 1d       	adc	r26, r1
    3706:	62 1f       	adc	r22, r18
    3708:	83 9f       	mul	r24, r19
    370a:	a0 0d       	add	r26, r0
    370c:	61 1d       	adc	r22, r1
    370e:	22 1f       	adc	r18, r18
    3710:	74 9f       	mul	r23, r20
    3712:	33 27       	eor	r19, r19
    3714:	a0 0d       	add	r26, r0
    3716:	61 1d       	adc	r22, r1
    3718:	23 1f       	adc	r18, r19
    371a:	84 9f       	mul	r24, r20
    371c:	60 0d       	add	r22, r0
    371e:	21 1d       	adc	r18, r1
    3720:	82 2f       	mov	r24, r18
    3722:	76 2f       	mov	r23, r22
    3724:	6a 2f       	mov	r22, r26
    3726:	11 24       	eor	r1, r1
    3728:	9f 57       	subi	r25, 0x7F	; 127
    372a:	50 40       	sbci	r21, 0x00	; 0
    372c:	8a f0       	brmi	.+34     	; 0x3750 <__mulsf3_pse+0x84>
    372e:	e1 f0       	breq	.+56     	; 0x3768 <__mulsf3_pse+0x9c>
    3730:	88 23       	and	r24, r24
    3732:	4a f0       	brmi	.+18     	; 0x3746 <__mulsf3_pse+0x7a>
    3734:	ee 0f       	add	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	bb 1f       	adc	r27, r27
    373a:	66 1f       	adc	r22, r22
    373c:	77 1f       	adc	r23, r23
    373e:	88 1f       	adc	r24, r24
    3740:	91 50       	subi	r25, 0x01	; 1
    3742:	50 40       	sbci	r21, 0x00	; 0
    3744:	a9 f7       	brne	.-22     	; 0x3730 <__mulsf3_pse+0x64>
    3746:	9e 3f       	cpi	r25, 0xFE	; 254
    3748:	51 05       	cpc	r21, r1
    374a:	70 f0       	brcs	.+28     	; 0x3768 <__mulsf3_pse+0x9c>
    374c:	14 c0       	rjmp	.+40     	; 0x3776 <__fp_inf>
    374e:	a6 cf       	rjmp	.-180    	; 0x369c <__fp_szero>
    3750:	5f 3f       	cpi	r21, 0xFF	; 255
    3752:	ec f3       	brlt	.-6      	; 0x374e <__mulsf3_pse+0x82>
    3754:	98 3e       	cpi	r25, 0xE8	; 232
    3756:	dc f3       	brlt	.-10     	; 0x374e <__mulsf3_pse+0x82>
    3758:	86 95       	lsr	r24
    375a:	77 95       	ror	r23
    375c:	67 95       	ror	r22
    375e:	b7 95       	ror	r27
    3760:	f7 95       	ror	r31
    3762:	e7 95       	ror	r30
    3764:	9f 5f       	subi	r25, 0xFF	; 255
    3766:	c1 f7       	brne	.-16     	; 0x3758 <__mulsf3_pse+0x8c>
    3768:	fe 2b       	or	r31, r30
    376a:	88 0f       	add	r24, r24
    376c:	91 1d       	adc	r25, r1
    376e:	96 95       	lsr	r25
    3770:	87 95       	ror	r24
    3772:	97 f9       	bld	r25, 7
    3774:	08 95       	ret

00003776 <__fp_inf>:
    3776:	97 f9       	bld	r25, 7
    3778:	9f 67       	ori	r25, 0x7F	; 127
    377a:	80 e8       	ldi	r24, 0x80	; 128
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	60 e0       	ldi	r22, 0x00	; 0
    3780:	08 95       	ret

00003782 <__fp_nan>:
    3782:	9f ef       	ldi	r25, 0xFF	; 255
    3784:	80 ec       	ldi	r24, 0xC0	; 192
    3786:	08 95       	ret

00003788 <__fp_pscA>:
    3788:	00 24       	eor	r0, r0
    378a:	0a 94       	dec	r0
    378c:	16 16       	cp	r1, r22
    378e:	17 06       	cpc	r1, r23
    3790:	18 06       	cpc	r1, r24
    3792:	09 06       	cpc	r0, r25
    3794:	08 95       	ret

00003796 <__fp_pscB>:
    3796:	00 24       	eor	r0, r0
    3798:	0a 94       	dec	r0
    379a:	12 16       	cp	r1, r18
    379c:	13 06       	cpc	r1, r19
    379e:	14 06       	cpc	r1, r20
    37a0:	05 06       	cpc	r0, r21
    37a2:	08 95       	ret

000037a4 <__fp_round>:
    37a4:	09 2e       	mov	r0, r25
    37a6:	03 94       	inc	r0
    37a8:	00 0c       	add	r0, r0
    37aa:	11 f4       	brne	.+4      	; 0x37b0 <__fp_round+0xc>
    37ac:	88 23       	and	r24, r24
    37ae:	52 f0       	brmi	.+20     	; 0x37c4 <__fp_round+0x20>
    37b0:	bb 0f       	add	r27, r27
    37b2:	40 f4       	brcc	.+16     	; 0x37c4 <__fp_round+0x20>
    37b4:	bf 2b       	or	r27, r31
    37b6:	11 f4       	brne	.+4      	; 0x37bc <__fp_round+0x18>
    37b8:	60 ff       	sbrs	r22, 0
    37ba:	04 c0       	rjmp	.+8      	; 0x37c4 <__fp_round+0x20>
    37bc:	6f 5f       	subi	r22, 0xFF	; 255
    37be:	7f 4f       	sbci	r23, 0xFF	; 255
    37c0:	8f 4f       	sbci	r24, 0xFF	; 255
    37c2:	9f 4f       	sbci	r25, 0xFF	; 255
    37c4:	08 95       	ret

000037c6 <itoa>:
    37c6:	fb 01       	movw	r30, r22
    37c8:	9f 01       	movw	r18, r30
    37ca:	e8 94       	clt
    37cc:	42 30       	cpi	r20, 0x02	; 2
    37ce:	c4 f0       	brlt	.+48     	; 0x3800 <itoa+0x3a>
    37d0:	45 32       	cpi	r20, 0x25	; 37
    37d2:	b4 f4       	brge	.+44     	; 0x3800 <itoa+0x3a>
    37d4:	4a 30       	cpi	r20, 0x0A	; 10
    37d6:	29 f4       	brne	.+10     	; 0x37e2 <itoa+0x1c>
    37d8:	97 fb       	bst	r25, 7
    37da:	1e f4       	brtc	.+6      	; 0x37e2 <itoa+0x1c>
    37dc:	90 95       	com	r25
    37de:	81 95       	neg	r24
    37e0:	9f 4f       	sbci	r25, 0xFF	; 255
    37e2:	64 2f       	mov	r22, r20
    37e4:	77 27       	eor	r23, r23
    37e6:	0e 94 81 1a 	call	0x3502	; 0x3502 <__udivmodhi4>
    37ea:	80 5d       	subi	r24, 0xD0	; 208
    37ec:	8a 33       	cpi	r24, 0x3A	; 58
    37ee:	0c f0       	brlt	.+2      	; 0x37f2 <itoa+0x2c>
    37f0:	89 5d       	subi	r24, 0xD9	; 217
    37f2:	81 93       	st	Z+, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	a1 f7       	brne	.-24     	; 0x37e2 <itoa+0x1c>
    37fa:	16 f4       	brtc	.+4      	; 0x3800 <itoa+0x3a>
    37fc:	5d e2       	ldi	r21, 0x2D	; 45
    37fe:	51 93       	st	Z+, r21
    3800:	10 82       	st	Z, r1
    3802:	c9 01       	movw	r24, r18
    3804:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <strrev>

00003808 <__eerd_word_m32>:
    3808:	a8 e1       	ldi	r26, 0x18	; 24
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	42 e0       	ldi	r20, 0x02	; 2
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__eerd_blraw_m32>

00003814 <__eewr_word_m32>:
    3814:	0e 94 2f 1c 	call	0x385e	; 0x385e <__eewr_byte_m32>
    3818:	27 2f       	mov	r18, r23
    381a:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <__eewr_r18_m32>

0000381e <strrev>:
    381e:	dc 01       	movw	r26, r24
    3820:	fc 01       	movw	r30, r24
    3822:	67 2f       	mov	r22, r23
    3824:	71 91       	ld	r23, Z+
    3826:	77 23       	and	r23, r23
    3828:	e1 f7       	brne	.-8      	; 0x3822 <strrev+0x4>
    382a:	32 97       	sbiw	r30, 0x02	; 2
    382c:	04 c0       	rjmp	.+8      	; 0x3836 <strrev+0x18>
    382e:	7c 91       	ld	r23, X
    3830:	6d 93       	st	X+, r22
    3832:	70 83       	st	Z, r23
    3834:	62 91       	ld	r22, -Z
    3836:	ae 17       	cp	r26, r30
    3838:	bf 07       	cpc	r27, r31
    383a:	c8 f3       	brcs	.-14     	; 0x382e <strrev+0x10>
    383c:	08 95       	ret

0000383e <__eerd_block_m32>:
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22

00003842 <__eerd_blraw_m32>:
    3842:	fc 01       	movw	r30, r24
    3844:	e1 99       	sbic	0x1c, 1	; 28
    3846:	fe cf       	rjmp	.-4      	; 0x3844 <__eerd_blraw_m32+0x2>
    3848:	06 c0       	rjmp	.+12     	; 0x3856 <__eerd_blraw_m32+0x14>
    384a:	ff bb       	out	0x1f, r31	; 31
    384c:	ee bb       	out	0x1e, r30	; 30
    384e:	e0 9a       	sbi	0x1c, 0	; 28
    3850:	31 96       	adiw	r30, 0x01	; 1
    3852:	0d b2       	in	r0, 0x1d	; 29
    3854:	0d 92       	st	X+, r0
    3856:	41 50       	subi	r20, 0x01	; 1
    3858:	50 40       	sbci	r21, 0x00	; 0
    385a:	b8 f7       	brcc	.-18     	; 0x384a <__eerd_blraw_m32+0x8>
    385c:	08 95       	ret

0000385e <__eewr_byte_m32>:
    385e:	26 2f       	mov	r18, r22

00003860 <__eewr_r18_m32>:
    3860:	e1 99       	sbic	0x1c, 1	; 28
    3862:	fe cf       	rjmp	.-4      	; 0x3860 <__eewr_r18_m32>
    3864:	9f bb       	out	0x1f, r25	; 31
    3866:	8e bb       	out	0x1e, r24	; 30
    3868:	2d bb       	out	0x1d, r18	; 29
    386a:	0f b6       	in	r0, 0x3f	; 63
    386c:	f8 94       	cli
    386e:	e2 9a       	sbi	0x1c, 2	; 28
    3870:	e1 9a       	sbi	0x1c, 1	; 28
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	01 96       	adiw	r24, 0x01	; 1
    3876:	08 95       	ret

00003878 <_exit>:
    3878:	f8 94       	cli

0000387a <__stop_program>:
    387a:	ff cf       	rjmp	.-2      	; 0x387a <__stop_program>
